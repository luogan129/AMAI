





globals

    constant integer STRAT_AoLMix = 0
    constant integer STRAT_AoWMix = 1
    constant integer STRAT_Talon = 2
    constant integer STRAT_HippoChim = 3
    constant integer STRAT_DryadChim = 4
    constant integer STRAT_DotC = 5
    constant integer STRAT_Druids = 6
    constant integer STRAT_Hippo = 7
    constant integer STRAT_MGDryads = 8
    constant integer STRAT_Ballista = 9
    constant integer STRAT_Archer = 10
    constant integer STRAT_MassHuntress = 11
    constant integer STRAT_MassHD = 12
    constant integer STRAT_NEAntiTower = 13
    constant integer STRAT_NormalElf = 14

    boolean startup     = true


    boolean keep_res    = true

    integer wave        = 1
    boolean peons_assigned = false
    boolean take_all_ghouls_along = false
	
	
endglobals

function InitStratData takes nothing returns nothing
set strategy_name[STRAT_NormalElf] = "NormalElf"
set strategy_default_name[STRAT_NormalElf] = "Normal"
set strategy_default_report[STRAT_NormalElf] = "I play normal and build something of everything"
set key_building1[STRAT_NormalElf] = ANCIENT_WAR
set key_building2[STRAT_NormalElf] = ANCIENT_LORE
set key_upgrade1[STRAT_NormalElf] = UPG_STR_WILD
set key_upgrade2[STRAT_NormalElf] = UPG_HIDES
set key_unit[STRAT_NormalElf] = DRYAD
set beginning_strat[STRAT_NormalElf] = true
set strat_minimum_time[STRAT_NormalElf] = 50
set strategy_type[STRAT_NormalElf] = STRATEGY_TYPE_RANGED
set strategy_tier[STRAT_NormalElf] = 2
set strategy_first_exp_time[STRAT_NormalElf] = 50
set strategy_second_exp_time[STRAT_NormalElf] = 120
set strategy_first_hero[STRAT_NormalElf] = 0
set strategy_first_hero_bonus[STRAT_NormalElf] = 0
set strategy_second_hero[STRAT_NormalElf] = 0
set strategy_second_hero_bonus[STRAT_NormalElf] = 0
set strategy_third_hero[STRAT_NormalElf] = 0
set strategy_third_hero_bonus[STRAT_NormalElf] = 0
set strategy_race_aggression[STRAT_NormalElf * 12 + 0] = 0
set strategy_race_aggression[STRAT_NormalElf * 12 + 1] = 0
set strategy_race_aggression[STRAT_NormalElf * 12 + 2] = 0
set strategy_race_aggression[STRAT_NormalElf * 12 + 3] = 0
set strategy_race_aggression[STRAT_NormalElf * 12 + 4] = 0
set strategy_race_aggression[STRAT_NormalElf * 12 + 5] = 0
set strategy_race_aggression[STRAT_NormalElf * 12 + 6] = 0
set strategy_race_aggression[STRAT_NormalElf * 12 + 7] = 0
set strategy_race_aggression[STRAT_NormalElf * 12 + 8] = 0
set strategy_race_aggression[STRAT_NormalElf * 12 + 9] = 0
set strategy_race_aggression[STRAT_NormalElf * 12 + 10] = 0
set strategy_race_aggression[STRAT_NormalElf * 12 + 11] = 0
set strategy_name[STRAT_MassHD] = "MassHD"
set strategy_default_name[STRAT_MassHD] = "Hunts and Dryads"
set strategy_default_report[STRAT_MassHD] = "I'm going massive huntress with some dryads"
set key_building1[STRAT_MassHD] = ANCIENT_WAR
set key_building2[STRAT_MassHD] = ANCIENT_LORE
set key_upgrade1[STRAT_MassHD] = UPG_GLAIVE
set key_upgrade2[STRAT_MassHD] = UPG_ABOLISH
set key_unit[STRAT_MassHD] = HUNTRESS
set beginning_strat[STRAT_MassHD] = true
set strat_minimum_time[STRAT_MassHD] = 35
set strategy_type[STRAT_MassHD] = STRATEGY_TYPE_RANGED
set strategy_tier[STRAT_MassHD] = 2
set strategy_first_exp_time[STRAT_MassHD] = 40
set strategy_second_exp_time[STRAT_MassHD] = 140
set strategy_first_hero[STRAT_MassHD] = 0
set strategy_first_hero_bonus[STRAT_MassHD] = 0
set strategy_second_hero[STRAT_MassHD] = 0
set strategy_second_hero_bonus[STRAT_MassHD] = 0
set strategy_third_hero[STRAT_MassHD] = 0
set strategy_third_hero_bonus[STRAT_MassHD] = 0
set strategy_race_aggression[STRAT_MassHD * 12 + 0] = 0
set strategy_race_aggression[STRAT_MassHD * 12 + 1] = 0
set strategy_race_aggression[STRAT_MassHD * 12 + 2] = 0
set strategy_race_aggression[STRAT_MassHD * 12 + 3] = 0
set strategy_race_aggression[STRAT_MassHD * 12 + 4] = 0
set strategy_race_aggression[STRAT_MassHD * 12 + 5] = 0
set strategy_race_aggression[STRAT_MassHD * 12 + 6] = 0
set strategy_race_aggression[STRAT_MassHD * 12 + 7] = 0
set strategy_race_aggression[STRAT_MassHD * 12 + 8] = 0
set strategy_race_aggression[STRAT_MassHD * 12 + 9] = 0
set strategy_race_aggression[STRAT_MassHD * 12 + 10] = 0
set strategy_race_aggression[STRAT_MassHD * 12 + 11] = 0
set strategy_name[STRAT_Druids] = "Druids"
set strategy_default_name[STRAT_Druids] = "Dryads and DotC"
set strategy_default_report[STRAT_Druids] = "I'm going dryads and Druids"
set key_building1[STRAT_Druids] = ANCIENT_LORE
set key_building2[STRAT_Druids] = TREE_ETERNITY
set key_upgrade1[STRAT_Druids] = UPG_DRUID_CLAW
set key_upgrade2[STRAT_Druids] = UPG_DRUID_TALON
set key_unit[STRAT_Druids] = DRUID_CLAW
set beginning_strat[STRAT_Druids] = true
set strat_minimum_time[STRAT_Druids] = 40
set strategy_type[STRAT_Druids] = STRATEGY_TYPE_RANGED
set strategy_tier[STRAT_Druids] = 3
set strategy_first_exp_time[STRAT_Druids] = 45
set strategy_second_exp_time[STRAT_Druids] = 135
set strategy_first_hero[STRAT_Druids] = DEMON_HUNTER
set strategy_first_hero_bonus[STRAT_Druids] = 30
set strategy_second_hero[STRAT_Druids] = BREW_MASTER
set strategy_second_hero_bonus[STRAT_Druids] = 15
set strategy_third_hero[STRAT_Druids] = 0
set strategy_third_hero_bonus[STRAT_Druids] = 0
set strategy_race_aggression[STRAT_Druids * 12 + 0] = 0
set strategy_race_aggression[STRAT_Druids * 12 + 1] = 0
set strategy_race_aggression[STRAT_Druids * 12 + 2] = 0
set strategy_race_aggression[STRAT_Druids * 12 + 3] = 0
set strategy_race_aggression[STRAT_Druids * 12 + 4] = 0
set strategy_race_aggression[STRAT_Druids * 12 + 5] = 0
set strategy_race_aggression[STRAT_Druids * 12 + 6] = 0
set strategy_race_aggression[STRAT_Druids * 12 + 7] = 0
set strategy_race_aggression[STRAT_Druids * 12 + 8] = 0
set strategy_race_aggression[STRAT_Druids * 12 + 9] = 0
set strategy_race_aggression[STRAT_Druids * 12 + 10] = 0
set strategy_race_aggression[STRAT_Druids * 12 + 11] = 0
set strategy_name[STRAT_Hippo] = "Hippo"
set strategy_default_name[STRAT_Hippo] = "Hippo Riders"
set strategy_default_report[STRAT_Hippo] = "I'm going hippo riders"
set key_building1[STRAT_Hippo] = ANCIENT_WIND
set key_building2[STRAT_Hippo] = ANCIENT_WAR
set key_upgrade1[STRAT_Hippo] = UPG_STR_MOON
set key_upgrade2[STRAT_Hippo] = UPG_MOON_ARMOR
set key_unit[STRAT_Hippo] = HIPPO_RIDER
set beginning_strat[STRAT_Hippo] = true
set strat_minimum_time[STRAT_Hippo] = 35
set strategy_type[STRAT_Hippo] = STRATEGY_TYPE_AIR
set strategy_tier[STRAT_Hippo] = 2
set strategy_first_exp_time[STRAT_Hippo] = 47
set strategy_second_exp_time[STRAT_Hippo] = 127
set strategy_first_hero[STRAT_Hippo] = 0
set strategy_first_hero_bonus[STRAT_Hippo] = 0
set strategy_second_hero[STRAT_Hippo] = 0
set strategy_second_hero_bonus[STRAT_Hippo] = 0
set strategy_third_hero[STRAT_Hippo] = 0
set strategy_third_hero_bonus[STRAT_Hippo] = 0
set strategy_race_aggression[STRAT_Hippo * 12 + 0] = 0
set strategy_race_aggression[STRAT_Hippo * 12 + 1] = 0
set strategy_race_aggression[STRAT_Hippo * 12 + 2] = 0
set strategy_race_aggression[STRAT_Hippo * 12 + 3] = 0
set strategy_race_aggression[STRAT_Hippo * 12 + 4] = 0
set strategy_race_aggression[STRAT_Hippo * 12 + 5] = 0
set strategy_race_aggression[STRAT_Hippo * 12 + 6] = 0
set strategy_race_aggression[STRAT_Hippo * 12 + 7] = 3
set strategy_race_aggression[STRAT_Hippo * 12 + 8] = 5
set strategy_race_aggression[STRAT_Hippo * 12 + 9] = 0
set strategy_race_aggression[STRAT_Hippo * 12 + 10] = 0
set strategy_race_aggression[STRAT_Hippo * 12 + 11] = 0
set strategy_name[STRAT_Ballista] = "Ballista"
set strategy_default_name[STRAT_Ballista] = "Ballista"
set strategy_default_report[STRAT_Ballista] = "I'm going glaive throwers and dryads"
set key_building1[STRAT_Ballista] = ANCIENT_WAR
set key_building2[STRAT_Ballista] = ANCIENT_LORE
set key_upgrade1[STRAT_Ballista] = UPG_ABOLISH
set key_upgrade2[STRAT_Ballista] = UPG_BOLT
set key_unit[STRAT_Ballista] = DRYAD
set beginning_strat[STRAT_Ballista] = false
set strat_minimum_time[STRAT_Ballista] = 20
set strategy_type[STRAT_Ballista] = STRATEGY_TYPE_RANGED
set strategy_tier[STRAT_Ballista] = 2
set strategy_first_exp_time[STRAT_Ballista] = 37
set strategy_second_exp_time[STRAT_Ballista] = 135
set strategy_first_hero[STRAT_Ballista] = 0
set strategy_first_hero_bonus[STRAT_Ballista] = 0
set strategy_second_hero[STRAT_Ballista] = 0
set strategy_second_hero_bonus[STRAT_Ballista] = 0
set strategy_third_hero[STRAT_Ballista] = 0
set strategy_third_hero_bonus[STRAT_Ballista] = 0
set strategy_race_aggression[STRAT_Ballista * 12 + 0] = 0
set strategy_race_aggression[STRAT_Ballista * 12 + 1] = 0
set strategy_race_aggression[STRAT_Ballista * 12 + 2] = 0
set strategy_race_aggression[STRAT_Ballista * 12 + 3] = 0
set strategy_race_aggression[STRAT_Ballista * 12 + 4] = 0
set strategy_race_aggression[STRAT_Ballista * 12 + 5] = 0
set strategy_race_aggression[STRAT_Ballista * 12 + 6] = 0
set strategy_race_aggression[STRAT_Ballista * 12 + 7] = 0
set strategy_race_aggression[STRAT_Ballista * 12 + 8] = 0
set strategy_race_aggression[STRAT_Ballista * 12 + 9] = 0
set strategy_race_aggression[STRAT_Ballista * 12 + 10] = 0
set strategy_race_aggression[STRAT_Ballista * 12 + 11] = 0
set strategy_name[STRAT_Talon] = "Talon"
set strategy_default_name[STRAT_Talon] = "Talon"
set strategy_default_report[STRAT_Talon] = "I'm going massive DotT"
set key_building1[STRAT_Talon] = ANCIENT_WIND
set key_building2[STRAT_Talon] = TREE_ETERNITY
set key_upgrade1[STRAT_Talon] = UPG_DRUID_TALON
set key_upgrade2[STRAT_Talon] = UPG_WELL_SPRING
set key_unit[STRAT_Talon] = DRUID_TALON
set beginning_strat[STRAT_Talon] = true
set strat_minimum_time[STRAT_Talon] = 40
set strategy_type[STRAT_Talon] = STRATEGY_TYPE_CASTER
set strategy_tier[STRAT_Talon] = 3
set strategy_first_exp_time[STRAT_Talon] = 42
set strategy_second_exp_time[STRAT_Talon] = 140
set strategy_first_hero[STRAT_Talon] = DEMON_HUNTER
set strategy_first_hero_bonus[STRAT_Talon] = 30
set strategy_second_hero[STRAT_Talon] = BEAST_MASTER
set strategy_second_hero_bonus[STRAT_Talon] = 15
set strategy_third_hero[STRAT_Talon] = 0
set strategy_third_hero_bonus[STRAT_Talon] = 0
set strategy_race_aggression[STRAT_Talon * 12 + 0] = 0
set strategy_race_aggression[STRAT_Talon * 12 + 1] = 0
set strategy_race_aggression[STRAT_Talon * 12 + 2] = 0
set strategy_race_aggression[STRAT_Talon * 12 + 3] = 0
set strategy_race_aggression[STRAT_Talon * 12 + 4] = 0
set strategy_race_aggression[STRAT_Talon * 12 + 5] = 0
set strategy_race_aggression[STRAT_Talon * 12 + 6] = 0
set strategy_race_aggression[STRAT_Talon * 12 + 7] = 0
set strategy_race_aggression[STRAT_Talon * 12 + 8] = 0
set strategy_race_aggression[STRAT_Talon * 12 + 9] = 0
set strategy_race_aggression[STRAT_Talon * 12 + 10] = 0
set strategy_race_aggression[STRAT_Talon * 12 + 11] = 0
set strategy_name[STRAT_HippoChim] = "HippoChim"
set strategy_default_name[STRAT_HippoChim] = "HippoChim"
set strategy_default_report[STRAT_HippoChim] = "I'm going hippos and chimaeras"
set key_building1[STRAT_HippoChim] = ANCIENT_WIND
set key_building2[STRAT_HippoChim] = TREE_ETERNITY
set key_upgrade1[STRAT_HippoChim] = UPG_BOWS
set key_upgrade2[STRAT_HippoChim] = UPG_CHIM_ACID
set key_unit[STRAT_HippoChim] = CHIMAERA
set beginning_strat[STRAT_HippoChim] = true
set strat_minimum_time[STRAT_HippoChim] = 40
set strategy_type[STRAT_HippoChim] = STRATEGY_TYPE_AIR
set strategy_tier[STRAT_HippoChim] = 3
set strategy_first_exp_time[STRAT_HippoChim] = 35
set strategy_second_exp_time[STRAT_HippoChim] = 135
set strategy_first_hero[STRAT_HippoChim] = 0
set strategy_first_hero_bonus[STRAT_HippoChim] = 0
set strategy_second_hero[STRAT_HippoChim] = 0
set strategy_second_hero_bonus[STRAT_HippoChim] = 0
set strategy_third_hero[STRAT_HippoChim] = 0
set strategy_third_hero_bonus[STRAT_HippoChim] = 0
set strategy_race_aggression[STRAT_HippoChim * 12 + 0] = 0
set strategy_race_aggression[STRAT_HippoChim * 12 + 1] = 0
set strategy_race_aggression[STRAT_HippoChim * 12 + 2] = 0
set strategy_race_aggression[STRAT_HippoChim * 12 + 3] = 0
set strategy_race_aggression[STRAT_HippoChim * 12 + 4] = 0
set strategy_race_aggression[STRAT_HippoChim * 12 + 5] = 0
set strategy_race_aggression[STRAT_HippoChim * 12 + 6] = 0
set strategy_race_aggression[STRAT_HippoChim * 12 + 7] = 0
set strategy_race_aggression[STRAT_HippoChim * 12 + 8] = 0
set strategy_race_aggression[STRAT_HippoChim * 12 + 9] = 0
set strategy_race_aggression[STRAT_HippoChim * 12 + 10] = 0
set strategy_race_aggression[STRAT_HippoChim * 12 + 11] = 0
set strategy_name[STRAT_DryadChim] = "DryadChim"
set strategy_default_name[STRAT_DryadChim] = "DryadChim"
set strategy_default_report[STRAT_DryadChim] = "I'm going dryads and chimaeras"
set key_building1[STRAT_DryadChim] = ANCIENT_LORE
set key_building2[STRAT_DryadChim] = TREE_ETERNITY
set key_upgrade1[STRAT_DryadChim] = UPG_ABOLISH
set key_upgrade2[STRAT_DryadChim] = UPG_CHIM_ACID
set key_unit[STRAT_DryadChim] = CHIMAERA
set beginning_strat[STRAT_DryadChim] = true
set strat_minimum_time[STRAT_DryadChim] = 35
set strategy_type[STRAT_DryadChim] = STRATEGY_TYPE_AIR
set strategy_tier[STRAT_DryadChim] = 3
set strategy_first_exp_time[STRAT_DryadChim] = 35
set strategy_second_exp_time[STRAT_DryadChim] = 135
set strategy_first_hero[STRAT_DryadChim] = 0
set strategy_first_hero_bonus[STRAT_DryadChim] = 0
set strategy_second_hero[STRAT_DryadChim] = 0
set strategy_second_hero_bonus[STRAT_DryadChim] = 0
set strategy_third_hero[STRAT_DryadChim] = 0
set strategy_third_hero_bonus[STRAT_DryadChim] = 0
set strategy_race_aggression[STRAT_DryadChim * 12 + 0] = 0
set strategy_race_aggression[STRAT_DryadChim * 12 + 1] = 0
set strategy_race_aggression[STRAT_DryadChim * 12 + 2] = 0
set strategy_race_aggression[STRAT_DryadChim * 12 + 3] = 0
set strategy_race_aggression[STRAT_DryadChim * 12 + 4] = 0
set strategy_race_aggression[STRAT_DryadChim * 12 + 5] = 0
set strategy_race_aggression[STRAT_DryadChim * 12 + 6] = 0
set strategy_race_aggression[STRAT_DryadChim * 12 + 7] = 0
set strategy_race_aggression[STRAT_DryadChim * 12 + 8] = 0
set strategy_race_aggression[STRAT_DryadChim * 12 + 9] = 0
set strategy_race_aggression[STRAT_DryadChim * 12 + 10] = 0
set strategy_race_aggression[STRAT_DryadChim * 12 + 11] = 0
set strategy_name[STRAT_Archer] = "Archer"
set strategy_default_name[STRAT_Archer] = "Archers"
set strategy_default_report[STRAT_Archer] = "I'm going mass archers"
set key_building1[STRAT_Archer] = ANCIENT_WAR
set key_building2[STRAT_Archer] = ANCIENT_WAR
set key_upgrade1[STRAT_Archer] = UPG_BOWS
set key_upgrade2[STRAT_Archer] = UPG_MARKSMAN
set key_unit[STRAT_Archer] = ARCHER
set beginning_strat[STRAT_Archer] = true
set strat_minimum_time[STRAT_Archer] = 20
set strategy_type[STRAT_Archer] = STRATEGY_TYPE_RANGED
set strategy_tier[STRAT_Archer] = 1
set strategy_first_exp_time[STRAT_Archer] = 35
set strategy_second_exp_time[STRAT_Archer] = 135
set strategy_first_hero[STRAT_Archer] = DEMON_HUNTER
set strategy_first_hero_bonus[STRAT_Archer] = 30
set strategy_second_hero[STRAT_Archer] = NAGA_SORCERESS
set strategy_second_hero_bonus[STRAT_Archer] = 15
set strategy_third_hero[STRAT_Archer] = 0
set strategy_third_hero_bonus[STRAT_Archer] = 0
set strategy_race_aggression[STRAT_Archer * 12 + 0] = 0
set strategy_race_aggression[STRAT_Archer * 12 + 1] = 0
set strategy_race_aggression[STRAT_Archer * 12 + 2] = 0
set strategy_race_aggression[STRAT_Archer * 12 + 3] = 0
set strategy_race_aggression[STRAT_Archer * 12 + 4] = 0
set strategy_race_aggression[STRAT_Archer * 12 + 5] = 0
set strategy_race_aggression[STRAT_Archer * 12 + 6] = 0
set strategy_race_aggression[STRAT_Archer * 12 + 7] = 0
set strategy_race_aggression[STRAT_Archer * 12 + 8] = 0
set strategy_race_aggression[STRAT_Archer * 12 + 9] = 0
set strategy_race_aggression[STRAT_Archer * 12 + 10] = 0
set strategy_race_aggression[STRAT_Archer * 12 + 11] = 0
set strategy_name[STRAT_DotC] = "DotC"
set strategy_default_name[STRAT_DotC] = "Bears"
set strategy_default_report[STRAT_DotC] = "I'm going mass DotC"
set key_building1[STRAT_DotC] = ANCIENT_LORE
set key_building2[STRAT_DotC] = ANCIENT_LORE
set key_upgrade1[STRAT_DotC] = UPG_DRUID_CLAW
set key_upgrade2[STRAT_DotC] = UPG_MARK_CLAW
set key_unit[STRAT_DotC] = DRUID_CLAW
set beginning_strat[STRAT_DotC] = true
set strat_minimum_time[STRAT_DotC] = 40
set strategy_type[STRAT_DotC] = STRATEGY_TYPE_MELEE
set strategy_tier[STRAT_DotC] = 3
set strategy_first_exp_time[STRAT_DotC] = 35
set strategy_second_exp_time[STRAT_DotC] = 135
set strategy_first_hero[STRAT_DotC] = 0
set strategy_first_hero_bonus[STRAT_DotC] = 0
set strategy_second_hero[STRAT_DotC] = 0
set strategy_second_hero_bonus[STRAT_DotC] = 0
set strategy_third_hero[STRAT_DotC] = 0
set strategy_third_hero_bonus[STRAT_DotC] = 0
set strategy_race_aggression[STRAT_DotC * 12 + 0] = 0
set strategy_race_aggression[STRAT_DotC * 12 + 1] = 0
set strategy_race_aggression[STRAT_DotC * 12 + 2] = 0
set strategy_race_aggression[STRAT_DotC * 12 + 3] = 0
set strategy_race_aggression[STRAT_DotC * 12 + 4] = 0
set strategy_race_aggression[STRAT_DotC * 12 + 5] = 0
set strategy_race_aggression[STRAT_DotC * 12 + 6] = 0
set strategy_race_aggression[STRAT_DotC * 12 + 7] = 0
set strategy_race_aggression[STRAT_DotC * 12 + 8] = 0
set strategy_race_aggression[STRAT_DotC * 12 + 9] = 0
set strategy_race_aggression[STRAT_DotC * 12 + 10] = 0
set strategy_race_aggression[STRAT_DotC * 12 + 11] = 0
set strategy_name[STRAT_MassHuntress] = "MassHuntress"
set strategy_default_name[STRAT_MassHuntress] = "Massive Hunts"
set strategy_default_report[STRAT_MassHuntress] = "I'm going massive huntress"
set key_building1[STRAT_MassHuntress] = ANCIENT_WAR
set key_building2[STRAT_MassHuntress] = ANCIENT_WAR
set key_upgrade1[STRAT_MassHuntress] = UPG_GLAIVE
set key_upgrade2[STRAT_MassHuntress] = UPG_STR_MOON
set key_unit[STRAT_MassHuntress] = HUNTRESS
set beginning_strat[STRAT_MassHuntress] = true
set strat_minimum_time[STRAT_MassHuntress] = 30
set strategy_type[STRAT_MassHuntress] = STRATEGY_TYPE_RANGED
set strategy_tier[STRAT_MassHuntress] = 1
set strategy_first_exp_time[STRAT_MassHuntress] = 40
set strategy_second_exp_time[STRAT_MassHuntress] = 140
set strategy_first_hero[STRAT_MassHuntress] = MOON_CHICK
set strategy_first_hero_bonus[STRAT_MassHuntress] = 30
set strategy_second_hero[STRAT_MassHuntress] = KEEPER
set strategy_second_hero_bonus[STRAT_MassHuntress] = 15
set strategy_third_hero[STRAT_MassHuntress] = 0
set strategy_third_hero_bonus[STRAT_MassHuntress] = 0
set strategy_race_aggression[STRAT_MassHuntress * 12 + 0] = 0
set strategy_race_aggression[STRAT_MassHuntress * 12 + 1] = 0
set strategy_race_aggression[STRAT_MassHuntress * 12 + 2] = 0
set strategy_race_aggression[STRAT_MassHuntress * 12 + 3] = 0
set strategy_race_aggression[STRAT_MassHuntress * 12 + 4] = 0
set strategy_race_aggression[STRAT_MassHuntress * 12 + 5] = 0
set strategy_race_aggression[STRAT_MassHuntress * 12 + 6] = 0
set strategy_race_aggression[STRAT_MassHuntress * 12 + 7] = 0
set strategy_race_aggression[STRAT_MassHuntress * 12 + 8] = 0
set strategy_race_aggression[STRAT_MassHuntress * 12 + 9] = 0
set strategy_race_aggression[STRAT_MassHuntress * 12 + 10] = 0
set strategy_race_aggression[STRAT_MassHuntress * 12 + 11] = 0
set strategy_name[STRAT_MGDryads] = "MGDryads"
set strategy_default_name[STRAT_MGDryads] = "Dryads and MGs"
set strategy_default_report[STRAT_MGDryads] = "I'm going dryads and mountain giants"
set key_building1[STRAT_MGDryads] = ANCIENT_LORE
set key_building2[STRAT_MGDryads] = ANCIENT_LORE
set key_upgrade1[STRAT_MGDryads] = UPG_ABOLISH
set key_upgrade2[STRAT_MGDryads] = UPG_HARD_SKIN
set key_unit[STRAT_MGDryads] = MOUNTAIN_GIANT
set beginning_strat[STRAT_MGDryads] = true
set strat_minimum_time[STRAT_MGDryads] = 45
set strategy_type[STRAT_MGDryads] = STRATEGY_TYPE_RANGED
set strategy_tier[STRAT_MGDryads] = 3
set strategy_first_exp_time[STRAT_MGDryads] = 45
set strategy_second_exp_time[STRAT_MGDryads] = 135
set strategy_first_hero[STRAT_MGDryads] = KEEPER
set strategy_first_hero_bonus[STRAT_MGDryads] = 15
set strategy_second_hero[STRAT_MGDryads] = 0
set strategy_second_hero_bonus[STRAT_MGDryads] = 0
set strategy_third_hero[STRAT_MGDryads] = 0
set strategy_third_hero_bonus[STRAT_MGDryads] = 0
set strategy_race_aggression[STRAT_MGDryads * 12 + 0] = -5
set strategy_race_aggression[STRAT_MGDryads * 12 + 1] = 2
set strategy_race_aggression[STRAT_MGDryads * 12 + 2] = 5
set strategy_race_aggression[STRAT_MGDryads * 12 + 3] = -5
set strategy_race_aggression[STRAT_MGDryads * 12 + 4] = 3
set strategy_race_aggression[STRAT_MGDryads * 12 + 5] = 7
set strategy_race_aggression[STRAT_MGDryads * 12 + 6] = -5
set strategy_race_aggression[STRAT_MGDryads * 12 + 7] = 3
set strategy_race_aggression[STRAT_MGDryads * 12 + 8] = 7
set strategy_race_aggression[STRAT_MGDryads * 12 + 9] = -5
set strategy_race_aggression[STRAT_MGDryads * 12 + 10] = 2
set strategy_race_aggression[STRAT_MGDryads * 12 + 11] = 5
set strategy_name[STRAT_AoWMix] = "AoWMix"
set strategy_default_name[STRAT_AoWMix] = "AoW Mix"
set strategy_default_report[STRAT_AoWMix] = "I'm mixing units from AoW"
set key_building1[STRAT_AoWMix] = ANCIENT_WAR
set key_building2[STRAT_AoWMix] = HUNTERS_HALL
set key_upgrade1[STRAT_AoWMix] = UPG_STR_MOON
set key_upgrade2[STRAT_AoWMix] = UPG_MOON_ARMOR
set key_unit[STRAT_AoWMix] = HUNTRESS
set beginning_strat[STRAT_AoWMix] = true
set strat_minimum_time[STRAT_AoWMix] = 45
set strategy_type[STRAT_AoWMix] = STRATEGY_TYPE_RANGED
set strategy_tier[STRAT_AoWMix] = 1
set strategy_first_exp_time[STRAT_AoWMix] = 30
set strategy_second_exp_time[STRAT_AoWMix] = 90
set strategy_first_hero[STRAT_AoWMix] = DEMON_HUNTER
set strategy_first_hero_bonus[STRAT_AoWMix] = 20
set strategy_second_hero[STRAT_AoWMix] = KEEPER
set strategy_second_hero_bonus[STRAT_AoWMix] = 15
set strategy_third_hero[STRAT_AoWMix] = 0
set strategy_third_hero_bonus[STRAT_AoWMix] = 0
set strategy_race_aggression[STRAT_AoWMix * 12 + 0] = 0
set strategy_race_aggression[STRAT_AoWMix * 12 + 1] = 0
set strategy_race_aggression[STRAT_AoWMix * 12 + 2] = 0
set strategy_race_aggression[STRAT_AoWMix * 12 + 3] = 0
set strategy_race_aggression[STRAT_AoWMix * 12 + 4] = 0
set strategy_race_aggression[STRAT_AoWMix * 12 + 5] = 0
set strategy_race_aggression[STRAT_AoWMix * 12 + 6] = 0
set strategy_race_aggression[STRAT_AoWMix * 12 + 7] = 0
set strategy_race_aggression[STRAT_AoWMix * 12 + 8] = 0
set strategy_race_aggression[STRAT_AoWMix * 12 + 9] = 0
set strategy_race_aggression[STRAT_AoWMix * 12 + 10] = 0
set strategy_race_aggression[STRAT_AoWMix * 12 + 11] = 0
set strategy_name[STRAT_AoLMix] = "AoLMix"
set strategy_default_name[STRAT_AoLMix] = "AoL Mix"
set strategy_default_report[STRAT_AoLMix] = "I'm mixing units from Ancient of Lore"
set key_building1[STRAT_AoLMix] = ANCIENT_LORE
set key_building2[STRAT_AoLMix] = CHIMAERA_ROOST
set key_upgrade1[STRAT_AoLMix] = UPG_STR_WILD
set key_upgrade2[STRAT_AoLMix] = UPG_HIDES
set key_unit[STRAT_AoLMix] = DRYAD
set beginning_strat[STRAT_AoLMix] = true
set strat_minimum_time[STRAT_AoLMix] = 70
set strategy_type[STRAT_AoLMix] = STRATEGY_TYPE_MELEE
set strategy_tier[STRAT_AoLMix] = 3
set strategy_first_exp_time[STRAT_AoLMix] = 25
set strategy_second_exp_time[STRAT_AoLMix] = 90
set strategy_first_hero[STRAT_AoLMix] = KEEPER
set strategy_first_hero_bonus[STRAT_AoLMix] = 20
set strategy_second_hero[STRAT_AoLMix] = 0
set strategy_second_hero_bonus[STRAT_AoLMix] = 0
set strategy_third_hero[STRAT_AoLMix] = 0
set strategy_third_hero_bonus[STRAT_AoLMix] = 0
set strategy_race_aggression[STRAT_AoLMix * 12 + 0] = 0
set strategy_race_aggression[STRAT_AoLMix * 12 + 1] = 0
set strategy_race_aggression[STRAT_AoLMix * 12 + 2] = 0
set strategy_race_aggression[STRAT_AoLMix * 12 + 3] = 0
set strategy_race_aggression[STRAT_AoLMix * 12 + 4] = 0
set strategy_race_aggression[STRAT_AoLMix * 12 + 5] = 0
set strategy_race_aggression[STRAT_AoLMix * 12 + 6] = 0
set strategy_race_aggression[STRAT_AoLMix * 12 + 7] = 0
set strategy_race_aggression[STRAT_AoLMix * 12 + 8] = 0
set strategy_race_aggression[STRAT_AoLMix * 12 + 9] = 0
set strategy_race_aggression[STRAT_AoLMix * 12 + 10] = 0
set strategy_race_aggression[STRAT_AoLMix * 12 + 11] = 0
set strategy_name[STRAT_NEAntiTower] = "NEAntiTower"
set strategy_default_name[STRAT_NEAntiTower] = "Anti Tower"
set strategy_default_report[STRAT_NEAntiTower] = "I'm massing seige equipment"
set key_building1[STRAT_NEAntiTower] = ANCIENT_WAR
set key_building2[STRAT_NEAntiTower] = HUNTERS_HALL
set key_upgrade1[STRAT_NEAntiTower] = 0
set key_upgrade2[STRAT_NEAntiTower] = 0
set key_unit[STRAT_NEAntiTower] = BALLISTA
set beginning_strat[STRAT_NEAntiTower] = false
set strat_minimum_time[STRAT_NEAntiTower] = 20
set strategy_type[STRAT_NEAntiTower] = STRATEGY_TYPE_RANGED
set strategy_tier[STRAT_NEAntiTower] = 2
set strategy_first_exp_time[STRAT_NEAntiTower] = 60
set strategy_second_exp_time[STRAT_NEAntiTower] = 180
set strategy_first_hero[STRAT_NEAntiTower] = 0
set strategy_first_hero_bonus[STRAT_NEAntiTower] = 0
set strategy_second_hero[STRAT_NEAntiTower] = 0
set strategy_second_hero_bonus[STRAT_NEAntiTower] = 0
set strategy_third_hero[STRAT_NEAntiTower] = 0
set strategy_third_hero_bonus[STRAT_NEAntiTower] = 0
set strategy_race_aggression[STRAT_NEAntiTower * 12 + 0] = 0
set strategy_race_aggression[STRAT_NEAntiTower * 12 + 1] = 0
set strategy_race_aggression[STRAT_NEAntiTower * 12 + 2] = 0
set strategy_race_aggression[STRAT_NEAntiTower * 12 + 3] = 0
set strategy_race_aggression[STRAT_NEAntiTower * 12 + 4] = 0
set strategy_race_aggression[STRAT_NEAntiTower * 12 + 5] = 0
set strategy_race_aggression[STRAT_NEAntiTower * 12 + 6] = 0
set strategy_race_aggression[STRAT_NEAntiTower * 12 + 7] = 0
set strategy_race_aggression[STRAT_NEAntiTower * 12 + 8] = 0
set strategy_race_aggression[STRAT_NEAntiTower * 12 + 9] = 0
set strategy_race_aggression[STRAT_NEAntiTower * 12 + 10] = 0
set strategy_race_aggression[STRAT_NEAntiTower * 12 + 11] = 0
set rp_strat_length = 15
endfunction

function InitStrats takes nothing returns nothing
  call InitStratData()
  call CommonStratsDefault()
endfunction

function InitAllSkills takes nothing returns nothing
  set allskills[721] = EVASION
  set allskills[722] = MANA_BURN
  set allskills[723] = MANA_BURN
  set allskills[724] = EVASION
  set allskills[725] = MANA_BURN
  set allskills[726] = METAMORPHOSIS
  set allskills[727] = EVASION
  set allskills[728] = IMMOLATION
  set allskills[729] = IMMOLATION
  set allskills[730] = IMMOLATION

  set allskills[731] = EVASION
  set allskills[732] = MANA_BURN
  set allskills[733] = EVASION
  set allskills[734] = MANA_BURN
  set allskills[735] = EVASION
  set allskills[736] = METAMORPHOSIS
  set allskills[737] = MANA_BURN
  set allskills[738] = IMMOLATION
  set allskills[739] = IMMOLATION
  set allskills[740] = IMMOLATION

  set allskills[741] = MANA_BURN
  set allskills[742] = EVASION
  set allskills[743] = MANA_BURN
  set allskills[744] = EVASION
  set allskills[745] = MANA_BURN
  set allskills[746] = METAMORPHOSIS
  set allskills[747] = EVASION
  set allskills[748] = IMMOLATION
  set allskills[749] = IMMOLATION
  set allskills[750] = IMMOLATION

  set allskills[751] = EVASION
  set allskills[752] = MANA_BURN
  set allskills[753] = MANA_BURN
  set allskills[754] = EVASION
  set allskills[755] = MANA_BURN
  set allskills[756] = METAMORPHOSIS
  set allskills[757] = EVASION
  set allskills[758] = IMMOLATION
  set allskills[759] = IMMOLATION
  set allskills[760] = IMMOLATION

  set allskills[761] = EVASION
  set allskills[762] = MANA_BURN
  set allskills[763] = EVASION
  set allskills[764] = MANA_BURN
  set allskills[765] = EVASION
  set allskills[766] = METAMORPHOSIS
  set allskills[767] = MANA_BURN
  set allskills[768] = IMMOLATION
  set allskills[769] = IMMOLATION
  set allskills[770] = IMMOLATION

  set allskills[771] = MANA_BURN
  set allskills[772] = EVASION
  set allskills[773] = MANA_BURN
  set allskills[774] = EVASION
  set allskills[775] = MANA_BURN
  set allskills[776] = METAMORPHOSIS
  set allskills[777] = EVASION
  set allskills[778] = IMMOLATION
  set allskills[779] = IMMOLATION
  set allskills[780] = IMMOLATION

  set allskills[781] = EVASION
  set allskills[782] = MANA_BURN
  set allskills[783] = MANA_BURN
  set allskills[784] = EVASION
  set allskills[785] = MANA_BURN
  set allskills[786] = METAMORPHOSIS
  set allskills[787] = EVASION
  set allskills[788] = IMMOLATION
  set allskills[789] = IMMOLATION
  set allskills[790] = IMMOLATION

  set allskills[791] = EVASION
  set allskills[792] = MANA_BURN
  set allskills[793] = EVASION
  set allskills[794] = MANA_BURN
  set allskills[795] = EVASION
  set allskills[796] = METAMORPHOSIS
  set allskills[797] = MANA_BURN
  set allskills[798] = IMMOLATION
  set allskills[799] = IMMOLATION
  set allskills[800] = IMMOLATION

  set allskills[801] = MANA_BURN
  set allskills[802] = EVASION
  set allskills[803] = MANA_BURN
  set allskills[804] = EVASION
  set allskills[805] = MANA_BURN
  set allskills[806] = METAMORPHOSIS
  set allskills[807] = EVASION
  set allskills[808] = IMMOLATION
  set allskills[809] = IMMOLATION
  set allskills[810] = IMMOLATION

  set allskills[811] = FORCE_NATURE
  set allskills[812] = ENT_ROOTS
  set allskills[813] = ENT_ROOTS
  set allskills[814] = FORCE_NATURE
  set allskills[815] = ENT_ROOTS
  set allskills[816] = TRANQUILITY
  set allskills[817] = FORCE_NATURE
  set allskills[818] = THORNS_AURA
  set allskills[819] = THORNS_AURA
  set allskills[820] = THORNS_AURA

  set allskills[821] = FORCE_NATURE
  set allskills[822] = ENT_ROOTS
  set allskills[823] = FORCE_NATURE
  set allskills[824] = ENT_ROOTS
  set allskills[825] = FORCE_NATURE
  set allskills[826] = TRANQUILITY
  set allskills[827] = ENT_ROOTS
  set allskills[828] = THORNS_AURA
  set allskills[829] = THORNS_AURA
  set allskills[830] = THORNS_AURA

  set allskills[831] = FORCE_NATURE
  set allskills[832] = ENT_ROOTS
  set allskills[833] = ENT_ROOTS
  set allskills[834] = THORNS_AURA
  set allskills[835] = ENT_ROOTS
  set allskills[836] = TRANQUILITY
  set allskills[837] = THORNS_AURA
  set allskills[838] = THORNS_AURA
  set allskills[839] = FORCE_NATURE
  set allskills[840] = FORCE_NATURE

  set allskills[841] = ENT_ROOTS
  set allskills[842] = FORCE_NATURE
  set allskills[843] = ENT_ROOTS
  set allskills[844] = FORCE_NATURE
  set allskills[845] = ENT_ROOTS
  set allskills[846] = TRANQUILITY
  set allskills[847] = FORCE_NATURE
  set allskills[848] = THORNS_AURA
  set allskills[849] = THORNS_AURA
  set allskills[850] = THORNS_AURA

  set allskills[851] = ENT_ROOTS
  set allskills[852] = THORNS_AURA
  set allskills[853] = ENT_ROOTS
  set allskills[854] = THORNS_AURA
  set allskills[855] = ENT_ROOTS
  set allskills[856] = TRANQUILITY
  set allskills[857] = THORNS_AURA
  set allskills[858] = FORCE_NATURE
  set allskills[859] = FORCE_NATURE
  set allskills[860] = FORCE_NATURE

  set allskills[861] = ENT_ROOTS
  set allskills[862] = FORCE_NATURE
  set allskills[863] = ENT_ROOTS
  set allskills[864] = THORNS_AURA
  set allskills[865] = ENT_ROOTS
  set allskills[866] = TRANQUILITY
  set allskills[867] = THORNS_AURA
  set allskills[868] = THORNS_AURA
  set allskills[869] = FORCE_NATURE
  set allskills[870] = FORCE_NATURE

  set allskills[871] = ENT_ROOTS
  set allskills[872] = THORNS_AURA
  set allskills[873] = ENT_ROOTS
  set allskills[874] = THORNS_AURA
  set allskills[875] = ENT_ROOTS
  set allskills[876] = TRANQUILITY
  set allskills[877] = THORNS_AURA
  set allskills[878] = FORCE_NATURE
  set allskills[879] = FORCE_NATURE
  set allskills[880] = FORCE_NATURE

  set allskills[881] = THORNS_AURA
  set allskills[882] = ENT_ROOTS
  set allskills[883] = THORNS_AURA
  set allskills[884] = ENT_ROOTS
  set allskills[885] = THORNS_AURA
  set allskills[886] = TRANQUILITY
  set allskills[887] = ENT_ROOTS
  set allskills[888] = FORCE_NATURE
  set allskills[889] = FORCE_NATURE
  set allskills[890] = FORCE_NATURE

  set allskills[891] = ENT_ROOTS
  set allskills[892] = THORNS_AURA
  set allskills[893] = THORNS_AURA
  set allskills[894] = ENT_ROOTS
  set allskills[895] = THORNS_AURA
  set allskills[896] = TRANQUILITY
  set allskills[897] = ENT_ROOTS
  set allskills[898] = FORCE_NATURE
  set allskills[899] = FORCE_NATURE
  set allskills[900] = FORCE_NATURE

  set allskills[901] = SEARING_ARROWS
  set allskills[902] = TRUESHOT
  set allskills[903] = TRUESHOT
  set allskills[904] = SEARING_ARROWS
  set allskills[905] = TRUESHOT
  set allskills[906] = STARFALL
  set allskills[907] = SEARING_ARROWS
  set allskills[908] = SCOUT
  set allskills[909] = SCOUT
  set allskills[910] = SCOUT

  set allskills[911] = SEARING_ARROWS
  set allskills[912] = TRUESHOT
  set allskills[913] = SEARING_ARROWS
  set allskills[914] = TRUESHOT
  set allskills[915] = SEARING_ARROWS
  set allskills[916] = STARFALL
  set allskills[917] = TRUESHOT
  set allskills[918] = SCOUT
  set allskills[919] = SCOUT
  set allskills[920] = SCOUT

  set allskills[921] = TRUESHOT
  set allskills[922] = SEARING_ARROWS
  set allskills[923] = TRUESHOT
  set allskills[924] = SEARING_ARROWS
  set allskills[925] = TRUESHOT
  set allskills[926] = STARFALL
  set allskills[927] = SEARING_ARROWS
  set allskills[928] = SCOUT
  set allskills[929] = SCOUT
  set allskills[930] = SCOUT

  set allskills[931] = SEARING_ARROWS
  set allskills[932] = TRUESHOT
  set allskills[933] = SEARING_ARROWS
  set allskills[934] = TRUESHOT
  set allskills[935] = SEARING_ARROWS
  set allskills[936] = STARFALL
  set allskills[937] = TRUESHOT
  set allskills[938] = SCOUT
  set allskills[939] = SCOUT
  set allskills[940] = SCOUT

  set allskills[941] = TRUESHOT
  set allskills[942] = SEARING_ARROWS
  set allskills[943] = TRUESHOT
  set allskills[944] = SEARING_ARROWS
  set allskills[945] = TRUESHOT
  set allskills[946] = STARFALL
  set allskills[947] = SEARING_ARROWS
  set allskills[948] = SCOUT
  set allskills[949] = SCOUT
  set allskills[950] = SCOUT

  set allskills[951] = SEARING_ARROWS
  set allskills[952] = TRUESHOT
  set allskills[953] = TRUESHOT
  set allskills[954] = SEARING_ARROWS
  set allskills[955] = TRUESHOT
  set allskills[956] = STARFALL
  set allskills[957] = SEARING_ARROWS
  set allskills[958] = SCOUT
  set allskills[959] = SCOUT
  set allskills[960] = SCOUT

  set allskills[961] = TRUESHOT
  set allskills[962] = SEARING_ARROWS
  set allskills[963] = TRUESHOT
  set allskills[964] = SEARING_ARROWS
  set allskills[965] = TRUESHOT
  set allskills[966] = STARFALL
  set allskills[967] = SEARING_ARROWS
  set allskills[968] = SCOUT
  set allskills[969] = SCOUT
  set allskills[970] = SCOUT

  set allskills[971] = SEARING_ARROWS
  set allskills[972] = TRUESHOT
  set allskills[973] = TRUESHOT
  set allskills[974] = SEARING_ARROWS
  set allskills[975] = TRUESHOT
  set allskills[976] = STARFALL
  set allskills[977] = SEARING_ARROWS
  set allskills[978] = SCOUT
  set allskills[979] = SCOUT
  set allskills[980] = SCOUT

  set allskills[981] = SEARING_ARROWS
  set allskills[982] = TRUESHOT
  set allskills[983] = SEARING_ARROWS
  set allskills[984] = TRUESHOT
  set allskills[985] = SEARING_ARROWS
  set allskills[986] = STARFALL
  set allskills[987] = TRUESHOT
  set allskills[988] = SCOUT
  set allskills[989] = SCOUT
  set allskills[990] = SCOUT

  set allskills[991] = SHADOW_TOUCH
  set allskills[992] = BLINK
  set allskills[993] = SHADOW_TOUCH
  set allskills[994] = BLINK
  set allskills[995] = SHADOW_TOUCH
  set allskills[996] = VENGEANCE
  set allskills[997] = BLINK
  set allskills[998] = FAN_KNIVES
  set allskills[999] = FAN_KNIVES
  set allskills[1000] = FAN_KNIVES

  set allskills[1001] = FAN_KNIVES
  set allskills[1002] = BLINK
  set allskills[1003] = FAN_KNIVES
  set allskills[1004] = BLINK
  set allskills[1005] = FAN_KNIVES
  set allskills[1006] = VENGEANCE
  set allskills[1007] = BLINK
  set allskills[1008] = SHADOW_TOUCH
  set allskills[1009] = SHADOW_TOUCH
  set allskills[1010] = SHADOW_TOUCH

  set allskills[1011] = SHADOW_TOUCH
  set allskills[1012] = FAN_KNIVES
  set allskills[1013] = FAN_KNIVES
  set allskills[1014] = BLINK
  set allskills[1015] = FAN_KNIVES
  set allskills[1016] = VENGEANCE
  set allskills[1017] = BLINK
  set allskills[1018] = BLINK
  set allskills[1019] = SHADOW_TOUCH
  set allskills[1020] = SHADOW_TOUCH

  set allskills[1021] = SHADOW_TOUCH
  set allskills[1022] = BLINK
  set allskills[1023] = SHADOW_TOUCH
  set allskills[1024] = BLINK
  set allskills[1025] = SHADOW_TOUCH
  set allskills[1026] = VENGEANCE
  set allskills[1027] = BLINK
  set allskills[1028] = FAN_KNIVES
  set allskills[1029] = FAN_KNIVES
  set allskills[1030] = FAN_KNIVES

  set allskills[1031] = FAN_KNIVES
  set allskills[1032] = BLINK
  set allskills[1033] = FAN_KNIVES
  set allskills[1034] = BLINK
  set allskills[1035] = FAN_KNIVES
  set allskills[1036] = VENGEANCE
  set allskills[1037] = BLINK
  set allskills[1038] = SHADOW_TOUCH
  set allskills[1039] = SHADOW_TOUCH
  set allskills[1040] = SHADOW_TOUCH

  set allskills[1041] = SHADOW_TOUCH
  set allskills[1042] = FAN_KNIVES
  set allskills[1043] = FAN_KNIVES
  set allskills[1044] = BLINK
  set allskills[1045] = FAN_KNIVES
  set allskills[1046] = VENGEANCE
  set allskills[1047] = BLINK
  set allskills[1048] = BLINK
  set allskills[1049] = SHADOW_TOUCH
  set allskills[1050] = SHADOW_TOUCH

  set allskills[1051] = SHADOW_TOUCH
  set allskills[1052] = BLINK
  set allskills[1053] = SHADOW_TOUCH
  set allskills[1054] = BLINK
  set allskills[1055] = SHADOW_TOUCH
  set allskills[1056] = VENGEANCE
  set allskills[1057] = BLINK
  set allskills[1058] = FAN_KNIVES
  set allskills[1059] = FAN_KNIVES
  set allskills[1060] = FAN_KNIVES

  set allskills[1061] = FAN_KNIVES
  set allskills[1062] = BLINK
  set allskills[1063] = FAN_KNIVES
  set allskills[1064] = BLINK
  set allskills[1065] = FAN_KNIVES
  set allskills[1066] = VENGEANCE
  set allskills[1067] = BLINK
  set allskills[1068] = SHADOW_TOUCH
  set allskills[1069] = SHADOW_TOUCH
  set allskills[1070] = SHADOW_TOUCH

  set allskills[1071] = SHADOW_TOUCH
  set allskills[1072] = FAN_KNIVES
  set allskills[1073] = FAN_KNIVES
  set allskills[1074] = BLINK
  set allskills[1075] = FAN_KNIVES
  set allskills[1076] = VENGEANCE
  set allskills[1077] = BLINK
  set allskills[1078] = BLINK
  set allskills[1079] = SHADOW_TOUCH
  set allskills[1080] = SHADOW_TOUCH

endfunction

function InitBuildings takes nothing returns nothing
  set building[0] = ANCIENT_LORE
  set building[1] = ANCIENT_WAR
  set building[2] = ANCIENT_WIND
  set building[3] = TREE_AGES
  set building[4] = TREE_ETERNITY
  set building[5] = TREE_LIFE
  set building[6] = ANCIENT_PROTECT
  set building[7] = ELF_ALTAR
  set building[8] = CHIMAERA_ROOST
  set building[9] = HUNTERS_HALL
  set building[10] = MOON_WELL
  set building[11] = ELF_MINE
  set building[12] = DEN_OF_WONDERS
  set building_length = 13
endfunction

function initRacialUnits takes nothing returns nothing

    set racial_peon = WISP
    set racial_altar = ELF_ALTAR

    set racial_hall[1] = TREE_LIFE
    set racial_hall[2] = TREE_AGES
    set racial_hall[3] = TREE_ETERNITY
	// Basically if its not a undead type expansion method just make variable the first hall
	if racial_expansion == 0	then
		set racial_expansion = racial_hall[1]
	endif

    set racial_goldmine[minearray] = 'egol'
	set minearray = minearray + 1
    set racial_goldmine[minearray] = 'ngol'
	set minearray = minearray + 1

    set racial_farm = MOON_WELL
	if race_sell_ziggurats then
		set racial_zigg[ziggarray] = old_id[racial_farm]
		set ziggarray = ziggarray + 1
	endif

    set racial_shop = DEN_OF_WONDERS

endfunction

function initRacialTraits takes nothing returns nothing
   local integer i = 0

   set i = GetRandomInt(1,100)
   set militia = race_militia_expansion_available and i <= 60
   if militia then
	call Trace("Militia expansion is true")
   endif
   set i = GetRandomInt(1, 100)
   set race_ancient_expansion_available = (race_ancient_expansion_available and i <= race_ancient_expansion_probability)
   set i = GetRandomInt(1, 100)
   if race_ancient_expansion_available then
	call Trace("Ancient Expansion is true")
   endif
   set race_towerrush_available = (race_towerrush_available and i <= race_towerrush_probability)
   if race_towerrush_available then
	call Trace("Towerrush variable is true")
   endif   

endfunction

function CanTowerRush takes nothing returns nothing
	local real distance = GetNearestEnemyDistance()
	local integer i = GetRandomInt(1,100)
	
	if game_is_ffa then
		set i = i + 40       // in ffa reduce likly hood of tower rush extremly
	endif
	
	 if hero_rush_bonus[hero[1]] >= race_towerrush_hero_rush_level then
		if distance < 8000 then   // Total percentage to be choosen is 33%
			call StartTowerRush(180)
		elseif i <= 75 and distance < 11000 then // Total percentage to be choosen is 25%
			call StartTowerRush(160)
		elseif i <= 50 and distance < 14000 then // Total percentage to be choosen is 16%
			call StartTowerRush(140)
		elseif i <= 20 and distance < 16000 then // Total percentage to be choosen is 7%
		endif
	  endif
endfunction

function chooseStrategyRP takes nothing returns nothing
  set rp_strat[0] = 20
  set rp_strat[1] = 27
  set rp_strat[2] = 25
  set rp_strat[3] = 25
  set rp_strat[4] = 26
  set rp_strat[5] = 20
  set rp_strat[6] = 22
  set rp_strat[7] = 22
  set rp_strat[8] = 26
  set rp_strat[9] = 23
  set rp_strat[10] = 26
  set rp_strat[11] = 25
  set rp_strat[12] = 40
  set rp_strat[13] = 35
  set rp_strat[14] = 8

  call AddFavoriteUnitRP()
  if ai_time > 2 then
    call mult_rp_strat(3)
  endif

  if c_ally_total > 0 then
      set rp_strat[STRAT_NormalElf] = rp_strat[STRAT_NormalElf] + 0
      set rp_strat[STRAT_MassHD] = rp_strat[STRAT_MassHD] + 0
      set rp_strat[STRAT_Druids] = rp_strat[STRAT_Druids] + 9
      set rp_strat[STRAT_Hippo] = rp_strat[STRAT_Hippo] + 0
      set rp_strat[STRAT_Ballista] = rp_strat[STRAT_Ballista] + 18
      set rp_strat[STRAT_Talon] = rp_strat[STRAT_Talon] + 0
      set rp_strat[STRAT_HippoChim] = rp_strat[STRAT_HippoChim] + 18
      set rp_strat[STRAT_DryadChim] = rp_strat[STRAT_DryadChim] + 18
      set rp_strat[STRAT_Archer] = rp_strat[STRAT_Archer] + 9
      set rp_strat[STRAT_DotC] = rp_strat[STRAT_DotC] + 18
      set rp_strat[STRAT_MassHuntress] = rp_strat[STRAT_MassHuntress] + 0
      set rp_strat[STRAT_MGDryads] = rp_strat[STRAT_MGDryads] + 9
      set rp_strat[STRAT_AoWMix] = rp_strat[STRAT_AoWMix] + 0
      set rp_strat[STRAT_AoLMix] = rp_strat[STRAT_AoLMix] + 0
      set rp_strat[STRAT_NEAntiTower] = rp_strat[STRAT_NEAntiTower] + 0
  endif
  
  if game_is_1on1 then
      set rp_strat[STRAT_NormalElf] = rp_strat[STRAT_NormalElf] + 0
      set rp_strat[STRAT_MassHD] = rp_strat[STRAT_MassHD] + 0
      set rp_strat[STRAT_Druids] = rp_strat[STRAT_Druids] + 0
      set rp_strat[STRAT_Hippo] = rp_strat[STRAT_Hippo] + 0
      set rp_strat[STRAT_Ballista] = rp_strat[STRAT_Ballista] + 0
      set rp_strat[STRAT_Talon] = rp_strat[STRAT_Talon] + 0
      set rp_strat[STRAT_HippoChim] = rp_strat[STRAT_HippoChim] + 0
      set rp_strat[STRAT_DryadChim] = rp_strat[STRAT_DryadChim] + 0
      set rp_strat[STRAT_Archer] = rp_strat[STRAT_Archer] + 0
      set rp_strat[STRAT_DotC] = rp_strat[STRAT_DotC] + 0
      set rp_strat[STRAT_MassHuntress] = rp_strat[STRAT_MassHuntress] + 0
      set rp_strat[STRAT_MGDryads] = rp_strat[STRAT_MGDryads] + 0
      set rp_strat[STRAT_AoWMix] = rp_strat[STRAT_AoWMix] + 10
      set rp_strat[STRAT_AoLMix] = rp_strat[STRAT_AoLMix] + 10
      set rp_strat[STRAT_NEAntiTower] = rp_strat[STRAT_NEAntiTower] + 0
  endif
  
  if game_is_ffa then
      set rp_strat[STRAT_NormalElf] = rp_strat[STRAT_NormalElf] + 0
      set rp_strat[STRAT_MassHD] = rp_strat[STRAT_MassHD] + 0
      set rp_strat[STRAT_Druids] = rp_strat[STRAT_Druids] + 0
      set rp_strat[STRAT_Hippo] = rp_strat[STRAT_Hippo] + 0
      set rp_strat[STRAT_Ballista] = rp_strat[STRAT_Ballista] + 0
      set rp_strat[STRAT_Talon] = rp_strat[STRAT_Talon] + 0
      set rp_strat[STRAT_HippoChim] = rp_strat[STRAT_HippoChim] + 0
      set rp_strat[STRAT_DryadChim] = rp_strat[STRAT_DryadChim] + 0
      set rp_strat[STRAT_Archer] = rp_strat[STRAT_Archer] + 0
      set rp_strat[STRAT_DotC] = rp_strat[STRAT_DotC] + 0
      set rp_strat[STRAT_MassHuntress] = rp_strat[STRAT_MassHuntress] + 0
      set rp_strat[STRAT_MGDryads] = rp_strat[STRAT_MGDryads] + 0
      set rp_strat[STRAT_AoWMix] = rp_strat[STRAT_AoWMix] + 15
      set rp_strat[STRAT_AoLMix] = rp_strat[STRAT_AoLMix] + 15
      set rp_strat[STRAT_NEAntiTower] = rp_strat[STRAT_NEAntiTower] + 0
  endif

  if c_enemy[R_RANDOM] > 0 then
      set rp_strat[STRAT_NormalElf] = rp_strat[STRAT_NormalElf] + 10
      set rp_strat[STRAT_MassHD] = rp_strat[STRAT_MassHD] + 5
      set rp_strat[STRAT_Druids] = rp_strat[STRAT_Druids] + 0
      set rp_strat[STRAT_Hippo] = rp_strat[STRAT_Hippo] + 5
      set rp_strat[STRAT_Ballista] = rp_strat[STRAT_Ballista] + 5
      set rp_strat[STRAT_Talon] = rp_strat[STRAT_Talon] + 0
      set rp_strat[STRAT_HippoChim] = rp_strat[STRAT_HippoChim] + 0
      set rp_strat[STRAT_DryadChim] = rp_strat[STRAT_DryadChim] + 0
      set rp_strat[STRAT_Archer] = rp_strat[STRAT_Archer] + 0
      set rp_strat[STRAT_DotC] = rp_strat[STRAT_DotC] + 0
      set rp_strat[STRAT_MassHuntress] = rp_strat[STRAT_MassHuntress] + 0
      set rp_strat[STRAT_MGDryads] = rp_strat[STRAT_MGDryads] + 5
      set rp_strat[STRAT_AoWMix] = rp_strat[STRAT_AoWMix] + 10
      set rp_strat[STRAT_AoLMix] = rp_strat[STRAT_AoLMix] + 5
      set rp_strat[STRAT_NEAntiTower] = rp_strat[STRAT_NEAntiTower] + 0
  endif

  if c_enemy[R_ELF] > 0 then
      set rp_strat[STRAT_NormalElf] = rp_strat[STRAT_NormalElf] + 0
      set rp_strat[STRAT_MassHD] = rp_strat[STRAT_MassHD] + 5
      set rp_strat[STRAT_Druids] = rp_strat[STRAT_Druids] + 5
      set rp_strat[STRAT_Hippo] = rp_strat[STRAT_Hippo] + 10
      set rp_strat[STRAT_Ballista] = rp_strat[STRAT_Ballista] + -5
      set rp_strat[STRAT_Talon] = rp_strat[STRAT_Talon] + 0
      set rp_strat[STRAT_HippoChim] = rp_strat[STRAT_HippoChim] + 0
      set rp_strat[STRAT_DryadChim] = rp_strat[STRAT_DryadChim] + 5
      set rp_strat[STRAT_Archer] = rp_strat[STRAT_Archer] + 5
      set rp_strat[STRAT_DotC] = rp_strat[STRAT_DotC] + -5
      set rp_strat[STRAT_MassHuntress] = rp_strat[STRAT_MassHuntress] + 10
      set rp_strat[STRAT_MGDryads] = rp_strat[STRAT_MGDryads] + 0
      set rp_strat[STRAT_AoWMix] = rp_strat[STRAT_AoWMix] + 0
      set rp_strat[STRAT_AoLMix] = rp_strat[STRAT_AoLMix] + 0
      set rp_strat[STRAT_NEAntiTower] = rp_strat[STRAT_NEAntiTower] + 0
  endif

  if c_enemy[R_HUMAN] > 0 then
      set rp_strat[STRAT_NormalElf] = rp_strat[STRAT_NormalElf] + 0
      set rp_strat[STRAT_MassHD] = rp_strat[STRAT_MassHD] + 5
      set rp_strat[STRAT_Druids] = rp_strat[STRAT_Druids] + 10
      set rp_strat[STRAT_Hippo] = rp_strat[STRAT_Hippo] + 10
      set rp_strat[STRAT_Ballista] = rp_strat[STRAT_Ballista] + 5
      set rp_strat[STRAT_Talon] = rp_strat[STRAT_Talon] + 5
      set rp_strat[STRAT_HippoChim] = rp_strat[STRAT_HippoChim] + -5
      set rp_strat[STRAT_DryadChim] = rp_strat[STRAT_DryadChim] + -5
      set rp_strat[STRAT_Archer] = rp_strat[STRAT_Archer] + 0
      set rp_strat[STRAT_DotC] = rp_strat[STRAT_DotC] + 0
      set rp_strat[STRAT_MassHuntress] = rp_strat[STRAT_MassHuntress] + 0
      set rp_strat[STRAT_MGDryads] = rp_strat[STRAT_MGDryads] + 0
      set rp_strat[STRAT_AoWMix] = rp_strat[STRAT_AoWMix] + 0
      set rp_strat[STRAT_AoLMix] = rp_strat[STRAT_AoLMix] + 0
      set rp_strat[STRAT_NEAntiTower] = rp_strat[STRAT_NEAntiTower] + 0
  endif

  if c_enemy[R_ORC] > 0 then
      set rp_strat[STRAT_NormalElf] = rp_strat[STRAT_NormalElf] + 0
      set rp_strat[STRAT_MassHD] = rp_strat[STRAT_MassHD] + 5
      set rp_strat[STRAT_Druids] = rp_strat[STRAT_Druids] + 0
      set rp_strat[STRAT_Hippo] = rp_strat[STRAT_Hippo] + 5
      set rp_strat[STRAT_Ballista] = rp_strat[STRAT_Ballista] + 5
      set rp_strat[STRAT_Talon] = rp_strat[STRAT_Talon] + 10
      set rp_strat[STRAT_HippoChim] = rp_strat[STRAT_HippoChim] + 0
      set rp_strat[STRAT_DryadChim] = rp_strat[STRAT_DryadChim] + 5
      set rp_strat[STRAT_Archer] = rp_strat[STRAT_Archer] + -5
      set rp_strat[STRAT_DotC] = rp_strat[STRAT_DotC] + -10
      set rp_strat[STRAT_MassHuntress] = rp_strat[STRAT_MassHuntress] + 0
      set rp_strat[STRAT_MGDryads] = rp_strat[STRAT_MGDryads] + 0
      set rp_strat[STRAT_AoWMix] = rp_strat[STRAT_AoWMix] + 0
      set rp_strat[STRAT_AoLMix] = rp_strat[STRAT_AoLMix] + 0
      set rp_strat[STRAT_NEAntiTower] = rp_strat[STRAT_NEAntiTower] + 0
  endif

  if c_enemy[R_UNDEAD] > 0 then
      set rp_strat[STRAT_NormalElf] = rp_strat[STRAT_NormalElf] + 0
      set rp_strat[STRAT_MassHD] = rp_strat[STRAT_MassHD] + 5
      set rp_strat[STRAT_Druids] = rp_strat[STRAT_Druids] + 0
      set rp_strat[STRAT_Hippo] = rp_strat[STRAT_Hippo] + -5
      set rp_strat[STRAT_Ballista] = rp_strat[STRAT_Ballista] + 10
      set rp_strat[STRAT_Talon] = rp_strat[STRAT_Talon] + -5
      set rp_strat[STRAT_HippoChim] = rp_strat[STRAT_HippoChim] + 5
      set rp_strat[STRAT_DryadChim] = rp_strat[STRAT_DryadChim] + 10
      set rp_strat[STRAT_Archer] = rp_strat[STRAT_Archer] + -10
      set rp_strat[STRAT_DotC] = rp_strat[STRAT_DotC] + 0
      set rp_strat[STRAT_MassHuntress] = rp_strat[STRAT_MassHuntress] + 0
      set rp_strat[STRAT_MGDryads] = rp_strat[STRAT_MGDryads] + 0
      set rp_strat[STRAT_AoWMix] = rp_strat[STRAT_AoWMix] + 0
      set rp_strat[STRAT_AoLMix] = rp_strat[STRAT_AoLMix] + 0
      set rp_strat[STRAT_NEAntiTower] = rp_strat[STRAT_NEAntiTower] + 0
  endif


  if c_ally[R_ELF] > 0 then
      set rp_strat[STRAT_NormalElf] = rp_strat[STRAT_NormalElf] + 0
      set rp_strat[STRAT_MassHD] = rp_strat[STRAT_MassHD] + 0
      set rp_strat[STRAT_Druids] = rp_strat[STRAT_Druids] + 0
      set rp_strat[STRAT_Hippo] = rp_strat[STRAT_Hippo] + 0
      set rp_strat[STRAT_Ballista] = rp_strat[STRAT_Ballista] + 0
      set rp_strat[STRAT_Talon] = rp_strat[STRAT_Talon] + 0
      set rp_strat[STRAT_HippoChim] = rp_strat[STRAT_HippoChim] + 0
      set rp_strat[STRAT_DryadChim] = rp_strat[STRAT_DryadChim] + 0
      set rp_strat[STRAT_Archer] = rp_strat[STRAT_Archer] + 0
      set rp_strat[STRAT_DotC] = rp_strat[STRAT_DotC] + 0
      set rp_strat[STRAT_MassHuntress] = rp_strat[STRAT_MassHuntress] + 0
      set rp_strat[STRAT_MGDryads] = rp_strat[STRAT_MGDryads] + 0
      set rp_strat[STRAT_AoWMix] = rp_strat[STRAT_AoWMix] + 0
      set rp_strat[STRAT_AoLMix] = rp_strat[STRAT_AoLMix] + 0
      set rp_strat[STRAT_NEAntiTower] = rp_strat[STRAT_NEAntiTower] + 0
  endif

  if c_ally[R_HUMAN] > 0 then
      set rp_strat[STRAT_NormalElf] = rp_strat[STRAT_NormalElf] + 0
      set rp_strat[STRAT_MassHD] = rp_strat[STRAT_MassHD] + 0
      set rp_strat[STRAT_Druids] = rp_strat[STRAT_Druids] + 0
      set rp_strat[STRAT_Hippo] = rp_strat[STRAT_Hippo] + 0
      set rp_strat[STRAT_Ballista] = rp_strat[STRAT_Ballista] + 0
      set rp_strat[STRAT_Talon] = rp_strat[STRAT_Talon] + 0
      set rp_strat[STRAT_HippoChim] = rp_strat[STRAT_HippoChim] + 0
      set rp_strat[STRAT_DryadChim] = rp_strat[STRAT_DryadChim] + 0
      set rp_strat[STRAT_Archer] = rp_strat[STRAT_Archer] + 0
      set rp_strat[STRAT_DotC] = rp_strat[STRAT_DotC] + 0
      set rp_strat[STRAT_MassHuntress] = rp_strat[STRAT_MassHuntress] + 0
      set rp_strat[STRAT_MGDryads] = rp_strat[STRAT_MGDryads] + 0
      set rp_strat[STRAT_AoWMix] = rp_strat[STRAT_AoWMix] + 0
      set rp_strat[STRAT_AoLMix] = rp_strat[STRAT_AoLMix] + 0
      set rp_strat[STRAT_NEAntiTower] = rp_strat[STRAT_NEAntiTower] + 0
  endif

  if c_ally[R_ORC] > 0 then
      set rp_strat[STRAT_NormalElf] = rp_strat[STRAT_NormalElf] + 0
      set rp_strat[STRAT_MassHD] = rp_strat[STRAT_MassHD] + 0
      set rp_strat[STRAT_Druids] = rp_strat[STRAT_Druids] + 0
      set rp_strat[STRAT_Hippo] = rp_strat[STRAT_Hippo] + 0
      set rp_strat[STRAT_Ballista] = rp_strat[STRAT_Ballista] + 0
      set rp_strat[STRAT_Talon] = rp_strat[STRAT_Talon] + 0
      set rp_strat[STRAT_HippoChim] = rp_strat[STRAT_HippoChim] + 0
      set rp_strat[STRAT_DryadChim] = rp_strat[STRAT_DryadChim] + 0
      set rp_strat[STRAT_Archer] = rp_strat[STRAT_Archer] + 0
      set rp_strat[STRAT_DotC] = rp_strat[STRAT_DotC] + 0
      set rp_strat[STRAT_MassHuntress] = rp_strat[STRAT_MassHuntress] + 0
      set rp_strat[STRAT_MGDryads] = rp_strat[STRAT_MGDryads] + 0
      set rp_strat[STRAT_AoWMix] = rp_strat[STRAT_AoWMix] + 0
      set rp_strat[STRAT_AoLMix] = rp_strat[STRAT_AoLMix] + 0
      set rp_strat[STRAT_NEAntiTower] = rp_strat[STRAT_NEAntiTower] + 0
  endif

  if c_ally[R_UNDEAD] > 0 then
      set rp_strat[STRAT_NormalElf] = rp_strat[STRAT_NormalElf] + 0
      set rp_strat[STRAT_MassHD] = rp_strat[STRAT_MassHD] + 0
      set rp_strat[STRAT_Druids] = rp_strat[STRAT_Druids] + 0
      set rp_strat[STRAT_Hippo] = rp_strat[STRAT_Hippo] + 0
      set rp_strat[STRAT_Ballista] = rp_strat[STRAT_Ballista] + 0
      set rp_strat[STRAT_Talon] = rp_strat[STRAT_Talon] + 0
      set rp_strat[STRAT_HippoChim] = rp_strat[STRAT_HippoChim] + 0
      set rp_strat[STRAT_DryadChim] = rp_strat[STRAT_DryadChim] + 0
      set rp_strat[STRAT_Archer] = rp_strat[STRAT_Archer] + 0
      set rp_strat[STRAT_DotC] = rp_strat[STRAT_DotC] + 0
      set rp_strat[STRAT_MassHuntress] = rp_strat[STRAT_MassHuntress] + 0
      set rp_strat[STRAT_MGDryads] = rp_strat[STRAT_MGDryads] + 0
      set rp_strat[STRAT_AoWMix] = rp_strat[STRAT_AoWMix] + 0
      set rp_strat[STRAT_AoLMix] = rp_strat[STRAT_AoLMix] + 0
      set rp_strat[STRAT_NEAntiTower] = rp_strat[STRAT_NEAntiTower] + 0
  endif


  if ai_time > 2 then
    call div_rp_strat(3)
  endif
  call make_rp_strat_positive()

endfunction

function StrategyChanger takes nothing returns nothing
  local real array rp
  
  if not strat_change_allowed or strategy != chosen_strategy or debug_strategy > -1 or FoodUsed() >= 85 or GetMaximumEnemyStrength() < ver_strat_change_enemy_strength_min then
    return
  endif
  call chooseStrategyRP()
  call normalize_rp_strat()  // Makes priority much larger so the extra bonuses do not make as much of a difference


  set rp[STRAT_NormalElf] = rp[STRAT_NormalElf] + 0 * enemy_air
  set rp[STRAT_MassHD] = rp[STRAT_MassHD] + 0 * enemy_air
  set rp[STRAT_Druids] = rp[STRAT_Druids] + 0 * enemy_air
  set rp[STRAT_Hippo] = rp[STRAT_Hippo] + 10 * enemy_air
  set rp[STRAT_Ballista] = rp[STRAT_Ballista] + 0 * enemy_air
  set rp[STRAT_Talon] = rp[STRAT_Talon] + 4 * enemy_air
  set rp[STRAT_HippoChim] = rp[STRAT_HippoChim] + 5 * enemy_air
  set rp[STRAT_DryadChim] = rp[STRAT_DryadChim] + 0 * enemy_air
  set rp[STRAT_Archer] = rp[STRAT_Archer] + 5 * enemy_air
  set rp[STRAT_DotC] = rp[STRAT_DotC] + -5 * enemy_air
  set rp[STRAT_MassHuntress] = rp[STRAT_MassHuntress] + -5 * enemy_air
  set rp[STRAT_MGDryads] = rp[STRAT_MGDryads] + 0 * enemy_air
  set rp[STRAT_AoWMix] = rp[STRAT_AoWMix] + 0 * enemy_air
  set rp[STRAT_AoLMix] = rp[STRAT_AoLMix] + 0 * enemy_air
  set rp[STRAT_NEAntiTower] = rp[STRAT_NEAntiTower] + -10 * enemy_air
  set rp[STRAT_NormalElf] = rp[STRAT_NormalElf] + 0 * enemy_casters
  set rp[STRAT_MassHD] = rp[STRAT_MassHD] + 0 * enemy_casters
  set rp[STRAT_Druids] = rp[STRAT_Druids] + 2 * enemy_casters
  set rp[STRAT_Hippo] = rp[STRAT_Hippo] + 0 * enemy_casters
  set rp[STRAT_Ballista] = rp[STRAT_Ballista] + 4 * enemy_casters
  set rp[STRAT_Talon] = rp[STRAT_Talon] + 0 * enemy_casters
  set rp[STRAT_HippoChim] = rp[STRAT_HippoChim] + 0 * enemy_casters
  set rp[STRAT_DryadChim] = rp[STRAT_DryadChim] + 5 * enemy_casters
  set rp[STRAT_Archer] = rp[STRAT_Archer] + 0 * enemy_casters
  set rp[STRAT_DotC] = rp[STRAT_DotC] + 0 * enemy_casters
  set rp[STRAT_MassHuntress] = rp[STRAT_MassHuntress] + 0 * enemy_casters
  set rp[STRAT_MGDryads] = rp[STRAT_MGDryads] + 8 * enemy_casters
  set rp[STRAT_AoWMix] = rp[STRAT_AoWMix] + 0 * enemy_casters
  set rp[STRAT_AoLMix] = rp[STRAT_AoLMix] + 0 * enemy_casters
  set rp[STRAT_NEAntiTower] = rp[STRAT_NEAntiTower] + 0 * enemy_casters
  set rp[STRAT_NormalElf] = rp[STRAT_NormalElf] + 0 * enemy_towers
  set rp[STRAT_MassHD] = rp[STRAT_MassHD] + 0 * enemy_towers
  set rp[STRAT_Druids] = rp[STRAT_Druids] + 0 * enemy_towers
  set rp[STRAT_Hippo] = rp[STRAT_Hippo] + 0 * enemy_towers
  set rp[STRAT_Ballista] = rp[STRAT_Ballista] + 8 * enemy_towers
  set rp[STRAT_Talon] = rp[STRAT_Talon] + 0 * enemy_towers
  set rp[STRAT_HippoChim] = rp[STRAT_HippoChim] + 4 * enemy_towers
  set rp[STRAT_DryadChim] = rp[STRAT_DryadChim] + 4 * enemy_towers
  set rp[STRAT_Archer] = rp[STRAT_Archer] + 0 * enemy_towers
  set rp[STRAT_DotC] = rp[STRAT_DotC] + 0 * enemy_towers
  set rp[STRAT_MassHuntress] = rp[STRAT_MassHuntress] + 0 * enemy_towers
  set rp[STRAT_MGDryads] = rp[STRAT_MGDryads] + 2 * enemy_towers
  set rp[STRAT_AoWMix] = rp[STRAT_AoWMix] + 0 * enemy_towers
  set rp[STRAT_AoLMix] = rp[STRAT_AoLMix] + 0 * enemy_towers
  set rp[STRAT_NEAntiTower] = rp[STRAT_NEAntiTower] + 10 * enemy_towers
  set rp[STRAT_NormalElf] = rp[STRAT_NormalElf] + 0 * enemy_piercing
  set rp[STRAT_MassHD] = rp[STRAT_MassHD] + -8 * enemy_piercing
  set rp[STRAT_Druids] = rp[STRAT_Druids] + -3 * enemy_piercing
  set rp[STRAT_Hippo] = rp[STRAT_Hippo] + -10 * enemy_piercing
  set rp[STRAT_Ballista] = rp[STRAT_Ballista] + -4 * enemy_piercing
  set rp[STRAT_Talon] = rp[STRAT_Talon] + -5 * enemy_piercing
  set rp[STRAT_HippoChim] = rp[STRAT_HippoChim] + -10 * enemy_piercing
  set rp[STRAT_DryadChim] = rp[STRAT_DryadChim] + -10 * enemy_piercing
  set rp[STRAT_Archer] = rp[STRAT_Archer] + 0 * enemy_piercing
  set rp[STRAT_DotC] = rp[STRAT_DotC] + 0 * enemy_piercing
  set rp[STRAT_MassHuntress] = rp[STRAT_MassHuntress] + -5 * enemy_piercing
  set rp[STRAT_MGDryads] = rp[STRAT_MGDryads] + -3 * enemy_piercing
  set rp[STRAT_AoWMix] = rp[STRAT_AoWMix] + 0 * enemy_piercing
  set rp[STRAT_AoLMix] = rp[STRAT_AoLMix] + 0 * enemy_piercing
  set rp[STRAT_NEAntiTower] = rp[STRAT_NEAntiTower] + 0 * enemy_piercing
  set rp[STRAT_NormalElf] = rp[STRAT_NormalElf] + 0 * enemy_normal
  set rp[STRAT_MassHD] = rp[STRAT_MassHD] + 2 * enemy_normal
  set rp[STRAT_Druids] = rp[STRAT_Druids] + 2 * enemy_normal
  set rp[STRAT_Hippo] = rp[STRAT_Hippo] + 1 * enemy_normal
  set rp[STRAT_Ballista] = rp[STRAT_Ballista] + 0 * enemy_normal
  set rp[STRAT_Talon] = rp[STRAT_Talon] + 0 * enemy_normal
  set rp[STRAT_HippoChim] = rp[STRAT_HippoChim] + 2 * enemy_normal
  set rp[STRAT_DryadChim] = rp[STRAT_DryadChim] + 0 * enemy_normal
  set rp[STRAT_Archer] = rp[STRAT_Archer] + -5 * enemy_normal
  set rp[STRAT_DotC] = rp[STRAT_DotC] + 4 * enemy_normal
  set rp[STRAT_MassHuntress] = rp[STRAT_MassHuntress] + 2 * enemy_normal
  set rp[STRAT_MGDryads] = rp[STRAT_MGDryads] + -3 * enemy_normal
  set rp[STRAT_AoWMix] = rp[STRAT_AoWMix] + 0 * enemy_normal
  set rp[STRAT_AoLMix] = rp[STRAT_AoLMix] + 0 * enemy_normal
  set rp[STRAT_NEAntiTower] = rp[STRAT_NEAntiTower] + -10 * enemy_normal
  set rp[STRAT_NormalElf] = rp[STRAT_NormalElf] + 0 * enemy_siege
  set rp[STRAT_MassHD] = rp[STRAT_MassHD] + -8 * enemy_siege
  set rp[STRAT_Druids] = rp[STRAT_Druids] + -2 * enemy_siege
  set rp[STRAT_Hippo] = rp[STRAT_Hippo] + 0 * enemy_siege
  set rp[STRAT_Ballista] = rp[STRAT_Ballista] + -4 * enemy_siege
  set rp[STRAT_Talon] = rp[STRAT_Talon] + -5 * enemy_siege
  set rp[STRAT_HippoChim] = rp[STRAT_HippoChim] + 0 * enemy_siege
  set rp[STRAT_DryadChim] = rp[STRAT_DryadChim] + -3 * enemy_siege
  set rp[STRAT_Archer] = rp[STRAT_Archer] + 0 * enemy_siege
  set rp[STRAT_DotC] = rp[STRAT_DotC] + 0 * enemy_siege
  set rp[STRAT_MassHuntress] = rp[STRAT_MassHuntress] + -5 * enemy_siege
  set rp[STRAT_MGDryads] = rp[STRAT_MGDryads] + -3 * enemy_siege
  set rp[STRAT_AoWMix] = rp[STRAT_AoWMix] + 0 * enemy_siege
  set rp[STRAT_AoLMix] = rp[STRAT_AoLMix] + 0 * enemy_siege
  set rp[STRAT_NEAntiTower] = rp[STRAT_NEAntiTower] + 0 * enemy_siege
  set rp[STRAT_NormalElf] = rp[STRAT_NormalElf] + 0 * enemy_magic
  set rp[STRAT_MassHD] = rp[STRAT_MassHD] + 0 * enemy_magic
  set rp[STRAT_Druids] = rp[STRAT_Druids] + 0 * enemy_magic
  set rp[STRAT_Hippo] = rp[STRAT_Hippo] + -3 * enemy_magic
  set rp[STRAT_Ballista] = rp[STRAT_Ballista] + 0 * enemy_magic
  set rp[STRAT_Talon] = rp[STRAT_Talon] + 0 * enemy_magic
  set rp[STRAT_HippoChim] = rp[STRAT_HippoChim] + -3 * enemy_magic
  set rp[STRAT_DryadChim] = rp[STRAT_DryadChim] + -1 * enemy_magic
  set rp[STRAT_Archer] = rp[STRAT_Archer] + 0 * enemy_magic
  set rp[STRAT_DotC] = rp[STRAT_DotC] + -10 * enemy_magic
  set rp[STRAT_MassHuntress] = rp[STRAT_MassHuntress] + 0 * enemy_magic
  set rp[STRAT_MGDryads] = rp[STRAT_MGDryads] + 0 * enemy_magic
  set rp[STRAT_AoWMix] = rp[STRAT_AoWMix] + 0 * enemy_magic
  set rp[STRAT_AoLMix] = rp[STRAT_AoLMix] + 0 * enemy_magic
  set rp[STRAT_NEAntiTower] = rp[STRAT_NEAntiTower] + -10 * enemy_magic
  set rp[STRAT_NormalElf] = rp[STRAT_NormalElf] + 0 * enemy_unarmored
  set rp[STRAT_MassHD] = rp[STRAT_MassHD] + 4 * enemy_unarmored
  set rp[STRAT_Druids] = rp[STRAT_Druids] + 2 * enemy_unarmored
  set rp[STRAT_Hippo] = rp[STRAT_Hippo] + 5 * enemy_unarmored
  set rp[STRAT_Ballista] = rp[STRAT_Ballista] + 8 * enemy_unarmored
  set rp[STRAT_Talon] = rp[STRAT_Talon] + 0 * enemy_unarmored
  set rp[STRAT_HippoChim] = rp[STRAT_HippoChim] + 3 * enemy_unarmored
  set rp[STRAT_DryadChim] = rp[STRAT_DryadChim] + 3 * enemy_unarmored
  set rp[STRAT_Archer] = rp[STRAT_Archer] + 5 * enemy_unarmored
  set rp[STRAT_DotC] = rp[STRAT_DotC] + 0 * enemy_unarmored
  set rp[STRAT_MassHuntress] = rp[STRAT_MassHuntress] + 0 * enemy_unarmored
  set rp[STRAT_MGDryads] = rp[STRAT_MGDryads] + 9 * enemy_unarmored
  set rp[STRAT_AoWMix] = rp[STRAT_AoWMix] + 3 * enemy_unarmored
  set rp[STRAT_AoLMix] = rp[STRAT_AoLMix] + 3 * enemy_unarmored
  set rp[STRAT_NEAntiTower] = rp[STRAT_NEAntiTower] + 5 * enemy_unarmored
  set rp[STRAT_NormalElf] = rp[STRAT_NormalElf] + 0 * enemy_lightarmor
  set rp[STRAT_MassHD] = rp[STRAT_MassHD] + 4 * enemy_lightarmor
  set rp[STRAT_Druids] = rp[STRAT_Druids] + 2 * enemy_lightarmor
  set rp[STRAT_Hippo] = rp[STRAT_Hippo] + 8 * enemy_lightarmor
  set rp[STRAT_Ballista] = rp[STRAT_Ballista] + 4 * enemy_lightarmor
  set rp[STRAT_Talon] = rp[STRAT_Talon] + 3 * enemy_lightarmor
  set rp[STRAT_HippoChim] = rp[STRAT_HippoChim] + 7 * enemy_lightarmor
  set rp[STRAT_DryadChim] = rp[STRAT_DryadChim] + 7 * enemy_lightarmor
  set rp[STRAT_Archer] = rp[STRAT_Archer] + 10 * enemy_lightarmor
  set rp[STRAT_DotC] = rp[STRAT_DotC] + 0 * enemy_lightarmor
  set rp[STRAT_MassHuntress] = rp[STRAT_MassHuntress] + 0 * enemy_lightarmor
  set rp[STRAT_MGDryads] = rp[STRAT_MGDryads] + 8 * enemy_lightarmor
  set rp[STRAT_AoWMix] = rp[STRAT_AoWMix] + 5 * enemy_lightarmor
  set rp[STRAT_AoLMix] = rp[STRAT_AoLMix] + 3 * enemy_lightarmor
  set rp[STRAT_NEAntiTower] = rp[STRAT_NEAntiTower] + 0 * enemy_lightarmor
  set rp[STRAT_NormalElf] = rp[STRAT_NormalElf] + 0 * enemy_mediumarmor
  set rp[STRAT_MassHD] = rp[STRAT_MassHD] + 4 * enemy_mediumarmor
  set rp[STRAT_Druids] = rp[STRAT_Druids] + 8 * enemy_mediumarmor
  set rp[STRAT_Hippo] = rp[STRAT_Hippo] + 0 * enemy_mediumarmor
  set rp[STRAT_Ballista] = rp[STRAT_Ballista] + 0 * enemy_mediumarmor
  set rp[STRAT_Talon] = rp[STRAT_Talon] + 0 * enemy_mediumarmor
  set rp[STRAT_HippoChim] = rp[STRAT_HippoChim] + 0 * enemy_mediumarmor
  set rp[STRAT_DryadChim] = rp[STRAT_DryadChim] + 0 * enemy_mediumarmor
  set rp[STRAT_Archer] = rp[STRAT_Archer] + 0 * enemy_mediumarmor
  set rp[STRAT_DotC] = rp[STRAT_DotC] + 5 * enemy_mediumarmor
  set rp[STRAT_MassHuntress] = rp[STRAT_MassHuntress] + 5 * enemy_mediumarmor
  set rp[STRAT_MGDryads] = rp[STRAT_MGDryads] + 0 * enemy_mediumarmor
  set rp[STRAT_AoWMix] = rp[STRAT_AoWMix] + 1 * enemy_mediumarmor
  set rp[STRAT_AoLMix] = rp[STRAT_AoLMix] + -1 * enemy_mediumarmor
  set rp[STRAT_NEAntiTower] = rp[STRAT_NEAntiTower] + 0 * enemy_mediumarmor
  set rp[STRAT_NormalElf] = rp[STRAT_NormalElf] + 0 * enemy_heavyarmor
  set rp[STRAT_MassHD] = rp[STRAT_MassHD] + 0 * enemy_heavyarmor
  set rp[STRAT_Druids] = rp[STRAT_Druids] + 2 * enemy_heavyarmor
  set rp[STRAT_Hippo] = rp[STRAT_Hippo] + 0 * enemy_heavyarmor
  set rp[STRAT_Ballista] = rp[STRAT_Ballista] + 0 * enemy_heavyarmor
  set rp[STRAT_Talon] = rp[STRAT_Talon] + 10 * enemy_heavyarmor
  set rp[STRAT_HippoChim] = rp[STRAT_HippoChim] + 8 * enemy_heavyarmor
  set rp[STRAT_DryadChim] = rp[STRAT_DryadChim] + 8 * enemy_heavyarmor
  set rp[STRAT_Archer] = rp[STRAT_Archer] + 0 * enemy_heavyarmor
  set rp[STRAT_DotC] = rp[STRAT_DotC] + 0 * enemy_heavyarmor
  set rp[STRAT_MassHuntress] = rp[STRAT_MassHuntress] + 0 * enemy_heavyarmor
  set rp[STRAT_MGDryads] = rp[STRAT_MGDryads] + 0 * enemy_heavyarmor
  set rp[STRAT_AoWMix] = rp[STRAT_AoWMix] + 0 * enemy_heavyarmor
  set rp[STRAT_AoLMix] = rp[STRAT_AoLMix] + 2 * enemy_heavyarmor
  set rp[STRAT_NEAntiTower] = rp[STRAT_NEAntiTower] + 0 * enemy_heavyarmor

  set rp_strat[STRAT_NormalElf] = rp_strat[STRAT_NormalElf] + R2I(rp[STRAT_NormalElf])
  set rp_strat[STRAT_MassHD] = rp_strat[STRAT_MassHD] + R2I(rp[STRAT_MassHD])
  set rp_strat[STRAT_Druids] = rp_strat[STRAT_Druids] + R2I(rp[STRAT_Druids])
  set rp_strat[STRAT_Hippo] = rp_strat[STRAT_Hippo] + R2I(rp[STRAT_Hippo])
  set rp_strat[STRAT_Ballista] = rp_strat[STRAT_Ballista] + R2I(rp[STRAT_Ballista])
  set rp_strat[STRAT_Talon] = rp_strat[STRAT_Talon] + R2I(rp[STRAT_Talon])
  set rp_strat[STRAT_HippoChim] = rp_strat[STRAT_HippoChim] + R2I(rp[STRAT_HippoChim])
  set rp_strat[STRAT_DryadChim] = rp_strat[STRAT_DryadChim] + R2I(rp[STRAT_DryadChim])
  set rp_strat[STRAT_Archer] = rp_strat[STRAT_Archer] + R2I(rp[STRAT_Archer])
  set rp_strat[STRAT_DotC] = rp_strat[STRAT_DotC] + R2I(rp[STRAT_DotC])
  set rp_strat[STRAT_MassHuntress] = rp_strat[STRAT_MassHuntress] + R2I(rp[STRAT_MassHuntress])
  set rp_strat[STRAT_MGDryads] = rp_strat[STRAT_MGDryads] + R2I(rp[STRAT_MGDryads])
  set rp_strat[STRAT_AoWMix] = rp_strat[STRAT_AoWMix] + R2I(rp[STRAT_AoWMix])
  set rp_strat[STRAT_AoLMix] = rp_strat[STRAT_AoLMix] + R2I(rp[STRAT_AoLMix])
  set rp_strat[STRAT_NEAntiTower] = rp_strat[STRAT_NEAntiTower] + R2I(rp[STRAT_NEAntiTower])

  call finish_strategy_change()
endfunction

function SetRaceAggression takes nothing returns nothing
  set b_race_aggression[0] = 1
  set b_race_aggression[1] = 3
  set b_race_aggression[2] = 5
  set b_race_aggression[3] = 0
  set b_race_aggression[4] = 1
  set b_race_aggression[5] = 2
  set b_race_aggression[6] = 0
  set b_race_aggression[7] = 1
  set b_race_aggression[8] = 2
  set b_race_aggression[9] = -2
  set b_race_aggression[10] = -1
  set b_race_aggression[11] = 0
endfunction

function AMAI_PickMeleeHero takes nothing returns nothing
  local integer i = 0
  //local location l = GetUnitLoc(nearest_neutral[NEUTRAL_TAVERN])

  set hero_number = race_hero_number + ver_neutral_hero_number
  // recalculate_heros occurs only if hero is a tavern hero but tavern is not pathable
  if not recalculate_heros and ver_neutral_heroes_available and neutral_available[NEUTRAL_TAVERN] then //and CanPathToLoc(home_location, l, PATHING_TYPE_WALKABILITY) > 0 then
    call InitNeutralSkills()
	//call Trace("PickMeleeHero: Neutral Hero possible")
  else
    set first_choosable_hero = ver_neutral_hero_number
  endif
  //call RemoveLocation(l)
  //set l = null

  set all_heroes[0] = NAGA_SORCERESS
  set hero_rp[0] = 20
  set all_heroes[1] = BEAST_MASTER
  set hero_rp[1] = 15
  set all_heroes[2] = DARK_RANGER
  set hero_rp[2] = 19
  set all_heroes[3] = NEUTRAL_PIT_LORD
  set hero_rp[3] = 8
  set all_heroes[4] = BREW_MASTER
  set hero_rp[4] = 12
  set all_heroes[5] = GOBLIN_TINKER
  set hero_rp[5] = 3
  set all_heroes[6] = FIRELORD
  set hero_rp[6] = 19
  set all_heroes[7] = ALCHEMIST
  set hero_rp[7] = 8
  set all_heroes[8] = DEMON_HUNTER
  set hero_rp[8] = 37
  set all_heroes[9] = KEEPER
  set hero_rp[9] = 40
  set all_heroes[10] = MOON_PRIESTESS
  set hero_rp[10] = 25
  set all_heroes[11] = WARDEN
  set hero_rp[11] = 22
  
  
  loop
	exitwhen i > hero_number
    set all_heroes_copy[i] = all_heroes[i]
	set i = i + 1
  endloop

  call AddFavoriteHeroRP()
  call AddStrategyHeroRP(strategy_first_hero[strategy], strategy_first_hero_bonus[strategy])

  // increase the rp for those that are good for certain matchups

  if c_ally_total > 0 then
    set hero_rp[0] = hero_rp[0] + 0
    set hero_rp[1] = hero_rp[1] + 0
    set hero_rp[2] = hero_rp[2] + 0
    set hero_rp[3] = hero_rp[3] + 0
    set hero_rp[4] = hero_rp[4] + 0
    set hero_rp[5] = hero_rp[5] + 0
    set hero_rp[6] = hero_rp[6] + 0
    set hero_rp[7] = hero_rp[7] + 0
    set hero_rp[8] = hero_rp[8] + 0
    set hero_rp[9] = hero_rp[9] + 0
    set hero_rp[10] = hero_rp[10] + 0
    set hero_rp[11] = hero_rp[11] + 0
  endif
  
  if c_enemy[R_RANDOM] > 0 then
    set hero_rp[0] = hero_rp[0] + 0
    set hero_rp[1] = hero_rp[1] + 0
    set hero_rp[2] = hero_rp[2] + 0
    set hero_rp[3] = hero_rp[3] + 0
    set hero_rp[4] = hero_rp[4] + 0
    set hero_rp[5] = hero_rp[5] + 0
    set hero_rp[6] = hero_rp[6] + 0
    set hero_rp[7] = hero_rp[7] + 0
    set hero_rp[8] = hero_rp[8] + 0
    set hero_rp[9] = hero_rp[9] + 0
    set hero_rp[10] = hero_rp[10] + 0
    set hero_rp[11] = hero_rp[11] + 0
  endif

  if c_enemy[R_ELF] > 0 then
    set hero_rp[0] = hero_rp[0] + 5
    set hero_rp[1] = hero_rp[1] + 0
    set hero_rp[2] = hero_rp[2] + 0
    set hero_rp[3] = hero_rp[3] + 0
    set hero_rp[4] = hero_rp[4] + 0
    set hero_rp[5] = hero_rp[5] + 0
    set hero_rp[6] = hero_rp[6] + 0
    set hero_rp[7] = hero_rp[7] + 0
    set hero_rp[8] = hero_rp[8] + 5
    set hero_rp[9] = hero_rp[9] + 10
    set hero_rp[10] = hero_rp[10] + 10
    set hero_rp[11] = hero_rp[11] + 0
  endif

  if c_ally[R_ELF] > 0 then
    set hero_rp[0] = hero_rp[0] + 0
    set hero_rp[1] = hero_rp[1] + 0
    set hero_rp[2] = hero_rp[2] + 0
    set hero_rp[3] = hero_rp[3] + 0
    set hero_rp[4] = hero_rp[4] + 0
    set hero_rp[5] = hero_rp[5] + 0
    set hero_rp[6] = hero_rp[6] + 0
    set hero_rp[7] = hero_rp[7] + 0
    set hero_rp[8] = hero_rp[8] + 0
    set hero_rp[9] = hero_rp[9] + 0
    set hero_rp[10] = hero_rp[10] + 0
    set hero_rp[11] = hero_rp[11] + 0
  endif
  
  if c_enemy[R_HUMAN] > 0 then
    set hero_rp[0] = hero_rp[0] + 5
    set hero_rp[1] = hero_rp[1] + 0
    set hero_rp[2] = hero_rp[2] + 0
    set hero_rp[3] = hero_rp[3] + 0
    set hero_rp[4] = hero_rp[4] + 5
    set hero_rp[5] = hero_rp[5] + 0
    set hero_rp[6] = hero_rp[6] + 0
    set hero_rp[7] = hero_rp[7] + 0
    set hero_rp[8] = hero_rp[8] + 5
    set hero_rp[9] = hero_rp[9] + 10
    set hero_rp[10] = hero_rp[10] + 0
    set hero_rp[11] = hero_rp[11] + 5
  endif

  if c_ally[R_HUMAN] > 0 then
    set hero_rp[0] = hero_rp[0] + 0
    set hero_rp[1] = hero_rp[1] + 0
    set hero_rp[2] = hero_rp[2] + 0
    set hero_rp[3] = hero_rp[3] + 0
    set hero_rp[4] = hero_rp[4] + 0
    set hero_rp[5] = hero_rp[5] + 0
    set hero_rp[6] = hero_rp[6] + 0
    set hero_rp[7] = hero_rp[7] + 0
    set hero_rp[8] = hero_rp[8] + 0
    set hero_rp[9] = hero_rp[9] + 0
    set hero_rp[10] = hero_rp[10] + 0
    set hero_rp[11] = hero_rp[11] + 0
  endif
  
  if c_enemy[R_ORC] > 0 then
    set hero_rp[0] = hero_rp[0] + 0
    set hero_rp[1] = hero_rp[1] + 10
    set hero_rp[2] = hero_rp[2] + 0
    set hero_rp[3] = hero_rp[3] + 0
    set hero_rp[4] = hero_rp[4] + 0
    set hero_rp[5] = hero_rp[5] + 0
    set hero_rp[6] = hero_rp[6] + 5
    set hero_rp[7] = hero_rp[7] + 0
    set hero_rp[8] = hero_rp[8] + 5
    set hero_rp[9] = hero_rp[9] + 10
    set hero_rp[10] = hero_rp[10] + 0
    set hero_rp[11] = hero_rp[11] + 0
  endif

  if c_ally[R_ORC] > 0 then
    set hero_rp[0] = hero_rp[0] + 0
    set hero_rp[1] = hero_rp[1] + 0
    set hero_rp[2] = hero_rp[2] + 0
    set hero_rp[3] = hero_rp[3] + 0
    set hero_rp[4] = hero_rp[4] + 0
    set hero_rp[5] = hero_rp[5] + 0
    set hero_rp[6] = hero_rp[6] + 0
    set hero_rp[7] = hero_rp[7] + 0
    set hero_rp[8] = hero_rp[8] + 0
    set hero_rp[9] = hero_rp[9] + 0
    set hero_rp[10] = hero_rp[10] + 0
    set hero_rp[11] = hero_rp[11] + 0
  endif
  
  if c_enemy[R_UNDEAD] > 0 then
    set hero_rp[0] = hero_rp[0] + 0
    set hero_rp[1] = hero_rp[1] + 0
    set hero_rp[2] = hero_rp[2] + 10
    set hero_rp[3] = hero_rp[3] + 0
    set hero_rp[4] = hero_rp[4] + 5
    set hero_rp[5] = hero_rp[5] + 0
    set hero_rp[6] = hero_rp[6] + 0
    set hero_rp[7] = hero_rp[7] + 0
    set hero_rp[8] = hero_rp[8] + 5
    set hero_rp[9] = hero_rp[9] + 10
    set hero_rp[10] = hero_rp[10] + 0
    set hero_rp[11] = hero_rp[11] + 5
  endif

  if c_ally[R_UNDEAD] > 0 then
    set hero_rp[0] = hero_rp[0] + 0
    set hero_rp[1] = hero_rp[1] + 0
    set hero_rp[2] = hero_rp[2] + 0
    set hero_rp[3] = hero_rp[3] + -8
    set hero_rp[4] = hero_rp[4] + 0
    set hero_rp[5] = hero_rp[5] + 0
    set hero_rp[6] = hero_rp[6] + 0
    set hero_rp[7] = hero_rp[7] + 0
    set hero_rp[8] = hero_rp[8] + 0
    set hero_rp[9] = hero_rp[9] + 0
    set hero_rp[10] = hero_rp[10] + 0
    set hero_rp[11] = hero_rp[11] + 0
  endif
  

  set hero_rp[0] = hero_rp[0] + -10
  set hero_rp[1] = hero_rp[1] + 0
  set hero_rp[2] = hero_rp[2] + -5
  set hero_rp[3] = hero_rp[3] + -2
  set hero_rp[4] = hero_rp[4] + -9
  set hero_rp[5] = hero_rp[5] + -10
  set hero_rp[6] = hero_rp[6] + -10
  set hero_rp[7] = hero_rp[7] + -3
  set hero_rp[8] = hero_rp[8] + 0
  set hero_rp[9] = hero_rp[9] + 16
  set hero_rp[10] = hero_rp[10] + 0
  set hero_rp[11] = hero_rp[11] + 0

  set picked_hero = ChooseFirstHero()
  
  set hero_rp[0] = hero_rp[0] - -10
  set hero_rp[1] = hero_rp[1] - 0
  set hero_rp[2] = hero_rp[2] - -5
  set hero_rp[3] = hero_rp[3] - -2
  set hero_rp[4] = hero_rp[4] - -9
  set hero_rp[5] = hero_rp[5] - -10
  set hero_rp[6] = hero_rp[6] - -10
  set hero_rp[7] = hero_rp[7] - -3
  set hero_rp[8] = hero_rp[8] - 0
  set hero_rp[9] = hero_rp[9] - 16
  set hero_rp[10] = hero_rp[10] - 0
  set hero_rp[11] = hero_rp[11] - 0
  
  
  // increase the rp for those that are better as second or third hero
  set hero_rp[0] = hero_rp[0] + 10
  set hero_rp[1] = hero_rp[1] + -4
  set hero_rp[2] = hero_rp[2] + 0
  set hero_rp[3] = hero_rp[3] + 0
  set hero_rp[4] = hero_rp[4] + 6
  set hero_rp[5] = hero_rp[5] + -1
  set hero_rp[6] = hero_rp[6] + 0
  set hero_rp[7] = hero_rp[7] + 4
  set hero_rp[8] = hero_rp[8] + 0
  set hero_rp[9] = hero_rp[9] + 12
  set hero_rp[10] = hero_rp[10] + 0
  set hero_rp[11] = hero_rp[11] + -60

  call AddStrategyHeroRP(strategy_second_hero[strategy], strategy_second_hero_bonus[strategy])  
  call ChooseSecondHero()
  set hero_rp[0] = hero_rp[0] - 10
  set hero_rp[1] = hero_rp[1] - -4
  set hero_rp[2] = hero_rp[2] - 0
  set hero_rp[3] = hero_rp[3] - 0
  set hero_rp[4] = hero_rp[4] - 6
  set hero_rp[5] = hero_rp[5] - -1
  set hero_rp[6] = hero_rp[6] - 0
  set hero_rp[7] = hero_rp[7] - 4
  set hero_rp[8] = hero_rp[8] - 0
  set hero_rp[9] = hero_rp[9] - 12
  set hero_rp[10] = hero_rp[10] - 0
  set hero_rp[11] = hero_rp[11] - -60
  // ------------------------------------------------------------------------------
  
  set hero_rp[0] = hero_rp[0] + 0
  set hero_rp[1] = hero_rp[1] + -8
  set hero_rp[2] = hero_rp[2] + 0
  set hero_rp[3] = hero_rp[3] + 0
  set hero_rp[4] = hero_rp[4] + 9
  set hero_rp[5] = hero_rp[5] + 0
  set hero_rp[6] = hero_rp[6] + 0
  set hero_rp[7] = hero_rp[7] + 0
  set hero_rp[8] = hero_rp[8] + -40
  set hero_rp[9] = hero_rp[9] + 0
  set hero_rp[10] = hero_rp[10] + 0
  set hero_rp[11] = hero_rp[11] + -60

  call AddStrategyHeroRP(strategy_third_hero[strategy], strategy_third_hero_bonus[strategy])
  call ChooseRestHeroes()
endfunction






function airairBuild takes nothing returns nothing
  local integer cc_airair = 0

	set cc_airair = TownCount(HIPPO)
	if cc_airair >= bn_airair then
	  set strategy = chosen_strategy
	else
	  call BuildUnit( bn_airair, HIPPO, 90  )
	endif
endfunction
function airgroundBuild takes nothing returns nothing
  local integer cc_airground = 0

	set cc_airground = TownCount(CHIMAERA)
	if cc_airground >= bn_airground then
	  set strategy = chosen_strategy
	else
	  call BuildUnit( bn_airground, CHIMAERA, 90  )
	endif
endfunction
function groundairBuild takes nothing returns nothing
  local integer cc_groundair = 0

	set cc_groundair = TownCount(ARCHER)
	if cc_groundair >= bn_groundair then
	  set strategy = chosen_strategy
	else
	  call BuildUnit( bn_groundair, ARCHER, 90  )
	endif
endfunction
function groundgroundBuild takes nothing returns nothing
  local integer cc_groundground = 0

	set cc_groundground = TownCount(HUNTRESS)
	if cc_groundground >= bn_groundground then
	  set strategy = chosen_strategy
	else
	  call BuildUnit( bn_groundground, HUNTRESS, 90  )
	endif
endfunction
function farmBuild takes nothing returns nothing
  local integer cc_farm = 0

	set cc_farm = TownCount(MOON_WELL)
	if cc_farm >= bn_farm then
	  set strategy = chosen_strategy
	else
	  call BuildUnit( bn_farm, MOON_WELL, 90  )
	endif
endfunction
function guardBuild takes nothing returns nothing
  local integer cc_guard = 0

	set cc_guard = TownCount(ANCIENT_PROTECT)
	if cc_guard >= bn_guard then
	  set strategy = chosen_strategy
	else
	  call BuildUnit( bn_guard, ANCIENT_PROTECT, 90  )
	endif
endfunction

function cmdBuild takes nothing returns nothing
  if false then
  elseif strategy == 50 then
    call airairBuild()
  elseif strategy == 51 then
    call airgroundBuild()
  elseif strategy == 52 then
    call groundairBuild()
  elseif strategy == 53 then
    call groundgroundBuild()
  elseif strategy == 54 then
    call farmBuild()
  elseif strategy == 55 then
    call guardBuild()
  endif
endfunction

function set_skills takes nothing returns nothing
    if hero[1]== NAGA_SORCERESS then
        call LoadSkills(1,1,1)
    elseif hero[2]== NAGA_SORCERESS then
        call LoadSkills(2,1,2)
    elseif hero[3]== NAGA_SORCERESS then
        call LoadSkills(3,1,3)
    endif
    if hero[1]== BEAST_MASTER then
        call LoadSkills(1,2,1)
    elseif hero[2]== BEAST_MASTER then
        call LoadSkills(2,2,2)
    elseif hero[3]== BEAST_MASTER then
        call LoadSkills(3,2,3)
    endif
    if hero[1]== DARK_RANGER then
        call LoadSkills(1,3,1)
    elseif hero[2]== DARK_RANGER then
        call LoadSkills(2,3,2)
    elseif hero[3]== DARK_RANGER then
        call LoadSkills(3,3,3)
    endif
    if hero[1]== NEUTRAL_PIT_LORD then
        call LoadSkills(1,4,1)
    elseif hero[2]== NEUTRAL_PIT_LORD then
        call LoadSkills(2,4,2)
    elseif hero[3]== NEUTRAL_PIT_LORD then
        call LoadSkills(3,4,3)
    endif
    if hero[1]== BREW_MASTER then
        call LoadSkills(1,5,1)
    elseif hero[2]== BREW_MASTER then
        call LoadSkills(2,5,2)
    elseif hero[3]== BREW_MASTER then
        call LoadSkills(3,5,3)
    endif
    if hero[1]== GOBLIN_TINKER then
        call LoadSkills(1,6,1)
    elseif hero[2]== GOBLIN_TINKER then
        call LoadSkills(2,6,2)
    elseif hero[3]== GOBLIN_TINKER then
        call LoadSkills(3,6,3)
    endif
    if hero[1]== FIRELORD then
        call LoadSkills(1,7,1)
    elseif hero[2]== FIRELORD then
        call LoadSkills(2,7,2)
    elseif hero[3]== FIRELORD then
        call LoadSkills(3,7,3)
    endif
    if hero[1]== ALCHEMIST then
        call LoadSkills(1,8,1)
    elseif hero[2]== ALCHEMIST then
        call LoadSkills(2,8,2)
    elseif hero[3]== ALCHEMIST then
        call LoadSkills(3,8,3)
    endif
    if hero[1]== DEMON_HUNTER then
        call LoadSkills(1,9,1)
    elseif hero[2]== DEMON_HUNTER then
        call LoadSkills(2,9,2)
    elseif hero[3]== DEMON_HUNTER then
        call LoadSkills(3,9,3)
    endif
    if hero[1]== KEEPER then
        call LoadSkills(1,10,1)
    elseif hero[2]== KEEPER then
        call LoadSkills(2,10,2)
    elseif hero[3]== KEEPER then
        call LoadSkills(3,10,3)
    endif
    if hero[1]== MOON_PRIESTESS then
        call LoadSkills(1,11,1)
    elseif hero[2]== MOON_PRIESTESS then
        call LoadSkills(2,11,2)
    elseif hero[3]== MOON_PRIESTESS then
        call LoadSkills(3,11,3)
    endif
    if hero[1]== WARDEN then
        call LoadSkills(1,12,1)
    elseif hero[2]== WARDEN then
        call LoadSkills(2,12,2)
    elseif hero[3]== WARDEN then
        call LoadSkills(3,12,3)
    endif
endfunction

function setup_force takes boolean inj returns nothing

    set wave = wave + 1

    call InitAssaultGroup()

    if inj then
      call RemoveInjuries()
    endif

    call SetMeleeGroupAM( hero[1]    )
    call SetMeleeGroupAM( hero[2]   )
    call SetMeleeGroupAM( hero[3]   )
    call SetMeleeGroupAM( ARCHER      )
    call SetMeleeGroupAM( DRUID_TALON      )
    call SetMeleeGroupAM( DRUID_TALON_M      )
    call SetMeleeGroupAM( BALLISTA      )
    call SetMeleeGroupAM( DRUID_CLAW      )
    call SetMeleeGroupAM( DRUID_CLAW_M      )
    call SetMeleeGroupAM( DRYAD      )
    call SetMeleeGroupAM( HIPPO      )
    call SetMeleeGroupAM( HIPPO_RIDER      )
    call SetMeleeGroupAM( HUNTRESS      )
    call SetMeleeGroupAM( CHIMAERA      )
    call SetMeleeGroupAM( MOUNTAIN_GIANT      )
    call SetMeleeGroupAM( FAERIE_DRAGON      )
    call SetMeleeGroupAM( GOBLIN_TINKER_M      )
    call SetMeleeGroupAM( ALCHEMIST_M1      )
    call SetMeleeGroupAM( ALCHEMIST_M2      )
    call SetMeleeGroupAM( ALCHEMIST_M3      )
    
    call AttackGroupAddNeutrals()

endfunction



function basic_melee takes integer food, integer prio returns nothing
    call FoodPoolAM(food, true, race_simple_melee, GetFoodUsed(old_id[race_simple_melee]), CanBuildUnit(race_advanced_melee), race_advanced_melee, GetFoodUsed(old_id[race_advanced_melee]), prio)
endfunction

function setup_ghouls takes nothing returns nothing
  local integer gn = TownCountDone(racial_ghoul)
  local integer wood = GetWood()
  if wood > minimum_peon_wood then
    set take_all_ghouls_along = true
  elseif wood < minimum_peon_wood then
    set take_all_ghouls_along = false
  endif
  if take_all_ghouls_along then
    set attacking_ghouls = gn - Max(1 - (R2I(shredder_peon_count/2) * TownCountDone(neutral_shredder)), 0)
	set harvesting_ghouls = 0
  elseif wave <= 4 then
    set attacking_ghouls = Max(6, gn - 2)
	set harvesting_ghouls = 1
  //elseif wave==2 then
  //  set attacking_ghouls = Max(6, gn - 2)
 // elseif wood < maximum_peon_wood then
    //set attacking_ghouls = gn - Max((gn - 4) - (4 * TownCountDone(neutral_shredder)), 0)
  //elseif wood > maximum_peon_wood and wood < minimum_peon_wood / 2 then
  //  set attacking_ghouls = gn - Max(2 - (4 * TownCountDone(neutral_shredder)), 0)
  else
	  //set harvesting_ghouls = Max(0,Min(5 - wood / R2I(maximum_peon_wood*1),gn) - (R2I(shredder_peon_count/2) * TownCountDone(neutral_shredder)))
    set harvesting_ghouls = Max(1,Min(5 - wood / R2I(maximum_peon_wood*1),gn) - (R2I(shredder_peon_count/2) * TownCountDone(neutral_shredder)))
	  set attacking_ghouls = gn - harvesting_ghouls 
  endif
  set attacking_ghouls = Min(Max(attacking_ghouls, 0), gn)
endfunction

//============================================================================
//  global builds
//============================================================================
function global_init_strategy takes nothing returns nothing
    call AddBlock(1, ELF_ALTAR, true, 0, DEN_OF_WONDERS, 36)
    call AddBlock(1, TREE_AGES, false, 0, DEN_OF_WONDERS, 36)
    call AddBlock(8, ORC_ALTAR, true, 0, MOON_WELL, 1)
    //call AddBlock(1, ANCIENT_WAR, false, 0, HUNTERS_HALL, 60)
    call AddBlock(1, ANCIENT_WAR, false, 0, HUNTERS_HALL, 36)
    call AddHarass(1, 2, HUNTRESS)
    call AddHarass(3, 2, FAERIE_DRAGON)

	call AddBlock(8, ORC_ALTAR, true, 1, ELF_ALTAR, 360)
	call AddBlock(1, TREE_AGES, false, 1, BALLISTA, 36)

































































































































































endfunction
function global_build_sequence takes nothing returns nothing

	  call DefendTownsDone(2, ANCIENT_PROTECT, 75)
	  call BuildFront(2, ANCIENT_PROTECT, 35)
	  if GetRushFactor() < 5000 or GetPlayerRace(nearest_enemy) == RACE_UNDEAD then
		call BuildFront(1, ANCIENT_PROTECT, 51)
	  endif

	if tier == 3 and GetGold() > 2000 then
		call DefendTownsDone(2, ANCIENT_PROTECT, 75)
		call DefendTownsDone(4, ANCIENT_PROTECT, 35)
		call BuildFront(3, ANCIENT_PROTECT, 35)
		if TownCount(ANCIENT_PROTECT) >= 4 and TownCount(DEN_OF_WONDERS) < 2 then
			call DefendTownsDone(1, DEN_OF_WONDERS, 40)
		endif
		if TownCount(MOON_WELL) >= 8 and GetGold() > 2500 then
			call DefendTownsDone(2, MOON_WELL, 35)
		endif	
	endif

	  // Global Items
	  call BuildItem(1, M_SCROLL_OF_HEALING, 40)
	  //call BuildItem(1, SCROLL_OF_PROTECTION, 30)
	  call BuildItem(1, POTION_OF_LESSER_INVULNERBILITY, 70)
	  if tier == 1 then
		call BuildItem(1, M_TOWN_PORTAL, 100)
	  endif
	  if tier > 1 then
		//call BuildItem(1, HEALING_POTION, 70)
		call BuildItem(1, HEALING_POTION, 80)
		call BuildItem(1, TOWN_PORTAL, 180)
		call BuildItem(1, STAFF_OF_PRESERVATION, 40)
	  //elseif hero[1] == WARDEN then
		if hero[1] == WARDEN then
			call BuildItem(1, BOOTS_OF_SPEED, 50)
		endif
	  endif

	if tier == 2 then
		if hero[1] == WARDEN or hero[1] == KEEPER then
			call BuildItem(1, LESSER_CLARITY_POTION, 40)
		endif
	endif	

	if tier == 3 then
		call BuildItem(1, ORB_OF_VENOM, 70)
		call BuildItem(2, M_SCROLL_OF_HEALING, 30)
	endif	

	  call BuildAtMine(1, DEN_OF_WONDERS, 80+(20*(tier-1)))
		//call BuildUnit(1, DEN_OF_WONDERS, 80+(20*(tier-1)))

    // DYNAMIC
	call ResetDynamicSystem()
    if tier == 1 then
	call ResetDynamicSystem()
    	call AddUnitToAntiair(ARCHER,29)
		call AddUnitToAntiair(TREE_AGES,1)
		call AddUnitToAnticasters(TREE_AGES,1)
		call AddUnitToAnticasters(ARCHER,29)
		call AddUnitToAntitowers(BALLISTA,29)
		call AddUnitToAntitowers(TREE_AGES,1)
		call AddUnitToAntipiercing(HUNTRESS, 15)	
		call AddUnitToAntipiercing(ARCHER,15)
		call AddUnitToAntipiercing(TREE_AGES,1)
		call AddUnitToAntinormal(ARCHER,20)
		call AddUnitToAntinormal(HUNTRESS,10)
		call AddUnitToAntinormal(TREE_AGES,1)
		call AddUnitToAntisiege(ARCHER,29)
		call AddUnitToAntisiege(TREE_AGES,1)
		call AddUnitToAntimagic(ARCHER,29)
		call AddUnitToAntimagic(TREE_AGES,1)
		call AddUnitToAntiunarmored(ARCHER,29)
		call AddUnitToAntiunarmored(TREE_AGES,1)
		call AddUnitToAntilightarmor(ARCHER,29)
		call AddUnitToAntilightarmor(TREE_AGES,1)
		call AddUnitToAntimediumarmor(HUNTRESS,29)
		call AddUnitToAntimediumarmor(TREE_AGES,1)
		call AddUnitToAntiheavyarmor(TREE_AGES,1)
		call AddUnitToAntiheavyarmor(HUNTRESS,29)
		call DynamicBuildUnit(33, 38)
    elseif tier == 2 then
		call ResetDynamicSystem()
		call AddUnitToAntiair(ARCHER,4)
		call AddUnitToAntiair(HIPPO,3)
		call AddUnitToAntiair(DRYAD,3)

		call AddUnitToAnticasters(FAERIE_DRAGON,2)
		call AddUnitToAnticasters(ARCHER,1)
		call AddUnitToAnticasters(MOUNTAIN_GIANT,2)
		call AddUnitToAnticasters(DRYAD,9)

		call AddUnitToAntitowers(BALLISTA,4)
		call AddUnitToAntitowers(MOUNTAIN_GIANT,1)

		call AddUnitToAntipiercing(ARCHER,5)
		call AddUnitToAntipiercing(MOUNTAIN_GIANT,2)

		call AddUnitToAntinormal(HUNTRESS,3)
		call AddUnitToAntinormal(MOUNTAIN_GIANT,1)
		call AddUnitToAntinormal(DRUID_CLAW,5)

		call AddUnitToAntisiege(ARCHER,1)
		call AddUnitToAntisiege(MOUNTAIN_GIANT,1)

		call AddUnitToAntimagic(ARCHER,1)
		call AddUnitToAntimagic(MOUNTAIN_GIANT,1)
		call AddUnitToAntimagic(DRYAD,3)
		call AddUnitToAntimagic(FAERIE_DRAGON,1)

		call AddUnitToAntiunarmored(ARCHER,4)
		call AddUnitToAntiunarmored(DRYAD,4)
		call AddUnitToAntiunarmored(BALLISTA,1)

		call AddUnitToAntilightarmor(ARCHER,4)
		call AddUnitToAntilightarmor(DRYAD,4)
		call AddUnitToAntilightarmor(HIPPO_RIDER,1)

		call AddUnitToAntimediumarmor(HUNTRESS,7)
		call AddUnitToAntimediumarmor(DRUID_CLAW,4)

		call AddUnitToAntiheavyarmor(DRUID_TALON,1)
		call AddUnitToAntiheavyarmor(DRUID_CLAW,2)
		call AddUnitToAntiheavyarmor(TREE_ETERNITY,1)

		//call DynamicBuildUnit(75, 40)
		call DynamicBuildUnit(64, 40)
    else
		call ResetDynamicSystem()
		call AddUnitToAntiair(ARCHER,4)
		call AddUnitToAntiair(HIPPO,3)
		call AddUnitToAntiair(DRYAD,3)

		call AddUnitToAnticasters(FAERIE_DRAGON,2)
		call AddUnitToAnticasters(ARCHER,1)
		call AddUnitToAnticasters(MOUNTAIN_GIANT,2)
		call AddUnitToAnticasters(DRYAD,9)

		call AddUnitToAntitowers(BALLISTA,5)
		call AddUnitToAntitowers(MOUNTAIN_GIANT,2)
		call AddUnitToAntitowers(CHIMAERA,1)

		call AddUnitToAntipiercing(DRUID_CLAW, 3)
		call AddUnitToAntipiercing(ARCHER,5)
		call AddUnitToAntipiercing(MOUNTAIN_GIANT,2)

		call AddUnitToAntinormal(HUNTRESS,1)
		call AddUnitToAntinormal(MOUNTAIN_GIANT,1)
		call AddUnitToAntinormal(DRUID_CLAW,4)

		call AddUnitToAntisiege(ARCHER,1)
		call AddUnitToAntisiege(MOUNTAIN_GIANT,1)

		call AddUnitToAntimagic(ARCHER,1)
		call AddUnitToAntimagic(MOUNTAIN_GIANT,1)
		call AddUnitToAntimagic(DRYAD,3)
		call AddUnitToAntimagic(FAERIE_DRAGON,1)

		call AddUnitToAntiunarmored(ARCHER,4)
		call AddUnitToAntiunarmored(DRYAD,4)
		call AddUnitToAntiunarmored(BALLISTA,1)

		call AddUnitToAntilightarmor(ARCHER,4)
		call AddUnitToAntilightarmor(DRYAD,4)
		call AddUnitToAntilightarmor(HIPPO_RIDER,1)

		call AddUnitToAntimediumarmor(DRUID_CLAW,7)

		call AddUnitToAntiheavyarmor(DRUID_TALON,1)
		call AddUnitToAntiheavyarmor(CHIMAERA,3)
		call AddUnitToAntiheavyarmor(DRUID_CLAW,5)

		call DynamicBuildUnit(100, 40)
    endif

    // TIER 1 UPGRADES
    //--------------------------------------------------------
    if tier == 1 then
	endif
	//call BuildAdvUpgr2(1, UPG_ULTRAVISION, 1, TownCountDone(ARCHER) + TownCountDone(HUNTRESS), 5, 3, 20)
    	//call BuildAdvUpgr2(3, UPG_STR_MOON, 1,TownCountDone(ARCHER) + TownCountDone(HUNTRESS) + TownCountDone(HIPPO_RIDER),5,5,35)
    	//call BuildAdvUpgr2(3, UPG_MOON_ARMOR, 1,TownCountDone(ARCHER) + TownCountDone(HUNTRESS) + TownCountDone(HIPPO_RIDER),5,5,35)
    	//call BuildAdvUpgr2(3, UPG_STR_WILD, 1,TownCountDone(DRYAD) + TownCountDone(DRUID_CLAW) + TownCountDone(MOUNTAIN_GIANT) + TownCountDone(DRUID_TALON) + TownCountDone(CHIMAERA) + TownCountDone(FAERIE_DRAGON),5,5,35 )
    	//call BuildAdvUpgr2(3, UPG_HIDES, 1,TownCountDone(DRYAD) + TownCountDone(DRUID_CLAW) + TownCountDone(MOUNTAIN_GIANT) + TownCountDone(DRUID_TALON) + TownCountDone(CHIMAERA) + TownCountDone(FAERIE_DRAGON),5,5,35 )	
	call BuildAdvUpgr(1, UPG_ULTRAVISION, 1, TownCountDone(ARCHER) + TownCountDone(HUNTRESS), 15, 3, 10)
	//call BuildAdvUpgr(1, UPG_SCOUT, 1,TownCountDone(HUNTRESS),10,3,20)
	call BuildAdvUpgr(1, UPG_SCOUT, 1,TownCountDone(HUNTRESS),10,3,15)
	call BuildAdvUpgr(3, UPG_STR_MOON, 1,TownCountDone(ARCHER) + TownCountDone(HUNTRESS) + TownCountDone(HIPPO_RIDER),20,7,40)
	call BuildAdvUpgr(3, UPG_MOON_ARMOR, 1,TownCountDone(ARCHER) + TownCountDone(HUNTRESS) + TownCountDone(HIPPO_RIDER),20,7,40)
	call BuildAdvUpgr(3, UPG_STR_WILD, 1,TownCountDone(DRYAD) + TownCountDone(DRUID_CLAW) + TownCountDone(MOUNTAIN_GIANT) + TownCountDone(CHIMAERA) + TownCountDone(FAERIE_DRAGON),10,10,40 )
	call BuildAdvUpgr(3, UPG_HIDES, 1,TownCountDone(DRYAD) + TownCountDone(DRUID_CLAW) + TownCountDone(MOUNTAIN_GIANT) + TownCountDone(CHIMAERA) + TownCountDone(FAERIE_DRAGON),10,10,40 )	


    // TIER 2 UPGRADES
    //--------------------------------------------------------
    //if tier >= 2 then
		//call BuildUpgr(1, UPG_BLESSING, 25)
    	//if c_ally_total > 1 then
			//call BuildUpgr(1, UPG_WELL_SPRING,30)
		//endif
	//else
		//call BuildUpgr(1, UPG_WELL_SPRING,25)	
	//endif
    	if tier >= 2 then
    		//if hero[1] == KEEPER then
    			//call BuildUpgr(1, UPG_BLESSING, 30)
    		//else
			//call BuildUpgr(1, UPG_BLESSING, 20)
		//endif
	endif

	//call BuildAdvUpgr2(1, UPG_BOWS,2,TownCountDone(ARCHER),1,10,40)
	//call BuildAdvUpgr2(1, UPG_SCOUT, 1,TownCountDone(HUNTRESS),1,10,25)
	//call BuildAdvUpgr2(1, UPG_BOLT, 2,TownCountDone(BALLISTA),0.25,10,40)
	//call BuildAdvUpgr2(1, UPG_ABOLISH, 2, TownCountDone(DRYAD),0.33,15,80)
	//call BuildAdvUpgr2(2, UPG_DRUID_CLAW, 2, TownCountDone(DRUID_CLAW),0.33,15,80)	
	//call BuildAdvUpgr2(2, UPG_DRUID_TALON, 2, TownCountDone(DRUID_TALON),0.33,15,80)
	call BuildAdvUpgr(1, UPG_BOWS,2,TownCountDone(ARCHER),10,5,70)
	call BuildAdvUpgr(1, UPG_GLAIVE, 2,TownCountDone(HUNTRESS),10,5,70)
	call BuildAdvUpgr(1, UPG_BOLT, 2,TownCountDone(BALLISTA),4,5,50)
	//call BuildAdvUpgr(1, UPG_ABOLISH, 2, TownCountDone(DRYAD),5,5,80)
	call BuildAdvUpgr(1, UPG_ABOLISH, 2, TownCountDone(DRYAD),5,5,75)
	call BuildAdvUpgr(2, UPG_DRUID_CLAW, 2, TownCountDone(DRUID_CLAW),5,5,80)	
	call BuildAdvUpgr(2, UPG_DRUID_TALON, 2, TownCountDone(DRUID_TALON),5,5,80)



    // TIER 3 UPGRADES
    //--------------------------------------------------------
    //if tier == 3 then
	//endif
    	if tier == 3 then
    		call BuildUpgr(1, UPG_WELL_SPRING,50)
    		if hero[1] == KEEPER then
    			call BuildUpgr(1, UPG_BLESSING, 50)
    		else
			call BuildUpgr(1, UPG_BLESSING, 35)
		endif
	endif
	//call BuildAdvUpgr2(1, UPG_MARKSMAN, 3,TownCountDone(ARCHER),0.5, 15,65)
	//call BuildAdvUpgr2(1, UPG_GLAIVE, 3,TownCountDone(HUNTRESS),0.5,15,65)
	//call BuildAdvUpgr2(1, UPG_HARD_SKIN,3,TownCountDone(MOUNTAIN_GIANT),0.25,15,65)
	//call BuildAdvUpgr2(1, UPG_RESIST_SKIN,3,TownCountDone(MOUNTAIN_GIANT),0.25,15,50)
	//call BuildAdvUpgr2(1, UPG_CHIM_ACID,3, TownCountDone(CHIMAERA),0.25,15,50)
	//call BuildAdvUpgr2(1, UPG_MARK_CLAW,3,TownCountDone(DRUID_CLAW),1,10,70)
	//call BuildAdvUpgr2(1, UPG_MARK_TALON,3,TownCountDone(DRUID_TALON),1,10, 30)
	call BuildAdvUpgr(1, UPG_MARKSMAN, 3,TownCountDone(ARCHER),10,5,80)
	call BuildAdvUpgr(1, UPG_HARD_SKIN,3,TownCountDone(MOUNTAIN_GIANT),4,5,80)
	call BuildAdvUpgr(1, UPG_RESIST_SKIN,3,TownCountDone(MOUNTAIN_GIANT),4,5,60)
	call BuildAdvUpgr(1, UPG_CHIM_ACID,3, TownCountDone(CHIMAERA),4,5,60)
	call BuildAdvUpgr(1, UPG_MARK_CLAW,3,TownCountDone(DRUID_CLAW),10,5,80)


    // Global Mercenaries
    call BuildUnit(2, merc_healer, 50)
    call BuildUnit(1, SHREDDER, 70)

    // Harassing
    call Harass(1, HARASS_TARGET_PEONS, true, 4, 0.75, 0, GetPlayerRace(nearest_enemy) != RACE_UNDEAD and TownCountDone(HUNTRESS) > 6, 50, 80)
    call Harass(3, HARASS_TARGET_PEONS, true, 4, 0.75, 0, GetPlayerRace(nearest_enemy) != RACE_UNDEAD and TownCountDone(FAERIE_DRAGON) > 2, 50, 80)


































































































































































endfunction

//============================================================================
//  build_sequence
//============================================================================
function init_strategy_NormalElf takes nothing returns nothing

    call AddHarass(2, 4, HUNTRESS)
    //call AddHarass(2, 3, ARCHER)
    set distraction_group = 2






























endfunction
function build_sequence_NormalElf takes nothing returns nothing
if tier == 3 then
      call BuildUnit(1, hero[1], 140)
      call BuildUnit(1, hero[2], 130)
      call BuildUnit(1, hero[3], 120)

      call BuildUnit(3, MOUNTAIN_GIANT, 60)
      //call BuildUnit(1, hero[1], 80)
      //call BuildUnit(1, hero[2], 64)
      //call BuildUnit(1, hero[3], 60)
      call BuildUnit(7, HUNTRESS, 50)
      call BuildUnit(4, DRYAD, 58)
      call BuildUnit(6, ARCHER, 54)
      call BuildUnit(1, DRUID_CLAW, 64)
      call BuildUnit(1, FAERIE_DRAGON, 64)
      call BuildUnit(1, DRUID_TALON, 64)
      call BuildUnit(2, CHIMAERA, 62)
      call BuildUpgr(2, UPG_DRUID_CLAW, 40)
      call BuildUpgr(3, UPG_MOON_ARMOR, 40)
      call BuildUpgr(3, UPG_STR_MOON, 41)
      call BuildUpgr(3, UPG_HIDES, 35)
      call BuildUpgr(3, UPG_STR_WILD, 36)
      call BuildUnit(1, DEN_OF_WONDERS, 45)
      call BuildUnit(1, ZEPPELIN, 50)
































elseif tier == 2 then

      call BuildUnit(1, MOUNTAIN_GIANT, 44)
      call BuildUnit(3, HUNTRESS, 40)
      call BuildUnit(2, DRYAD, 42)
      call BuildUnit(3, ARCHER, 40)
      call BuildUnit(2, FAERIE_DRAGON, 42)
      call BuildUnit(2, BALLISTA, 42)
      call BuildUnit(1, TREE_ETERNITY, 20)
      call BuildUnit(1, hero[1], 80)
      call BuildUnit(1, hero[2], 70)
      call BuildUpgr(1, UPG_MOON_ARMOR, 20)
      call BuildUpgr(1, UPG_STR_MOON, 21)
      call BuildUpgr(1, UPG_HIDES, 15)
      call BuildUpgr(1, UPG_STR_WILD, 16)
      call BuildUnit(1, DEN_OF_WONDERS, 55)
































else
	call BuildUnit(1, hero[1], 150)
      call BuildUpgr(1, merc_rush, 65)
      //call BuildUnit(1, hero[1], 80)
      call BuildUnit(6, ARCHER, 60)
      call BuildUnit(1, DEN_OF_WONDERS, 70)
      call BuildUnit(1, HUNTRESS, 50)
      call BuildUnit(1, TREE_AGES, 45)


































endif
endfunction

//============================================================================
//  build_sequence
//============================================================================
function init_strategy_MassHD takes nothing returns nothing
    call AddRBlock(360, 160, 0, 0, ANCIENT_WAR, 60)
    //call AddBlock(1, HUNTERS_HALL, false, 1, MOON_WELL, 60)
    call AddBlock(1, HUNTERS_HALL, false, 1, MOON_WELL, 36)

    call AddHarass(2, 5, HUNTRESS)
    call AddHarass(2, 3, DRYAD)
    set distraction_group = 2







































endfunction
function build_sequence_MassHD takes nothing returns nothing
if tier == 3 then
      call BuildUnit(1, hero[1], 140)
      call BuildUnit(1, hero[2], 130)
      call BuildUnit(1, hero[3], 120)

      call SetBuildReact(10, 0, HUNTRESS, 0, BALLISTA, enemy_unarmored, 4, 8, 50)
      call BuildUnit(2, MOUNTAIN_GIANT, 60)
      //call SetBuildReact(20, 35, HUNTRESS, 0, ARCHER, enemy_air, 5, 20, 50)
	call SetBuildReact(20, 12, HUNTRESS, 0, ARCHER, enemy_air, 5, 20, 50)
      call BuildUnit(8, DRYAD, 70)
      //call BuildUnit(1, hero[1], 90)
      //call BuildUnit(1, hero[2], 60)
      call BuildUnit(1, DEN_OF_WONDERS, 80)

      call BuildUpgr(1, UPG_ABOLISH, 86)
      call BuildUpgr(1, UPG_GLAIVE, 86)







































elseif tier == 2 then

      call SetBuildReact(10, 0, HUNTRESS, 0, BALLISTA, enemy_unarmored, 4, 8, 50)
      call BuildUnit(1, MOUNTAIN_GIANT, 50)
      call SetBuildReact(20, 10, HUNTRESS, 0, ARCHER, enemy_air, 5, 20, 50)
      call BuildUnit(4, DRYAD, 70)
      call BuildUnit(1, TREE_ETERNITY, 10)
      call BuildUnit(1, hero[1], 80)
      call BuildUnit(1, hero[2], 60)
      call BuildUnit(1, DEN_OF_WONDERS, 80)

      //call BuildUpgr(1, UPG_ABOLISH, 78)
      call BuildUpgr(1, UPG_ABOLISH, 72)
	call BuildUpgr(1, UPG_GLAIVE, 72)









































else
	call BuildUnit(1, hero[1], 150)
      call BuildUnit(1, merc_rush, 60)
      //call SetBuildReact(22, 6, HUNTRESS, 3, ARCHER, (enemy_unarmored + (enemy_lightarmor * 2) + enemy_air + enemy_magic - (enemy_normal * 2)), 3, 18, 20)
      call SetBuildReact(22, 6, HUNTRESS, 3, ARCHER, (enemy_unarmored + (enemy_lightarmor * 2) + enemy_air + enemy_magic - (enemy_normal * 2)), 3, 18, 24)
      //call BuildUnit(1, TREE_AGES, 10)
      call BuildUnit(1, TREE_AGES, 50)
      //call BuildUnit(1, hero[1], 60)










































endif
endfunction

//============================================================================
//  build_sequence
//============================================================================
function init_strategy_Druids takes nothing returns nothing

    //call AddHarass(2, 3, DRUID_CLAW)
    call AddHarass(2, 2, DRYAD)
    set distraction_group = 2








































endfunction
function build_sequence_Druids takes nothing returns nothing
if tier == 3 then
      call BuildUnit(1, hero[1], 140)
      call BuildUnit(1, hero[2], 130)
      call BuildUnit(1, hero[3], 120)

      call BuildUpgr(1, UPG_MARK_CLAW,92)
      //call BuildUnit(6, DRYAD, 63)
      call BuildUnit(7, DRYAD, 100)
      //call BuildUnit(20, DRUID_CLAW, 75)
      //call BuildUnit(20, DRUID_TALON, 75)
      call BuildUnit(10, DRUID_CLAW, 99)
      call BuildUnit(6, DRUID_TALON, 100)
      //call BuildUnit(1, hero[1], 80)
      //call BuildUnit(1, hero[2], 60)
      call BuildUpgr(2, UPG_DRUID_CLAW, 115)
      call BuildUpgr(2, UPG_DRUID_TALON, 115)
      call BuildUnit(1, DEN_OF_WONDERS, 115)
      call BuildUpgr(1, UPG_ABOLISH, 65)









































elseif tier == 2 then

      //call BuildUnit(10, DRUID_TALON, 45)
	call BuildUnit(6, DRUID_TALON, 50)
      call BuildUnit(5, DRUID_CLAW, 55)
      call BuildUnit(6, DRYAD, 53)
	call BuildUnit(3, ARCHER, 55)
      call BuildUnit(1, TREE_ETERNITY, 80)
      call BuildUnit(1, hero[1], 80)
      call BuildUnit(1, hero[2], 60)
      call BuildUpgr(1, UPG_DRUID_CLAW, 65)
      //call BuildUpgr(1, UPG_ABOLISH, 65)
	call BuildUpgr(1, UPG_ABOLISH, 60)
      call BuildUpgr(1, UPG_DRUID_TALON, 65)











































else
	call BuildUnit(1, hero[1], 150)
      //call SetBuildReact(18, 3, ARCHER, 0, HUNTRESS, (enemy_normal + enemy_mediumarmor - (enemy_air * 2) - enemy_piercing - enemy_siege), 4, 25, 38) 
      //call BuildUnit(1, HUNTRESS, 52)
	call SetBuildReact(21, 3, ARCHER, 0, HUNTRESS, (enemy_normal + enemy_mediumarmor - (enemy_air * 2) - enemy_piercing - enemy_siege), 4, 25, 38)
      call BuildUnit(1, TREE_AGES, 50)
      //call BuildUnit(1, hero[1], 80)











































endif
endfunction

//============================================================================
//  build_sequence
//============================================================================
function init_strategy_Hippo takes nothing returns nothing

    //call AddHarass(2, 3, ARCHER)
    //set distraction_group = 2







































endfunction
function build_sequence_Hippo takes nothing returns nothing
if tier == 3 then
      call BuildUnit(1, hero[1], 140)
      call BuildUnit(1, hero[2], 130)
      call BuildUnit(1, hero[3], 120)

      //call BuildUnit(10, HIPPO, 50)
      call BuildUnit(6, HIPPO, 50)
      //call BuildUnit(10, HIPPO_RIDER, 50)
      call BuildUnit(12, HIPPO_RIDER, 50)
	call BuildUnit(6, FAERIE_DRAGON, 50)
      //call BuildUnit(1, hero[1], 80)
      //call BuildUnit(1, hero[2], 60)
      //call BuildUpgr(1, UPG_HIPPO_TAME, 70)
      call BuildUpgr(1, UPG_BOWS, 70  )
      call BuildUpgr(1, UPG_MARKSMAN, 70)
      call BuildUnit(1, DEN_OF_WONDERS, 45)










































elseif tier == 2 then

      //call BuildUnit(5, HIPPO_RIDER, 50)
      call BuildUnit(10, HIPPO_RIDER, 50)
      //call BuildUnit(5, HIPPO, 50)
      call BuildUnit(4, HIPPO, 50)
      //call BuildUnit(10, ARCHER, 50)
      call BuildUnit(5, ARCHER, 50)
	call BuildUnit(4, FAERIE_DRAGON, 50)
      call BuildUnit(1, TREE_ETERNITY, 10)
      call BuildUnit(1, hero[1], 80)
      call BuildUnit(1, hero[2], 60)
      //call BuildUpgr(1, UPG_HIPPO_TAME, 60)
      call BuildUpgr(1, UPG_BOWS, 70  )
      call BuildUnit(1, DEN_OF_WONDERS, 55)










































else
	call BuildUnit(1, hero[1], 150)
      //call SetBuildReact(18, 3, ARCHER, 0, HUNTRESS, (enemy_normal + enemy_mediumarmor - (enemy_air * 2) - enemy_piercing - enemy_siege), 4, 25, 38) 
      //call BuildUnit(1, HUNTRESS, 52)
	call SetBuildReact(21, 3, ARCHER, 0, HUNTRESS, (enemy_normal + enemy_mediumarmor - (enemy_air * 2) - enemy_piercing - enemy_siege), 4, 25, 38)
      call BuildUnit(1, TREE_AGES, 50)
      //call BuildUnit(1, hero[1], 80)









































endif
endfunction

//============================================================================
//  build_sequence
//============================================================================
function init_strategy_Ballista takes nothing returns nothing

    call AddHarass(2, 3, DRYAD)
    call AddHarass(2, 2, HUNTRESS)
    set distraction_group = 2
























endfunction
function build_sequence_Ballista takes nothing returns nothing
if tier == 3 then
      call BuildUnit(1, hero[1], 140)
      call BuildUnit(1, hero[2], 130)
      call BuildUnit(1, hero[3], 120)

      call SetBuildReact(10, 0, HUNTRESS, 0, BALLISTA, enemy_unarmored, 4, 8, 50)
      call BuildUnit(12, DRYAD, 55)
      call BuildUnit(4, HUNTRESS, 60)
      call BuildUnit(6, BALLISTA, 60)
      //call BuildUnit(1, hero[1], 80)
      //call BuildUnit(1, hero[2], 60)
      call BuildUnit(1, ZEPPELIN, 50)

      call BuildUpgr(1, UPG_BOLT, 72)
      call BuildUpgr(1, UPG_ABOLISH, 79)























elseif tier == 2 then

      call SetBuildReact(10, 0, HUNTRESS, 0, BALLISTA, enemy_unarmored, 4, 8, 50)
      call BuildUnit(6, DRYAD, 55)
      call BuildUnit(4, HUNTRESS, 60)
      call BuildUnit(5, BALLISTA, 60)
      call BuildUnit(1, TREE_ETERNITY, 10)
      call BuildUnit(1, hero[1], 80)
      call BuildUnit(1, hero[2], 60)
      call BuildUnit(1, ZEPPELIN, 50)

      call BuildUpgr(1, UPG_BOLT, 70)
      call BuildUpgr(1, UPG_ABOLISH, 67)























else
	call BuildUnit(1, hero[1], 150)
      call BuildUnit(1, merc_rush, 60)
      call BuildUnit(10, ARCHER, 50)
      call BuildUnit(6, HUNTRESS, 50)
      call BuildUnit(4, BALLISTA, 50)
      call BuildUnit(1, TREE_AGES, 40)
      //call BuildUnit(1, hero[1], 80)


























endif
endfunction

//============================================================================
//  build_sequence
//============================================================================
function init_strategy_Talon takes nothing returns nothing

    //call AddHarass(2, 4, ARCHER)
    //call AddHarass(2, 3, DRUID_TALON)
    //set distraction_group = 2


































endfunction
function build_sequence_Talon takes nothing returns nothing
if tier == 3 then
      call BuildUnit(1, hero[1], 140)
      call BuildUnit(1, hero[2], 130)
      call BuildUnit(1, hero[3], 120)

      //call BuildUnit(40, DRUID_TALON, 40)
	call BuildUnit(16, DRUID_TALON, 90)
	call BuildUnit(6, HIPPO_RIDER, 110)
	call BuildUnit(10, FAERIE_DRAGON, 100)
      //call BuildUnit(1, hero[1], 80)
      //call BuildUnit(1, hero[2], 70)
      //call BuildUnit(1, hero[3], 60)
      call BuildUpgr(2, UPG_DRUID_TALON, 120)
      call BuildUnit(1, DEN_OF_WONDERS, 120)
      //call BuildUpgr(1, UPG_MARK_TALON, 100)


































elseif tier == 2 then

      call BuildUnit(12, DRUID_TALON, 40)
      call BuildUnit(8, ARCHER, 50)
      call BuildUnit(1, TREE_ETERNITY, 50)
      call BuildUnit(1, hero[1], 80)
      call BuildUnit(1, hero[2], 60)
      call BuildUpgr(1, UPG_DRUID_TALON, 65)




































else
	call BuildUnit(1, hero[1], 150)
      //call SetBuildReact(18, 3, ARCHER, 0, HUNTRESS, (enemy_normal + enemy_mediumarmor - (enemy_air * 2) - enemy_piercing - enemy_siege), 4, 25, 38) 
      //call BuildUnit(1, HUNTRESS, 52)
	call SetBuildReact(21, 3, ARCHER, 0, HUNTRESS, (enemy_normal + enemy_mediumarmor - (enemy_air * 2) - enemy_piercing - enemy_siege), 4, 25, 38)
      call BuildUnit(1, TREE_AGES, 50)
      //call BuildUnit(1, hero[1], 80)


































endif
endfunction

//============================================================================
//  build_sequence
//============================================================================
function init_strategy_HippoChim takes nothing returns nothing

    //call AddHarass(2, 5, ARCHER)
    //set distraction_group = 2













































endfunction
function build_sequence_HippoChim takes nothing returns nothing
if tier == 3 then
      call BuildUnit(1, hero[1], 140)
      call BuildUnit(1, hero[2], 130)
      call BuildUnit(1, hero[3], 120)

      call BuildUnit(4, FAERIE_DRAGON, 50)
      call BuildUnit(4, HIPPO, 50)
	call BuildUnit(3, ARCHER, 50)
      call BuildUnit(6, HIPPO_RIDER, 42)
      call BuildUnit(5, CHIMAERA, 45)
      //call BuildUnit(1, hero[1], 80)
      //call BuildUnit(1, hero[2], 70)
      //call BuildUnit(1, hero[3], 60)
      call BuildUnit(1, DEN_OF_WONDERS, 45)

      //call BuildUpgr(1, UPG_HIPPO_TAME, 54)
      //call BuildUpgr(1, UPG_CHIM_ACID, 58)
      call BuildUpgr(1, UPG_CHIM_ACID, 54)
      call BuildUpgr(1, UPG_BOWS, 52)
      call BuildUpgr(1, UPG_MARKSMAN, 52)













































elseif tier == 2 then

      call BuildUnit(4, ARCHER, 40)
      call BuildUnit(2, HIPPO, 50)
      call BuildUnit(6, HIPPO_RIDER, 40)
      //call BuildUnit(1, TREE_ETERNITY, 35)
      call BuildUnit(1, TREE_ETERNITY, 50)
      //call BuildUnit(1, hero[1], 20)
      //call BuildUnit(1, hero[2], 10)
	call BuildUnit(1, hero[1], 80)
	call BuildUnit(1, hero[2], 60)

      call BuildUnit(1, DEN_OF_WONDERS, 55)

      //call BuildUpgr(1, UPG_HIPPO_TAME, 54)
	call BuildUpgr(1, UPG_BOWS, 50)
















































else
	call BuildUnit(1, hero[1], 150)
      //call SetBuildReact(18, 3, ARCHER, 0, HUNTRESS, (enemy_normal + enemy_mediumarmor - (enemy_air * 2) - enemy_piercing - enemy_siege), 4, 25, 38) 
      //call BuildUnit(1, HUNTRESS, 52)
	call SetBuildReact(21, 3, ARCHER, 0, HUNTRESS, (enemy_normal + enemy_mediumarmor - (enemy_air * 2) - enemy_piercing - enemy_siege), 4, 25, 38)
      call BuildUnit(1, TREE_AGES, 50)
      //call BuildUnit(1, hero[1], 80)















































endif
endfunction

//============================================================================
//  build_sequence
//============================================================================
function init_strategy_DryadChim takes nothing returns nothing

    //call AddHarass(2, 5, ARCHER)
    call AddHarass(2, 3, DRYAD)
    set distraction_group = 2







































endfunction
function build_sequence_DryadChim takes nothing returns nothing
if tier == 3 then
      call BuildUnit(1, hero[1], 140)
      call BuildUnit(1, hero[2], 130)
      call BuildUnit(1, hero[3], 120)

      call BuildUnit(10, DRYAD, 40)
      //call BuildUnit(3, FAERIE_DRAGON, 55)
      //call BuildUnit(10, CHIMAERA, 40)
	call BuildUnit(5, CHIMAERA, 40)
	call BuildUnit(2, MOUNTAIN_GIANT, 45)
      //call BuildUnit(1, hero[1], 80)
      //call BuildUnit(1, hero[2], 70)
      //call BuildUnit(1, hero[3], 60)

      //call BuildUpgr(1, UPG_CHIM_ACID, 60)
      call BuildUpgr(1, UPG_CHIM_ACID, 45)
      call BuildUpgr(1, UPG_ABOLISH, 60)










































elseif tier == 2 then

      call BuildUnit(4, ARCHER, 40)
      //call BuildUnit(4, DRYAD, 46)
	call BuildUnit(8, DRYAD, 40)
      call BuildUnit(1, TREE_ETERNITY, 50)
      //call BuildUnit(1, hero[1], 20)
      //call BuildUnit(1, hero[2], 10)
	call BuildUnit(1, hero[1], 80)
	call BuildUnit(1, hero[2], 60)

      call BuildUpgr(1, UPG_ABOLISH, 50)










































else
	call BuildUnit(1, hero[1], 150)
      //call SetBuildReact(18, 3, ARCHER, 0, HUNTRESS, (enemy_normal + enemy_mediumarmor - (enemy_air * 2) - enemy_piercing - enemy_siege), 4, 25, 38) 
      //call BuildUnit(1, HUNTRESS, 52)
	call SetBuildReact(21, 3, ARCHER, 0, HUNTRESS, (enemy_normal + enemy_mediumarmor - (enemy_air * 2) - enemy_piercing - enemy_siege), 4, 25, 38)
      call BuildUnit(1, TREE_AGES, 50)
      //call BuildUnit(1, hero[1], 80)












































endif
endfunction

//============================================================================
//  build_sequence
//============================================================================
function init_strategy_Archer takes nothing returns nothing

    //call AddHarass(2, 6, ARCHER)
    //set distraction_group = 2
























endfunction
function build_sequence_Archer takes nothing returns nothing
if tier == 3 then
      call BuildUnit(1, hero[1], 140)
      call BuildUnit(1, hero[2], 130)
      call BuildUnit(1, hero[3], 120)

      call SetBuildReact(10, 0, ARCHER, 0, BALLISTA, enemy_unarmored, 4, 8, 50)
      call BuildUnit(31, ARCHER, 10)
      //call BuildUnit(1, hero[1], 80)
      //call BuildUnit(1, hero[2], 75)
      //call BuildUnit(1, hero[3], 70)

      call BuildUpgr(1, UPG_BOWS, 72)
      call BuildUpgr(1, UPG_MARKSMAN, 72)

























elseif tier == 2 then

      call SetBuildReact(10, 0, ARCHER, 0, BALLISTA, enemy_unarmored, 4, 8, 50)
      call BuildUnit(18, ARCHER, 30)
      call BuildUnit(1, TREE_ETERNITY, 10)
      call BuildUnit(1, hero[1], 80)
      call BuildUnit(1, hero[2], 70)

      call BuildUpgr(1, UPG_BOWS, 66)

























else
	call BuildUnit(1, hero[1], 150)
      call SetBuildReact(20, 6, ARCHER, 0, HUNTRESS, (enemy_normal + enemy_mediumarmor - (enemy_air * 2) - enemy_piercing - enemy_siege), 4, 25, 40) 
      call BuildUnit(1, TREE_AGES, 50)
      //call BuildUnit(1, hero[1], 80)



























endif
endfunction

//============================================================================
//  build_sequence
//============================================================================
function init_strategy_DotC takes nothing returns nothing

    //call AddHarass(2, 3, ARCHER)
    //set distraction_group = 2


































endfunction
function build_sequence_DotC takes nothing returns nothing
if tier == 3 then
      call BuildUnit(1, hero[1], 140)
      call BuildUnit(1, hero[2], 130)
      call BuildUnit(1, hero[3], 120)

      call BuildUnit(2, MOUNTAIN_GIANT, 60)
      call BuildUnit(12, DRUID_CLAW, 55)
	call BuildUnit(7, DRYAD, 70)
      //call BuildUnit(1, hero[1], 80)
      //call BuildUnit(1, hero[2], 70)
      //call BuildUnit(1, hero[3], 60)
      call BuildUnit(1, ZEPPELIN, 50)

      call BuildUpgr(2, UPG_DRUID_CLAW, 75)
      call BuildUpgr(1, UPG_MARK_CLAW, 60)
	call BuildUpgr(1, UPG_ABOLISH, 70)



































elseif tier == 2 then

      call BuildUnit(1, MOUNTAIN_GIANT, 50)
      call BuildUnit(6, ARCHER, 44)
	call BuildUnit(6, DRYAD, 45)
      call BuildUnit(4, DRUID_CLAW, 45)
      //call BuildUnit(1, TREE_ETERNITY, 10)
      call BuildUnit(1, TREE_ETERNITY, 80)
      call BuildUnit(1, hero[1], 80)
      call BuildUnit(1, hero[2], 60)

      call BuildUpgr(1, UPG_DRUID_CLAW, 56)
	call BuildUpgr(1, UPG_ABOLISH, 50)



































else
	call BuildUnit(1, hero[1], 150)
      //call SetBuildReact(18, 3, ARCHER, 0, HUNTRESS, (enemy_normal + enemy_mediumarmor - (enemy_air * 2) - enemy_piercing - enemy_siege), 4, 25, 38) 
      //call BuildUnit(1, HUNTRESS, 52)
	call SetBuildReact(21, 3, ARCHER, 0, HUNTRESS, (enemy_normal + enemy_mediumarmor - (enemy_air * 2) - enemy_piercing - enemy_siege), 4, 25, 38)
      call BuildUnit(1, TREE_AGES, 50)
      //call BuildUnit(1, hero[1], 80)




































endif
endfunction





function init_strategy_MassHuntress takes nothing returns nothing
    call AddRBlock(360, 160, 0, 0, ANCIENT_WAR, 60)
    //call AddBlock(1, HUNTERS_HALL, false, 1, MOON_WELL, 60)
    call AddBlock(1, HUNTERS_HALL, false, 1, MOON_WELL, 36)

    call AddHarass(2, 5, HUNTRESS)
    set distraction_group = 2









































endfunction
function build_sequence_MassHuntress takes nothing returns nothing
if tier == 3 then
      call BuildUnit(1, hero[1], 140)
      call BuildUnit(1, hero[2], 130)
      call BuildUnit(1, hero[3], 120)

      call SetBuildReact(10, 0, HUNTRESS, 0, BALLISTA, enemy_unarmored, 4, 8, 50)
      //call SetBuildReact(20, 35, HUNTRESS, 0, ARCHER, enemy_air, 5, 20, 50)
	call SetBuildReact(20, 18, HUNTRESS, 0, ARCHER, enemy_air, 5, 20, 50)
      //call BuildUnit(1, hero[1], 90)
      //call BuildUnit(1, hero[2], 60)
      call BuildUnit(1, DEN_OF_WONDERS, 150)

      call BuildUpgr(1, UPG_GLAIVE, 90)













































elseif tier == 2 then

      call SetBuildReact(10, 0, HUNTRESS, 0, BALLISTA, enemy_unarmored, 4, 8, 50)
      call SetBuildReact(20, 10, HUNTRESS, 0, ARCHER, enemy_air, 5, 20, 50)
      call BuildUnit(1, TREE_ETERNITY, 10)
      call BuildUnit(1, hero[1], 80)
      call BuildUnit(1, hero[2], 60)
	call BuildUpgr(1, UPG_GLAIVE, 70)
      call BuildUpgr(2, UPG_MOON_ARMOR, 30)
      call BuildUnit(1, DEN_OF_WONDERS, 55)













































else
	call BuildUnit(1, hero[1], 150)
      call BuildUnit(1, merc_rush, 60)
      //call SetBuildReact(22, 6, HUNTRESS, 2, ARCHER, (enemy_unarmored + (enemy_lightarmor * 2) + enemy_air + enemy_magic - (enemy_normal * 2)), 3, 18, 20) 
      call SetBuildReact(22, 6, HUNTRESS, 2, ARCHER, (enemy_unarmored + (enemy_lightarmor * 2) + enemy_air + enemy_magic - (enemy_normal * 2)), 3, 18, 26) 
      //call BuildUnit(1, TREE_AGES, 10)
      call BuildUnit(1, TREE_AGES, 50)
      //call BuildUnit(1, hero[1], 80)













































endif
endfunction

function init_strategy_MGDryads takes nothing returns nothing

    call AddHarass(2, 4, DRYAD)
    set distraction_group = 2






































endfunction
function build_sequence_MGDryads takes nothing returns nothing
if tier == 3 then
      call BuildUnit(1, hero[1], 140)
      call BuildUnit(1, hero[2], 130)
      call BuildUnit(1, hero[3], 120)

      //call BuildUnit(6, MOUNTAIN_GIANT, 75)
	call BuildUnit(4, MOUNTAIN_GIANT, 70)
      call BuildUnit(16, DRYAD, 55)
      //call BuildUnit(1, hero[1], 80)
      //call BuildUnit(1, hero[2], 60)
      call BuildUnit(1, DEN_OF_WONDERS, 90)
      call BuildUpgr(1, UPG_ABOLISH, 87)
      call BuildUpgr(1, UPG_HARD_SKIN, 62)
      call BuildUpgr(1, UPG_RESIST_SKIN, 60)







































elseif tier == 2 then
      //call BuildUnit(4, MOUNTAIN_GIANT, 63)
      //call BuildUnit(8, DRYAD, 55)
      	call BuildUnit(2, MOUNTAIN_GIANT, 60)
      	call BuildUnit(8, DRYAD, 60)
	call BuildUnit(3, ARCHER, 55)
      //call BuildUnit(1, TREE_ETERNITY, 20)
      call BuildUnit(1, TREE_ETERNITY, 50)
      call BuildUnit(1, hero[1], 80)
      call BuildUnit(1, hero[2], 60)
      //call BuildUpgr(1, UPG_ABOLISH, 71)
      call BuildUpgr(1, UPG_ABOLISH, 67)








































else
	call BuildUnit(1, hero[1], 150)
      //call SetBuildReact(18, 3, ARCHER, 0, HUNTRESS, (enemy_normal + enemy_mediumarmor - (enemy_air * 2) - enemy_piercing - enemy_siege), 4, 25, 38) 
      //call BuildUnit(1, HUNTRESS, 52)
	call SetBuildReact(21, 3, ARCHER, 0, HUNTRESS, (enemy_normal + enemy_mediumarmor - (enemy_air * 2) - enemy_piercing - enemy_siege), 4, 25, 38)
      call BuildUnit(1, TREE_AGES, 50)
      //call BuildUnit(1, hero[1], 80)










































endif
endfunction

function init_strategy_AoWMix takes nothing returns nothing

    call AddHarass(2, 5, HUNTRESS)
    //call AddHarass(2, 4, ARCHER)
    set distraction_group = 2














































endfunction
function build_sequence_AoWMix takes nothing returns nothing
if tier == 3 then
      call BuildUnit(1, hero[1], 140)
      call BuildUnit(1, hero[2], 130)
      call BuildUnit(1, hero[3], 120)

      call SetBuildReact(20, 2, ARCHER, 3, BALLISTA, (enemy_unarmored + enemy_towers + enemy_casters)/2, 4, 25, 50)
      call SetBuildReact(60, 1, HUNTRESS, 3, ARCHER, (enemy_unarmored + enemy_air - enemy_normal), 4, 25, 50)
      //call BuildUnit(1, hero[1], 90)
      //call BuildUnit(1, hero[2], 60)
      call BuildUpgr(3, UPG_MOON_ARMOR, 20)
      call BuildUpgr(Min((((TownCountDone(ARCHER) + TownCountDone(HUNTRESS))/3)-2),3), UPG_STR_MOON, 50)
      call BuildUpgr(Min(((TownCountDone(ARCHER)/2)-3),1), UPG_MARKSMAN, 40)
      call BuildUpgr(Min(((TownCountDone(ARCHER)/2)-2),1), UPG_BOWS, 50)
      call BuildUpgr(Min(((TownCountDone(HUNTRESS)/2)-2),1), UPG_GLAIVE, 50)
      call BuildUpgr(Min((TownCountDone(BALLISTA)/2),1), UPG_BOLT, 50)












































elseif tier == 2 then

      call SetBuildReact(15, 2, ARCHER, 3, BALLISTA, (enemy_unarmored + enemy_towers + enemy_casters)/2, 4, 25, 50)
      call SetBuildReact(40, 1, HUNTRESS, 3, ARCHER, (enemy_unarmored + enemy_air - enemy_normal), 4, 25, 50)
      call BuildUnit(1, TREE_ETERNITY, 25)
      call BuildUnit(1, hero[1], 80)
      call BuildUnit(1, hero[2], 60)
      call BuildUpgr(2, UPG_MOON_ARMOR, 20)
      //call BuildUpgr(Min((((TownCountDone(ARCHER) + TownCountDone(HUNTRESS))/3)-2),2), UPG_STR_MOON, 50)
      call BuildUpgr(Min((((TownCountDone(ARCHER) + TownCountDone(HUNTRESS))/3)-2),2), UPG_STR_MOON, 35)
      call BuildUpgr(Min(((TownCountDone(ARCHER)/2)-2),1), UPG_BOWS, 50)
	call BuildUpgr(Min(((TownCountDone(HUNTRESS)/2)-2),1), UPG_GLAIVE, 50)
      call BuildUpgr(Min((TownCountDone(BALLISTA)/2),1), UPG_BOLT, 50)












































else
	call BuildUnit(1, hero[1], 150)
      call SetBuildReact(22, 6, HUNTRESS, 3, ARCHER, (enemy_unarmored + (enemy_lightarmor * 2) + enemy_air + enemy_magic - (enemy_normal * 2)), 3, 18, 35) 
      //call BuildUnit(1, TREE_AGES, 35)
      call BuildUnit(1, TREE_AGES, 50)
      //call BuildUnit(1, hero[1], 80)
      call BuildUnit(1, DEN_OF_WONDERS, 15)












































endif
endfunction

function init_strategy_AoLMix takes nothing returns nothing

    call AddHarass(2, 5, DRYAD)
    set distraction_group = 2





















































endfunction
function build_sequence_AoLMix takes nothing returns nothing
if tier == 3 then
      call BuildUnit(1, hero[1], 140)
      call BuildUnit(1, hero[2], 130)
      call BuildUnit(1, hero[3], 120)

      //call SetBuildReact(20, 2, DRYAD, 3, MOUNTAIN_GIANT, (enemy_towers + enemy_piercing - enemy_casters - enemy_normal), 4, 25, 60)
      //call SetBuildReact(60, 1, DRUID_CLAW, 3, DRYAD, (enemy_unarmored + enemy_air + (enemy_magic * 2) + enemy_normal - enemy_piercing - enemy_siege)/3, 4, 25, 40)
	call SetBuildReact(15, 2, DRYAD, 1, MOUNTAIN_GIANT, (enemy_towers + enemy_piercing - enemy_casters - enemy_normal), 4, 25, 60)
	call SetBuildReact(60, 1, DRUID_CLAW, 2, DRYAD, (enemy_unarmored + enemy_air + (enemy_magic * 2) + enemy_normal - enemy_piercing - enemy_siege)/3, 4, 25, 60)
	call BuildUnit(3, CHIMAERA, 58)
      //call BuildUnit(1, hero[1], 90)
      //call BuildUnit(1, hero[2], 60)
      call BuildUpgr(3, UPG_HIDES, 30)
      call BuildUpgr(Min((((TownCountDone(DRYAD)*2) + TownCountDone(DRUID_CLAW) + TownCountDone(MOUNTAIN_GIANT))/5),3), UPG_STR_WILD, 50)
      call BuildUpgr(Min(((TownCountDone(DRYAD)/2)-2),1), UPG_ABOLISH, 50)
      call BuildUpgr(Min((TownCountDone(DRUID_CLAW)/2),2), UPG_DRUID_CLAW, 70)
      call BuildUpgr(Min((TownCountDone(DRUID_CLAW)/4),1), UPG_MARK_CLAW, 40)
      call BuildUpgr(Min((TownCountDone(MOUNTAIN_GIANT)/2),1), UPG_HARD_SKIN, 50)
      call BuildUpgr(Min((TownCountDone(MOUNTAIN_GIANT)/2),1), UPG_RESIST_SKIN, 50)
	call BuildUpgr(1, UPG_CHIM_ACID, 40)
      call BuildUnit(1, DEN_OF_WONDERS, 45)






















































elseif tier == 2 then

      call SetBuildReact(15, 2, DRYAD, 1, MOUNTAIN_GIANT, (enemy_towers + enemy_piercing - enemy_casters - enemy_normal), 4, 25, 60)
      //call SetBuildReact(40, 1, DRUID_CLAW, 2, DRYAD, (enemy_unarmored + enemy_air + (enemy_magic * 2) + enemy_normal - enemy_piercing - enemy_siege)/3, 4, 25, 40)
	call SetBuildReact(40, 1, DRUID_CLAW, 2, DRYAD, (enemy_unarmored + enemy_air + (enemy_magic * 2) + enemy_normal - enemy_piercing - enemy_siege)/3, 4, 25, 60)
	call BuildUnit(3, ARCHER, 50)
      //call BuildUnit(1, TREE_ETERNITY, 35)
      call BuildUnit(1, TREE_ETERNITY, 80)
      call BuildUnit(1, hero[1], 80)
      call BuildUnit(1, hero[2], 60)
      call BuildUpgr(2, UPG_HIDES, 30)
      call BuildUpgr(Min((TownCountDone(DRUID_CLAW)/2),1), UPG_DRUID_CLAW, 70)
      //call BuildUpgr(Min((((TownCountDone(DRYAD)*2) + TownCountDone(DRUID_CLAW) + TownCountDone(MOUNTAIN_GIANT))/5),2), UPG_STR_WILD, 50)
      call BuildUpgr(Min((((TownCountDone(DRYAD)*2) + TownCountDone(DRUID_CLAW) + TownCountDone(MOUNTAIN_GIANT))/5),2), UPG_STR_WILD, 35)
      call BuildUpgr(Min(((TownCountDone(DRYAD)/2)-2),1), UPG_ABOLISH, 50)
      call BuildUnit(1, DEN_OF_WONDERS, 55)






















































else
	call BuildUnit(1, hero[1], 150)
      //call SetBuildReact(18, 3, ARCHER, 0, HUNTRESS, (enemy_normal + enemy_mediumarmor - (enemy_air * 2) - enemy_piercing - enemy_siege), 4, 25, 38) 
      //call BuildUnit(1, HUNTRESS, 52)
	call SetBuildReact(21, 3, ARCHER, 0, HUNTRESS, (enemy_normal + enemy_mediumarmor - (enemy_air * 2) - enemy_piercing - enemy_siege), 4, 25, 38)
      call BuildUnit(1, TREE_AGES, 50)
      //call BuildUnit(1, hero[1], 80)





















































endif
endfunction











function init_strategy_NEAntiTower takes nothing returns nothing



    call AddHarass(2, 2, CHIMAERA)
    set distraction_group = 2































endfunction
function build_sequence_NEAntiTower takes nothing returns nothing
if tier == 3 then
      call BuildUnit(1, hero[1], 140)
      call BuildUnit(1, hero[2], 130)
      call BuildUnit(1, hero[3], 120)

//call BuildUnit(10, BALLISTA, 20)
	call BuildUnit(4, BALLISTA, 30)
call BuildUnit(4, MOUNTAIN_GIANT, 30)
call BuildUnit(7, CHIMAERA, 35)
call BuildUnit(1, TREE_ETERNITY, 20)
      //call BuildUnit(1, hero[1], 90)
      //call BuildUnit(1, hero[2], 60)























elseif tier == 2 then


//call BuildUnit(10, BALLISTA, 20)
	call BuildUnit(4, BALLISTA, 30)
	call BuildUnit(6, HUNTRESS, 30)
call BuildUnit(4, MOUNTAIN_GIANT, 30)
call BuildUnit(1, TREE_ETERNITY, 20)
      call BuildUnit(1, hero[1], 80)
      call BuildUnit(1, hero[2], 60)
























else
	call BuildUnit(1, hero[1], 150)
      call BuildUnit(3, ARCHER, 42)
      call BuildUnit(6, HUNTRESS, 30)
      call BuildUnit(8, BALLISTA, 20)
      call BuildUnit(1, TREE_AGES, 10)
      //call BuildUnit(1, hero[1], 80)
      call BuildUnit(1, DEN_OF_WONDERS, 15)
      call BuildUpgr(Min((TownCountDone(BALLISTA)/2),1), UPG_BOLT, 50)






























endif
endfunction






function init_strategy takes nothing returns nothing
  call InitBlockList()
  call InitRBlockList()
  call InitHarass()
  call global_init_strategy()
  set exp_first_time = p_exp_first_time[profile] + strategy_first_exp_time[strategy]
  set exp_second_time = p_exp_second_time[profile] + strategy_second_exp_time[strategy]
  call ApplyStrategyRaceAggression()

if strategy < 6 then
if strategy < 2 then
if strategy < 1 then
call init_strategy_AoLMix()
 else
call init_strategy_AoWMix()
 endif
 else
if strategy < 4 then
if strategy < 3 then
call init_strategy_Talon()
 else
call init_strategy_HippoChim()
 endif
 else
if strategy < 5 then
call init_strategy_DryadChim()
 else
call init_strategy_DotC()
 endif
 endif
 endif
 else
if strategy < 10 then
if strategy < 8 then
if strategy < 7 then
call init_strategy_Druids()
 else
call init_strategy_Hippo()
 endif
 else
if strategy < 9 then
call init_strategy_MGDryads()
 else
call init_strategy_Ballista()
 endif
 endif
 else
if strategy < 12 then
if strategy < 11 then
call init_strategy_Archer()
 else
call init_strategy_MassHuntress()
 endif
 else
if strategy < 13 then
call init_strategy_MassHD()
 else
if strategy < 14 then
call init_strategy_NEAntiTower()
 else
call init_strategy_NormalElf()
 endif
 endif
 endif
 endif
 endif

endfunction

function build_sequence takes nothing returns nothing
  call global_build_sequence()
  
    if towerrush then
	   call AddBlock(2, GRUNT, true, 0, STRONGHOLD, 1000)
	   call BuildUnit(1, hero[1], 100)
       call BuildUnit(1, race_towerrush_requirement, 98)
    endif
	
  if strategy >= rp_strat_length then
    call cmdBuild()
  else
if strategy < 6 then
if strategy < 2 then
if strategy < 1 then
call build_sequence_AoLMix()
 else
call build_sequence_AoWMix()
 endif
 else
if strategy < 4 then
if strategy < 3 then
call build_sequence_Talon()
 else
call build_sequence_HippoChim()
 endif
 else
if strategy < 5 then
call build_sequence_DryadChim()
 else
call build_sequence_DotC()
 endif
 endif
 endif
 else
if strategy < 10 then
if strategy < 8 then
if strategy < 7 then
call build_sequence_Druids()
 else
call build_sequence_Hippo()
 endif
 else
if strategy < 9 then
call build_sequence_MGDryads()
 else
call build_sequence_Ballista()
 endif
 endif
 else
if strategy < 12 then
if strategy < 11 then
call build_sequence_Archer()
 else
call build_sequence_MassHuntress()
 endif
 else
if strategy < 13 then
call build_sequence_MassHD()
 else
if strategy < 14 then
call build_sequence_NEAntiTower()
 else
call build_sequence_NormalElf()
 endif
 endif
 endif
 endif
 endif
  endif
endfunction

function attack_sequence_all takes nothing returns nothing

     call Trace("Starting Attack Thread Loop") 

  if ver_heroes then
  loop
      exitwhen TownCountDone(hero[1])>0 or desperation_assault
      call Sleep(2 * sleep_multiplier)
  //    call Trace("Attack Loop1")
  endloop
  endif

  call StaggerSleep(0,2)
  loop

    call Trace("RACIAL ATTACK: Retreating")
    loop
      exitwhen not (CaptainRetreating() and isfleeing) or desperation_assault
      exitwhen player_defeated
      call CaptainGoHome()	  // Seems to prevent the fight and flee behaviour. Still occasions where captain seems to be home instantanously when it retreated
      call Sleep(2 * sleep_multiplier)

    //if break_attack then
    //call DisplayToAll("break_attack is true")
    //endif
    endloop
    call Trace("RACIAL ATTACK: exit Retreating")

    call HealArmy()
    //call Trace("RACIAL ATTACK: Army Healed") 
  
    //call HeroHealingBugFix()     // To hopefully fix bugs with attack system as will keep them running
  
    if ver_heroes then
      set creeping_only = AwaitMeleeHeroesAM()
    endif

    exitwhen player_defeated

    if no_attack_allowed then
      call Trace("RACIAL ATTACK: NO ATTACK SETTING IS ON")
    else

      if race_has_ghouls and race_ghouls_attack then
        call setup_ghouls()
        
        set peons_assigned = false
        call Trace("RACIAL ATTACK: Assigning Peons")
        loop
          exitwhen peons_assigned or desperation_assault
          call Sleep(sleep_multiplier)
        endloop
        call Trace("RACIAL ATTACK: exit Assigning Peons")
        call Sleep(2) // Seems this helps make sure we do get the ghouls instead of them going back to wood
    //call FormGroupAM(2)
      endif	

      call Trace("RACIAL ATTACK: waiting for troops")	  
      loop
        exitwhen GetOwnStrength() >= minimum_attack_strength or desperation_assault
        call Sleep(5 * sleep_multiplier)
      endloop
      call Trace("RACIAL ATTACK: exit waiting troops")
      
      call setup_force(false)
      call universal_attack_sequence() 

      set attacking_ghouls = 0
    endif
    
    call Sleep(sleep_multiplier)
  endloop
endfunction

function harvest_gold takes integer townid returns nothing
    if TownHasMine(townid) then
      if TownCountDone(WISP)==5 or TownCountDone(WISP)==6 then
        call HarvestGold(townid,ver_optimal_gold-1)
      else
        call HarvestGold(townid,ver_optimal_gold)
      endif
    endif
endfunction

function peon_assignment takes nothing returns nothing

  call ClearHarvestAI()

  if desperation_assault and TownCountDone(WISP)>0 then
    return
  endif  

  call harvest_gold(0)
  if not race_manual_loading then
    call harvest_gold(1)
    call harvest_gold(2)
    call harvest_gold(3)
  endif

  if race_has_ghouls then
		call HarvestWood(0,Max(TownCountDone(racial_ghoul) - attacking_ghouls, harvesting_ghouls) + TownCountDone(neutral_shredder))
	set peons_assigned = true
  elseif race_manual_loading then
    call HarvestWood(0, 20)
  endif
endfunction

function peon_assignment_all takes nothing returns nothing

  //if race_has_power_build then
    //call TownHallCheck()
  //endif
  
  if (race_has_ghouls and race_ghouls_attack) or race_no_wood_harvest or race_manual_loading then
    call peon_assignment()
  else
    call universal_peon_assignment()
  endif

endfunction

function build_sequence_all takes nothing returns nothing
  local integer x = R2I(I2R(-strat_minimum_time[strategy] * (4 - Min(3, tier)))/(3*sleep_multiplier*Max(difficulty - 1, 1)))
  local integer counter_timer = R2I(I2R(-strat_minimum_time[strategy] * (4 - Min(3, tier)))/(3*sleep_multiplier*Max(difficulty - 1, 1))*2)
  local integer new_tier = 0
  local integer last_counter = -1
  local boolean set_counter = true
  local boolean reportStrategy = false

  call Trace("Starting Build Sequence Loop")
    loop
      exitwhen player_defeated
	  
	  if recalculate_heros then
	      call AMAI_PickMeleeHero()
		  call set_skills()
		  set recalculate_heros = false
	  endif
	  
	  //call Trace("BUILD SEQUENCE: Running Loop")
      call peon_assignment_all()
	  //call Trace("BUILD SEQUENCE: peon_assignment")
      if x > 2 then
        set x = 0
		//call Trace("BUILD SEQUENCE: StrategyChanger")
        call StrategyChanger()
      endif
	  if counter_timer > 0 then
		set chosen_counter = DetermineCounterForce()
		set reportStrategy = true
		set last_counter = chosen_counter
		set set_counter = true
		set counter_timer = R2I(I2R(-strat_minimum_time[strategy] * (4 - Min(3, tier)))/(3*sleep_multiplier*Max(difficulty - 1, 1))*2) 
	  endif

      if last_strategy != strategy then
        set last_strategy = strategy
		set reportStrategy = true
        call SetRaceAggression()
        if strategy <= 49 then
          set x = R2I(I2R(-strat_minimum_time[strategy] * (4 - Min(3, tier)))/(3*sleep_multiplier*Max(difficulty - 1, 1)))
        endif
		//call Trace("BUILD SEQUENCE: InitBuildarray")
        call InitBuildArrayAM()
		//call Trace("BUILD SEQUENCE: init_strategy")
        call init_strategy()
	  endif
	  
	  if reportStrategy then
	    set reportStrategy = false
	    call DisplayToAlliesImportant( GetCurrentStrategyReport() + GetCurrentDynamicReport())
        call DisplayToObserversImportant( GetCurrentStrategyReport() + GetCurrentDynamicReport())
	  endif
	      
      set new_tier = GetTier()
      if tier != new_tier then
        set tier = new_tier
		//call Trace("BUILD SEQUENCE: initbuildarray2")		
        call InitBuildArrayAM()
      endif

	  	//call Trace("BUILD SEQUENCE: build_sequence")
	  call Sleep(0.05)
      call build_sequence()
	  if set_counter == true then 
		call DynamicStrategySelector()
		set set_counter = false
	  endif
      call Sleep(3 * sleep_multiplier)
	  	//call Trace("BUILD SEQUENCE: peon_assignment 2")	  
      call peon_assignment_all()
      call Sleep(3 * sleep_multiplier)
      set x = x + 1
	  set counter_timer = counter_timer + 1
    endloop
endfunction



function main takes nothing returns nothing

	set IsAMAI = true
	set ai_player = Player(GetAiPlayer())
	set home_location = GetPlayerStartLocationLoc(ai_player) // Moved from initAMAI	
	//call InitAiUnits()   // Not actually needed on amai scripts as of course its going to be AMAI
	
	// start
    set tiernum = 3
	
	call Trace("Initing racial units")
    call initRacialUnits()

    set own_race = R_ELF
    
	call Trace("initing global settings")
    call InitGlobalSettings()
    
    set hero1_revive_prio = 200
    set hero2_revive_prio = 180
    set hero3_revive_prio = 150
    set prio_n_inc = 2
    set prio_t_inc = 1
    set prio_q_inc = 2
    set farm_food2 = -4
    set farm_prio = 400
    set peon_prio = 280
    set expa_prio = 250
    set expa_emergency_prio = 500
    set expa_rebuild_prio = 300
    set peon_1_mine_number = 15
    set peon_2_mines_number = 20
    set peon_mines_number = 25
    set min_peon_number_single_mine = 10
    set min_peon_number_double_mine = 15
    set min_peon_number_multi_mine = 20
    set strat_food_persistence = 3
    set relevant_strat_change_number = 3
    set kb_add1 = 8
    set kb_add2 = 9
    set kb_add3 = 3
    set kb_add4 = 10
    set ku_add1 = 4
    set ku_add2 = 7
    set ku_add3 = 8
    set fav_unit_add = 20
    set debug_strategy = -1
    set race_use_fountain = true
    set race_manual_loading = true
    set race_manual_loading_wisp = WISP
    set race_manual_loading_mine = ELF_MINE
    set race_towerrush_available = false
    set race_tower_id = ORC_WATCH_TOWER
    set race_tower_upgrade = 0
    set race_towerrush_requirement = FORGE
    set race_towerrush_probability = 40
    set race_militia_expansion_available = false
    set race_hero_number = 4
    set race_simple_melee = 0
    set race_advanced_melee = 0
    set race_has_ghouls = false
    set race_ghouls_attack = true
    set race_has_power_build = false
    set race_no_wood_harvest = false
    set race_ignore_injured = false
    set race_uses_mine_expansion = false
    set race_uses_shredder = true
    set race_militia_available = false
    set race_militia_max_distance = 1000
    set race_militia_ability = 'Amil'
    set race_militia_hall_ability = 'Amic'
    set race_militia_unitstring = "militia"
    set race_militiaworker_unitstring = "peasant"
    set use_militia_only_on_bigger_threats = false
    set race_ancient_expansion_available = true
    set race_ancient_expansion_probability = 43
    set race_ancient_expansion_strength = 18
    set race_ancient_expansion_help_id = 'earc'
    set race_sell_ziggurats = false
    set race_ziggurat_keep_distance = 1500
    set race_build_farms_front = true
    set race_farms_front_limit = 4
    set race_farms_at_mine = 0
    set race_max_expa_mine_distance = 850
    set race_has_moonwells = true
    set race_towerrush_hero_rush_level = 2
    set race_ancient_expansion_hero_rush_level = 1
    set ghoul_prio = 250
    set race_min_ghouls = 2
    set race_max_ghouls = 5
    call Trace("About to init things")
    call initRacialTraits()
	call Trace("racial traits init done")
    call InitStrats()
	call Trace("init strats")
    call InitAllSkills()
	call Trace("init all skills")
    call InitBuildings()
	call Trace("init buildings")
    call InitAMAI()
	call Trace("init AMAI")
    call InitProfile()
	call Trace("About to choose strategy")	
    call chooseStrategyRP()
    call SmallMapsAdd()
	call removeNonBeginningStrats()
    call display_rp_strat()
	set chosen_counter = DetermineCounterForce()
	set chosen_strategy = choose_strategy()

    set strategy = chosen_strategy
    call SetChatVar("Strategy", GetCurrentStrategyName())
	call Trace("Strategy chosen")	
    call AMAI_PickMeleeHero()
	if race_towerrush_available then
		call CanTowerRush()
	endif
	call Trace("Hero picked")	
	call set_skills()
	call Trace("hero skills set")	
    call SetRaceAggression()
    call init_strategy()
	call Trace("Strategy init")	
    call AMAI(function SkillArraysAM, function build_sequence_all, function attack_sequence_all)
    call Trace("Playing Game")	
	call PlayGameAM()


endfunction