





globals

    constant integer STRAT_BestiaryMix = 0
    constant integer STRAT_BarrackMix = 1
    constant integer STRAT_FastSh = 2
    constant integer STRAT_Wyvern = 3
    constant integer STRAT_AntiPierce = 4
    constant integer STRAT_OAntiTower = 5
    constant integer STRAT_HeadCatapults = 6
    constant integer STRAT_NormalOrc = 7
    constant integer STRAT_HHunters = 8
    constant integer STRAT_VersusHuman = 9
    constant integer STRAT_VersusUndead = 10
    constant integer STRAT_VersusElf = 11
    constant integer STRAT_WyvSh = 12
    constant integer STRAT_GruntCatapults = 13
    constant integer STRAT_AntiAir = 14
    constant integer STRAT_Raiders = 15

    boolean startup     = true


    boolean keep_res    = true

    integer wave        = 1
    boolean peons_assigned = false
    boolean take_all_ghouls_along = false
	
	
endglobals

function InitStratData takes nothing returns nothing
set strategy_name[STRAT_NormalOrc] = "NormalOrc"
set strategy_default_name[STRAT_NormalOrc] = "Normal"
set strategy_default_report[STRAT_NormalOrc] = "I'm going to play normally"
set key_building1[STRAT_NormalOrc] = ORC_BARRACKS
set key_building2[STRAT_NormalOrc] = LODGE
set key_upgrade1[STRAT_NormalOrc] = UPG_ORC_MELEE
set key_upgrade2[STRAT_NormalOrc] = UPG_ORC_ARMOR
set key_unit[STRAT_NormalOrc] = GRUNT
set beginning_strat[STRAT_NormalOrc] = true
set strat_minimum_time[STRAT_NormalOrc] = 30
set strategy_type[STRAT_NormalOrc] = STRATEGY_TYPE_MELEE
set strategy_tier[STRAT_NormalOrc] = 1
set strategy_first_exp_time[STRAT_NormalOrc] = 50
set strategy_second_exp_time[STRAT_NormalOrc] = 140
set strategy_first_hero[STRAT_NormalOrc] = 0
set strategy_first_hero_bonus[STRAT_NormalOrc] = 0
set strategy_second_hero[STRAT_NormalOrc] = 0
set strategy_second_hero_bonus[STRAT_NormalOrc] = 0
set strategy_third_hero[STRAT_NormalOrc] = 0
set strategy_third_hero_bonus[STRAT_NormalOrc] = 0
set strategy_race_aggression[STRAT_NormalOrc * 12 + 0] = 0
set strategy_race_aggression[STRAT_NormalOrc * 12 + 1] = 0
set strategy_race_aggression[STRAT_NormalOrc * 12 + 2] = 0
set strategy_race_aggression[STRAT_NormalOrc * 12 + 3] = 0
set strategy_race_aggression[STRAT_NormalOrc * 12 + 4] = 0
set strategy_race_aggression[STRAT_NormalOrc * 12 + 5] = 0
set strategy_race_aggression[STRAT_NormalOrc * 12 + 6] = 0
set strategy_race_aggression[STRAT_NormalOrc * 12 + 7] = 0
set strategy_race_aggression[STRAT_NormalOrc * 12 + 8] = 0
set strategy_race_aggression[STRAT_NormalOrc * 12 + 9] = 0
set strategy_race_aggression[STRAT_NormalOrc * 12 + 10] = 0
set strategy_race_aggression[STRAT_NormalOrc * 12 + 11] = 0
set strategy_name[STRAT_FastSh] = "FastSh"
set strategy_default_name[STRAT_FastSh] = "Shamans and Taurens"
set strategy_default_report[STRAT_FastSh] = "I'm going casters and taurens"
set key_building1[STRAT_FastSh] = LODGE
set key_building2[STRAT_FastSh] = TOTEM
set key_upgrade1[STRAT_FastSh] = UPG_ORC_PULVERIZE
set key_upgrade2[STRAT_FastSh] = UPG_ORC_SHAMAN
set key_unit[STRAT_FastSh] = TAUREN
set beginning_strat[STRAT_FastSh] = false
set strat_minimum_time[STRAT_FastSh] = 40
set strategy_type[STRAT_FastSh] = STRATEGY_TYPE_CASTER
set strategy_tier[STRAT_FastSh] = 3
set strategy_first_exp_time[STRAT_FastSh] = 100
set strategy_second_exp_time[STRAT_FastSh] = 200
set strategy_first_hero[STRAT_FastSh] = 0
set strategy_first_hero_bonus[STRAT_FastSh] = 0
set strategy_second_hero[STRAT_FastSh] = 0
set strategy_second_hero_bonus[STRAT_FastSh] = 0
set strategy_third_hero[STRAT_FastSh] = 0
set strategy_third_hero_bonus[STRAT_FastSh] = 0
set strategy_race_aggression[STRAT_FastSh * 12 + 0] = 0
set strategy_race_aggression[STRAT_FastSh * 12 + 1] = 0
set strategy_race_aggression[STRAT_FastSh * 12 + 2] = 0
set strategy_race_aggression[STRAT_FastSh * 12 + 3] = 0
set strategy_race_aggression[STRAT_FastSh * 12 + 4] = 0
set strategy_race_aggression[STRAT_FastSh * 12 + 5] = 0
set strategy_race_aggression[STRAT_FastSh * 12 + 6] = 0
set strategy_race_aggression[STRAT_FastSh * 12 + 7] = 0
set strategy_race_aggression[STRAT_FastSh * 12 + 8] = 0
set strategy_race_aggression[STRAT_FastSh * 12 + 9] = 0
set strategy_race_aggression[STRAT_FastSh * 12 + 10] = 0
set strategy_race_aggression[STRAT_FastSh * 12 + 11] = 0
set strategy_name[STRAT_WyvSh] = "WyvSh"
set strategy_default_name[STRAT_WyvSh] = "Shamans and Wyverns"
set strategy_default_report[STRAT_WyvSh] = "I'm going Shamans and Wyverns"
set key_building1[STRAT_WyvSh] = LODGE
set key_building2[STRAT_WyvSh] = BESTIARY
set key_upgrade1[STRAT_WyvSh] = UPG_ORC_RANGED
set key_upgrade2[STRAT_WyvSh] = UPG_ORC_VENOM
set key_unit[STRAT_WyvSh] = WYVERN
set beginning_strat[STRAT_WyvSh] = true
set strat_minimum_time[STRAT_WyvSh] = 50
set strategy_type[STRAT_WyvSh] = STRATEGY_TYPE_AIR
set strategy_tier[STRAT_WyvSh] = 2
set strategy_first_exp_time[STRAT_WyvSh] = 100
set strategy_second_exp_time[STRAT_WyvSh] = 200
set strategy_first_hero[STRAT_WyvSh] = 0
set strategy_first_hero_bonus[STRAT_WyvSh] = 0
set strategy_second_hero[STRAT_WyvSh] = 0
set strategy_second_hero_bonus[STRAT_WyvSh] = 0
set strategy_third_hero[STRAT_WyvSh] = 0
set strategy_third_hero_bonus[STRAT_WyvSh] = 0
set strategy_race_aggression[STRAT_WyvSh * 12 + 0] = 0
set strategy_race_aggression[STRAT_WyvSh * 12 + 1] = 0
set strategy_race_aggression[STRAT_WyvSh * 12 + 2] = 0
set strategy_race_aggression[STRAT_WyvSh * 12 + 3] = 0
set strategy_race_aggression[STRAT_WyvSh * 12 + 4] = 0
set strategy_race_aggression[STRAT_WyvSh * 12 + 5] = 0
set strategy_race_aggression[STRAT_WyvSh * 12 + 6] = 0
set strategy_race_aggression[STRAT_WyvSh * 12 + 7] = 0
set strategy_race_aggression[STRAT_WyvSh * 12 + 8] = 0
set strategy_race_aggression[STRAT_WyvSh * 12 + 9] = 0
set strategy_race_aggression[STRAT_WyvSh * 12 + 10] = 0
set strategy_race_aggression[STRAT_WyvSh * 12 + 11] = 0
set strategy_name[STRAT_HHunters] = "HHunters"
set strategy_default_name[STRAT_HHunters] = "Head Hunters"
set strategy_default_report[STRAT_HHunters] = "I'm going massive head hunters"
set key_building1[STRAT_HHunters] = ORC_BARRACKS
set key_building2[STRAT_HHunters] = FORGE
set key_upgrade1[STRAT_HHunters] = UPG_ORC_RANGED
set key_upgrade2[STRAT_HHunters] = UPG_ORC_BERSERKER
set key_unit[STRAT_HHunters] = HEAD_HUNTER
set beginning_strat[STRAT_HHunters] = false
set strat_minimum_time[STRAT_HHunters] = 30
set strategy_type[STRAT_HHunters] = STRATEGY_TYPE_RANGED
set strategy_tier[STRAT_HHunters] = 1
set strategy_first_exp_time[STRAT_HHunters] = 50
set strategy_second_exp_time[STRAT_HHunters] = 140
set strategy_first_hero[STRAT_HHunters] = 0
set strategy_first_hero_bonus[STRAT_HHunters] = 0
set strategy_second_hero[STRAT_HHunters] = 0
set strategy_second_hero_bonus[STRAT_HHunters] = 0
set strategy_third_hero[STRAT_HHunters] = 0
set strategy_third_hero_bonus[STRAT_HHunters] = 0
set strategy_race_aggression[STRAT_HHunters * 12 + 0] = 0
set strategy_race_aggression[STRAT_HHunters * 12 + 1] = 0
set strategy_race_aggression[STRAT_HHunters * 12 + 2] = 0
set strategy_race_aggression[STRAT_HHunters * 12 + 3] = 0
set strategy_race_aggression[STRAT_HHunters * 12 + 4] = 0
set strategy_race_aggression[STRAT_HHunters * 12 + 5] = 0
set strategy_race_aggression[STRAT_HHunters * 12 + 6] = 0
set strategy_race_aggression[STRAT_HHunters * 12 + 7] = 0
set strategy_race_aggression[STRAT_HHunters * 12 + 8] = 0
set strategy_race_aggression[STRAT_HHunters * 12 + 9] = 0
set strategy_race_aggression[STRAT_HHunters * 12 + 10] = 0
set strategy_race_aggression[STRAT_HHunters * 12 + 11] = 0
set strategy_name[STRAT_Raiders] = "Raiders"
set strategy_default_name[STRAT_Raiders] = "Raiders"
set strategy_default_report[STRAT_Raiders] = "I'm going massive raiders"
set key_building1[STRAT_Raiders] = BESTIARY
set key_building2[STRAT_Raiders] = FORTRESS
set key_upgrade1[STRAT_Raiders] = UPG_ORC_MELEE
set key_upgrade2[STRAT_Raiders] = UPG_ORC_ENSNARE
set key_unit[STRAT_Raiders] = RAIDER
set beginning_strat[STRAT_Raiders] = true
set strat_minimum_time[STRAT_Raiders] = 45
set strategy_type[STRAT_Raiders] = STRATEGY_TYPE_MELEE
set strategy_tier[STRAT_Raiders] = 2
set strategy_first_exp_time[STRAT_Raiders] = 100
set strategy_second_exp_time[STRAT_Raiders] = 200
set strategy_first_hero[STRAT_Raiders] = 0
set strategy_first_hero_bonus[STRAT_Raiders] = 0
set strategy_second_hero[STRAT_Raiders] = 0
set strategy_second_hero_bonus[STRAT_Raiders] = 0
set strategy_third_hero[STRAT_Raiders] = 0
set strategy_third_hero_bonus[STRAT_Raiders] = 0
set strategy_race_aggression[STRAT_Raiders * 12 + 0] = 0
set strategy_race_aggression[STRAT_Raiders * 12 + 1] = 0
set strategy_race_aggression[STRAT_Raiders * 12 + 2] = 0
set strategy_race_aggression[STRAT_Raiders * 12 + 3] = 0
set strategy_race_aggression[STRAT_Raiders * 12 + 4] = 0
set strategy_race_aggression[STRAT_Raiders * 12 + 5] = 0
set strategy_race_aggression[STRAT_Raiders * 12 + 6] = 0
set strategy_race_aggression[STRAT_Raiders * 12 + 7] = 0
set strategy_race_aggression[STRAT_Raiders * 12 + 8] = 0
set strategy_race_aggression[STRAT_Raiders * 12 + 9] = 0
set strategy_race_aggression[STRAT_Raiders * 12 + 10] = 0
set strategy_race_aggression[STRAT_Raiders * 12 + 11] = 0
set strategy_name[STRAT_GruntCatapults] = "GruntCatapults"
set strategy_default_name[STRAT_GruntCatapults] = "Grunts and Catapults"
set strategy_default_report[STRAT_GruntCatapults] = "I'm going grunts and demolishers"
set key_building1[STRAT_GruntCatapults] = ORC_BARRACKS
set key_building2[STRAT_GruntCatapults] = FORTRESS
set key_upgrade1[STRAT_GruntCatapults] = UPG_ORC_BERSERK
set key_upgrade2[STRAT_GruntCatapults] = UPG_ORC_NAPTHA
set key_unit[STRAT_GruntCatapults] = CATAPULT
set beginning_strat[STRAT_GruntCatapults] = true
set strat_minimum_time[STRAT_GruntCatapults] = 50
set strategy_type[STRAT_GruntCatapults] = STRATEGY_TYPE_MELEE
set strategy_tier[STRAT_GruntCatapults] = 2
set strategy_first_exp_time[STRAT_GruntCatapults] = 50
set strategy_second_exp_time[STRAT_GruntCatapults] = 140
set strategy_first_hero[STRAT_GruntCatapults] = 0
set strategy_first_hero_bonus[STRAT_GruntCatapults] = 0
set strategy_second_hero[STRAT_GruntCatapults] = 0
set strategy_second_hero_bonus[STRAT_GruntCatapults] = 0
set strategy_third_hero[STRAT_GruntCatapults] = 0
set strategy_third_hero_bonus[STRAT_GruntCatapults] = 0
set strategy_race_aggression[STRAT_GruntCatapults * 12 + 0] = 0
set strategy_race_aggression[STRAT_GruntCatapults * 12 + 1] = 0
set strategy_race_aggression[STRAT_GruntCatapults * 12 + 2] = 0
set strategy_race_aggression[STRAT_GruntCatapults * 12 + 3] = 0
set strategy_race_aggression[STRAT_GruntCatapults * 12 + 4] = 0
set strategy_race_aggression[STRAT_GruntCatapults * 12 + 5] = 0
set strategy_race_aggression[STRAT_GruntCatapults * 12 + 6] = 0
set strategy_race_aggression[STRAT_GruntCatapults * 12 + 7] = 0
set strategy_race_aggression[STRAT_GruntCatapults * 12 + 8] = 0
set strategy_race_aggression[STRAT_GruntCatapults * 12 + 9] = 0
set strategy_race_aggression[STRAT_GruntCatapults * 12 + 10] = 0
set strategy_race_aggression[STRAT_GruntCatapults * 12 + 11] = 0
set strategy_name[STRAT_HeadCatapults] = "HeadCatapults"
set strategy_default_name[STRAT_HeadCatapults] = "Head hunters and Catapults"
set strategy_default_report[STRAT_HeadCatapults] = "I'm going headhunters and demolishers"
set key_building1[STRAT_HeadCatapults] = ORC_BARRACKS
set key_building2[STRAT_HeadCatapults] = FORGE
set key_upgrade1[STRAT_HeadCatapults] = UPG_ORC_BERSERKER
set key_upgrade2[STRAT_HeadCatapults] = UPG_ORC_NAPTHA
set key_unit[STRAT_HeadCatapults] = HEAD_HUNTER
set beginning_strat[STRAT_HeadCatapults] = false
set strat_minimum_time[STRAT_HeadCatapults] = 35
set strategy_type[STRAT_HeadCatapults] = STRATEGY_TYPE_RANGED
set strategy_tier[STRAT_HeadCatapults] = 2
set strategy_first_exp_time[STRAT_HeadCatapults] = 50
set strategy_second_exp_time[STRAT_HeadCatapults] = 140
set strategy_first_hero[STRAT_HeadCatapults] = 0
set strategy_first_hero_bonus[STRAT_HeadCatapults] = 0
set strategy_second_hero[STRAT_HeadCatapults] = 0
set strategy_second_hero_bonus[STRAT_HeadCatapults] = 0
set strategy_third_hero[STRAT_HeadCatapults] = 0
set strategy_third_hero_bonus[STRAT_HeadCatapults] = 0
set strategy_race_aggression[STRAT_HeadCatapults * 12 + 0] = 0
set strategy_race_aggression[STRAT_HeadCatapults * 12 + 1] = 0
set strategy_race_aggression[STRAT_HeadCatapults * 12 + 2] = 0
set strategy_race_aggression[STRAT_HeadCatapults * 12 + 3] = 0
set strategy_race_aggression[STRAT_HeadCatapults * 12 + 4] = 0
set strategy_race_aggression[STRAT_HeadCatapults * 12 + 5] = 0
set strategy_race_aggression[STRAT_HeadCatapults * 12 + 6] = 0
set strategy_race_aggression[STRAT_HeadCatapults * 12 + 7] = 0
set strategy_race_aggression[STRAT_HeadCatapults * 12 + 8] = 0
set strategy_race_aggression[STRAT_HeadCatapults * 12 + 9] = 0
set strategy_race_aggression[STRAT_HeadCatapults * 12 + 10] = 0
set strategy_race_aggression[STRAT_HeadCatapults * 12 + 11] = 0
set strategy_name[STRAT_Wyvern] = "Wyvern"
set strategy_default_name[STRAT_Wyvern] = "Mass Wyvern"
set strategy_default_report[STRAT_Wyvern] = "I'm going massive wyverns"
set key_building1[STRAT_Wyvern] = BESTIARY
set key_building2[STRAT_Wyvern] = BESTIARY
set key_upgrade1[STRAT_Wyvern] = UPG_ORC_RANGED
set key_upgrade2[STRAT_Wyvern] = UPG_ORC_VENOM
set key_unit[STRAT_Wyvern] = WYVERN
set beginning_strat[STRAT_Wyvern] = true
set strat_minimum_time[STRAT_Wyvern] = 50
set strategy_type[STRAT_Wyvern] = STRATEGY_TYPE_MELEE
set strategy_tier[STRAT_Wyvern] = 2
set strategy_first_exp_time[STRAT_Wyvern] = 80
set strategy_second_exp_time[STRAT_Wyvern] = 160
set strategy_first_hero[STRAT_Wyvern] = FAR_SEER
set strategy_first_hero_bonus[STRAT_Wyvern] = 30
set strategy_second_hero[STRAT_Wyvern] = SHADOW_HUNTER
set strategy_second_hero_bonus[STRAT_Wyvern] = 15
set strategy_third_hero[STRAT_Wyvern] = 0
set strategy_third_hero_bonus[STRAT_Wyvern] = 0
set strategy_race_aggression[STRAT_Wyvern * 12 + 0] = -5
set strategy_race_aggression[STRAT_Wyvern * 12 + 1] = 7
set strategy_race_aggression[STRAT_Wyvern * 12 + 2] = 10
set strategy_race_aggression[STRAT_Wyvern * 12 + 3] = -5
set strategy_race_aggression[STRAT_Wyvern * 12 + 4] = 10
set strategy_race_aggression[STRAT_Wyvern * 12 + 5] = 7
set strategy_race_aggression[STRAT_Wyvern * 12 + 6] = -5
set strategy_race_aggression[STRAT_Wyvern * 12 + 7] = 10
set strategy_race_aggression[STRAT_Wyvern * 12 + 8] = 7
set strategy_race_aggression[STRAT_Wyvern * 12 + 9] = -5
set strategy_race_aggression[STRAT_Wyvern * 12 + 10] = 10
set strategy_race_aggression[STRAT_Wyvern * 12 + 11] = 7
set strategy_name[STRAT_BarrackMix] = "BarrackMix"
set strategy_default_name[STRAT_BarrackMix] = "Barrack Mix"
set strategy_default_report[STRAT_BarrackMix] = "I'm mixing units from barrack."
set key_building1[STRAT_BarrackMix] = ORC_BARRACKS
set key_building2[STRAT_BarrackMix] = ORC_BARRACKS
set key_upgrade1[STRAT_BarrackMix] = UPG_ORC_MELEE
set key_upgrade2[STRAT_BarrackMix] = UPG_ORC_ARMOR
set key_unit[STRAT_BarrackMix] = GRUNT
set beginning_strat[STRAT_BarrackMix] = true
set strat_minimum_time[STRAT_BarrackMix] = 70
set strategy_type[STRAT_BarrackMix] = STRATEGY_TYPE_MELEE
set strategy_tier[STRAT_BarrackMix] = 1
set strategy_first_exp_time[STRAT_BarrackMix] = 50
set strategy_second_exp_time[STRAT_BarrackMix] = 140
set strategy_first_hero[STRAT_BarrackMix] = FAR_SEER
set strategy_first_hero_bonus[STRAT_BarrackMix] = 30
set strategy_second_hero[STRAT_BarrackMix] = 0
set strategy_second_hero_bonus[STRAT_BarrackMix] = 0
set strategy_third_hero[STRAT_BarrackMix] = 0
set strategy_third_hero_bonus[STRAT_BarrackMix] = 0
set strategy_race_aggression[STRAT_BarrackMix * 12 + 0] = 0
set strategy_race_aggression[STRAT_BarrackMix * 12 + 1] = 0
set strategy_race_aggression[STRAT_BarrackMix * 12 + 2] = 0
set strategy_race_aggression[STRAT_BarrackMix * 12 + 3] = 0
set strategy_race_aggression[STRAT_BarrackMix * 12 + 4] = 0
set strategy_race_aggression[STRAT_BarrackMix * 12 + 5] = 0
set strategy_race_aggression[STRAT_BarrackMix * 12 + 6] = 0
set strategy_race_aggression[STRAT_BarrackMix * 12 + 7] = 0
set strategy_race_aggression[STRAT_BarrackMix * 12 + 8] = 0
set strategy_race_aggression[STRAT_BarrackMix * 12 + 9] = 0
set strategy_race_aggression[STRAT_BarrackMix * 12 + 10] = 0
set strategy_race_aggression[STRAT_BarrackMix * 12 + 11] = 0
set strategy_name[STRAT_BestiaryMix] = "BestiaryMix"
set strategy_default_name[STRAT_BestiaryMix] = "Bestiary Mix"
set strategy_default_report[STRAT_BestiaryMix] = "I'm mixing units from bestiary"
set key_building1[STRAT_BestiaryMix] = BESTIARY
set key_building2[STRAT_BestiaryMix] = BESTIARY
set key_upgrade1[STRAT_BestiaryMix] = UPG_ORC_RANGED
set key_upgrade2[STRAT_BestiaryMix] = UPG_ORC_MELEE
set key_unit[STRAT_BestiaryMix] = WYVERN
set beginning_strat[STRAT_BestiaryMix] = false
set strat_minimum_time[STRAT_BestiaryMix] = 60
set strategy_type[STRAT_BestiaryMix] = STRATEGY_TYPE_RANGED
set strategy_tier[STRAT_BestiaryMix] = 3
set strategy_first_exp_time[STRAT_BestiaryMix] = 50
set strategy_second_exp_time[STRAT_BestiaryMix] = 140
set strategy_first_hero[STRAT_BestiaryMix] = FAR_SEER
set strategy_first_hero_bonus[STRAT_BestiaryMix] = 30
set strategy_second_hero[STRAT_BestiaryMix] = 0
set strategy_second_hero_bonus[STRAT_BestiaryMix] = 0
set strategy_third_hero[STRAT_BestiaryMix] = 0
set strategy_third_hero_bonus[STRAT_BestiaryMix] = 0
set strategy_race_aggression[STRAT_BestiaryMix * 12 + 0] = 0
set strategy_race_aggression[STRAT_BestiaryMix * 12 + 1] = 0
set strategy_race_aggression[STRAT_BestiaryMix * 12 + 2] = 0
set strategy_race_aggression[STRAT_BestiaryMix * 12 + 3] = 0
set strategy_race_aggression[STRAT_BestiaryMix * 12 + 4] = 0
set strategy_race_aggression[STRAT_BestiaryMix * 12 + 5] = 0
set strategy_race_aggression[STRAT_BestiaryMix * 12 + 6] = 0
set strategy_race_aggression[STRAT_BestiaryMix * 12 + 7] = 0
set strategy_race_aggression[STRAT_BestiaryMix * 12 + 8] = 0
set strategy_race_aggression[STRAT_BestiaryMix * 12 + 9] = 0
set strategy_race_aggression[STRAT_BestiaryMix * 12 + 10] = 0
set strategy_race_aggression[STRAT_BestiaryMix * 12 + 11] = 0
set strategy_name[STRAT_AntiPierce] = "AntiPierce"
set strategy_default_name[STRAT_AntiPierce] = "Anti Pierce"
set strategy_default_report[STRAT_AntiPierce] = "I'm going melee units and raiders"
set key_building1[STRAT_AntiPierce] = ORC_BARRACKS
set key_building2[STRAT_AntiPierce] = TOTEM
set key_upgrade1[STRAT_AntiPierce] = 0
set key_upgrade2[STRAT_AntiPierce] = 0
set key_unit[STRAT_AntiPierce] = TAUREN
set beginning_strat[STRAT_AntiPierce] = false
set strat_minimum_time[STRAT_AntiPierce] = 20
set strategy_type[STRAT_AntiPierce] = STRATEGY_TYPE_MELEE
set strategy_tier[STRAT_AntiPierce] = 2
set strategy_first_exp_time[STRAT_AntiPierce] = 60
set strategy_second_exp_time[STRAT_AntiPierce] = 180
set strategy_first_hero[STRAT_AntiPierce] = 0
set strategy_first_hero_bonus[STRAT_AntiPierce] = 0
set strategy_second_hero[STRAT_AntiPierce] = 0
set strategy_second_hero_bonus[STRAT_AntiPierce] = 0
set strategy_third_hero[STRAT_AntiPierce] = 0
set strategy_third_hero_bonus[STRAT_AntiPierce] = 0
set strategy_race_aggression[STRAT_AntiPierce * 12 + 0] = 0
set strategy_race_aggression[STRAT_AntiPierce * 12 + 1] = 0
set strategy_race_aggression[STRAT_AntiPierce * 12 + 2] = 0
set strategy_race_aggression[STRAT_AntiPierce * 12 + 3] = 0
set strategy_race_aggression[STRAT_AntiPierce * 12 + 4] = 0
set strategy_race_aggression[STRAT_AntiPierce * 12 + 5] = 0
set strategy_race_aggression[STRAT_AntiPierce * 12 + 6] = 0
set strategy_race_aggression[STRAT_AntiPierce * 12 + 7] = 0
set strategy_race_aggression[STRAT_AntiPierce * 12 + 8] = 0
set strategy_race_aggression[STRAT_AntiPierce * 12 + 9] = 0
set strategy_race_aggression[STRAT_AntiPierce * 12 + 10] = 0
set strategy_race_aggression[STRAT_AntiPierce * 12 + 11] = 0
set strategy_name[STRAT_AntiAir] = "AntiAir"
set strategy_default_name[STRAT_AntiAir] = "Batriders"
set strategy_default_report[STRAT_AntiAir] = "I'm a massing batriders"
set key_building1[STRAT_AntiAir] = ORC_BARRACKS
set key_building2[STRAT_AntiAir] = BESTIARY
set key_upgrade1[STRAT_AntiAir] = 0
set key_upgrade2[STRAT_AntiAir] = 0
set key_unit[STRAT_AntiAir] = BATRIDER
set beginning_strat[STRAT_AntiAir] = false
set strat_minimum_time[STRAT_AntiAir] = 20
set strategy_type[STRAT_AntiAir] = STRATEGY_TYPE_RANGED
set strategy_tier[STRAT_AntiAir] = 2
set strategy_first_exp_time[STRAT_AntiAir] = 60
set strategy_second_exp_time[STRAT_AntiAir] = 180
set strategy_first_hero[STRAT_AntiAir] = 0
set strategy_first_hero_bonus[STRAT_AntiAir] = 0
set strategy_second_hero[STRAT_AntiAir] = 0
set strategy_second_hero_bonus[STRAT_AntiAir] = 0
set strategy_third_hero[STRAT_AntiAir] = 0
set strategy_third_hero_bonus[STRAT_AntiAir] = 0
set strategy_race_aggression[STRAT_AntiAir * 12 + 0] = 0
set strategy_race_aggression[STRAT_AntiAir * 12 + 1] = 0
set strategy_race_aggression[STRAT_AntiAir * 12 + 2] = 0
set strategy_race_aggression[STRAT_AntiAir * 12 + 3] = 0
set strategy_race_aggression[STRAT_AntiAir * 12 + 4] = 0
set strategy_race_aggression[STRAT_AntiAir * 12 + 5] = 0
set strategy_race_aggression[STRAT_AntiAir * 12 + 6] = 0
set strategy_race_aggression[STRAT_AntiAir * 12 + 7] = 0
set strategy_race_aggression[STRAT_AntiAir * 12 + 8] = 0
set strategy_race_aggression[STRAT_AntiAir * 12 + 9] = 0
set strategy_race_aggression[STRAT_AntiAir * 12 + 10] = 0
set strategy_race_aggression[STRAT_AntiAir * 12 + 11] = 0
set strategy_name[STRAT_OAntiTower] = "OAntiTower"
set strategy_default_name[STRAT_OAntiTower] = "Anti Tower"
set strategy_default_report[STRAT_OAntiTower] = "I'm massing seige equipment"
set key_building1[STRAT_OAntiTower] = ORC_BARRACKS
set key_building2[STRAT_OAntiTower] = BESTIARY
set key_upgrade1[STRAT_OAntiTower] = 0
set key_upgrade2[STRAT_OAntiTower] = 0
set key_unit[STRAT_OAntiTower] = CATAPULT
set beginning_strat[STRAT_OAntiTower] = false
set strat_minimum_time[STRAT_OAntiTower] = 20
set strategy_type[STRAT_OAntiTower] = STRATEGY_TYPE_RANGED
set strategy_tier[STRAT_OAntiTower] = 2
set strategy_first_exp_time[STRAT_OAntiTower] = 60
set strategy_second_exp_time[STRAT_OAntiTower] = 180
set strategy_first_hero[STRAT_OAntiTower] = 0
set strategy_first_hero_bonus[STRAT_OAntiTower] = 0
set strategy_second_hero[STRAT_OAntiTower] = 0
set strategy_second_hero_bonus[STRAT_OAntiTower] = 0
set strategy_third_hero[STRAT_OAntiTower] = 0
set strategy_third_hero_bonus[STRAT_OAntiTower] = 0
set strategy_race_aggression[STRAT_OAntiTower * 12 + 0] = 0
set strategy_race_aggression[STRAT_OAntiTower * 12 + 1] = 0
set strategy_race_aggression[STRAT_OAntiTower * 12 + 2] = 0
set strategy_race_aggression[STRAT_OAntiTower * 12 + 3] = 0
set strategy_race_aggression[STRAT_OAntiTower * 12 + 4] = 0
set strategy_race_aggression[STRAT_OAntiTower * 12 + 5] = 0
set strategy_race_aggression[STRAT_OAntiTower * 12 + 6] = 0
set strategy_race_aggression[STRAT_OAntiTower * 12 + 7] = 0
set strategy_race_aggression[STRAT_OAntiTower * 12 + 8] = 0
set strategy_race_aggression[STRAT_OAntiTower * 12 + 9] = 0
set strategy_race_aggression[STRAT_OAntiTower * 12 + 10] = 0
set strategy_race_aggression[STRAT_OAntiTower * 12 + 11] = 0
set strategy_name[STRAT_VersusHuman] = "VersusHuman"
set strategy_default_name[STRAT_VersusHuman] = "Raiders and Spirtwalkers"
set strategy_default_report[STRAT_VersusHuman] = "I'm going raiders and spirit walkers"
set key_building1[STRAT_VersusHuman] = BESTIARY
set key_building2[STRAT_VersusHuman] = LODGE
set key_upgrade1[STRAT_VersusHuman] = UPG_ORC_ENSNARE
set key_upgrade2[STRAT_VersusHuman] = UPG_ORC_SWALKER
set key_unit[STRAT_VersusHuman] = RAIDER
set beginning_strat[STRAT_VersusHuman] = true
set strat_minimum_time[STRAT_VersusHuman] = 50
set strategy_type[STRAT_VersusHuman] = STRATEGY_TYPE_MELEE
set strategy_tier[STRAT_VersusHuman] = 2
set strategy_first_exp_time[STRAT_VersusHuman] = 100
set strategy_second_exp_time[STRAT_VersusHuman] = 220
set strategy_first_hero[STRAT_VersusHuman] = FAR_SEER
set strategy_first_hero_bonus[STRAT_VersusHuman] = 30
set strategy_second_hero[STRAT_VersusHuman] = TAUREN_CHIEF
set strategy_second_hero_bonus[STRAT_VersusHuman] = 15
set strategy_third_hero[STRAT_VersusHuman] = 0
set strategy_third_hero_bonus[STRAT_VersusHuman] = 0
set strategy_race_aggression[STRAT_VersusHuman * 12 + 0] = 0
set strategy_race_aggression[STRAT_VersusHuman * 12 + 1] = 0
set strategy_race_aggression[STRAT_VersusHuman * 12 + 2] = 0
set strategy_race_aggression[STRAT_VersusHuman * 12 + 3] = 0
set strategy_race_aggression[STRAT_VersusHuman * 12 + 4] = 0
set strategy_race_aggression[STRAT_VersusHuman * 12 + 5] = 0
set strategy_race_aggression[STRAT_VersusHuman * 12 + 6] = 0
set strategy_race_aggression[STRAT_VersusHuman * 12 + 7] = 0
set strategy_race_aggression[STRAT_VersusHuman * 12 + 8] = 0
set strategy_race_aggression[STRAT_VersusHuman * 12 + 9] = 0
set strategy_race_aggression[STRAT_VersusHuman * 12 + 10] = 0
set strategy_race_aggression[STRAT_VersusHuman * 12 + 11] = 0
set strategy_name[STRAT_VersusUndead] = "VersusUndead"
set strategy_default_name[STRAT_VersusUndead] = "Grunts and Beastiary"
set strategy_default_report[STRAT_VersusUndead] = "I'm going Grunts and a mix from the beastiary"
set key_building1[STRAT_VersusUndead] = ORC_BARRACKS
set key_building2[STRAT_VersusUndead] = BESTIARY
set key_upgrade1[STRAT_VersusUndead] = UPG_ORC_ENSNARE
set key_upgrade2[STRAT_VersusUndead] = UPG_ORC_WAR_DRUMS
set key_unit[STRAT_VersusUndead] = GRUNT
set beginning_strat[STRAT_VersusUndead] = true
set strat_minimum_time[STRAT_VersusUndead] = 50
set strategy_type[STRAT_VersusUndead] = STRATEGY_TYPE_MELEE
set strategy_tier[STRAT_VersusUndead] = 2
set strategy_first_exp_time[STRAT_VersusUndead] = 100
set strategy_second_exp_time[STRAT_VersusUndead] = 220
set strategy_first_hero[STRAT_VersusUndead] = FAR_SEER
set strategy_first_hero_bonus[STRAT_VersusUndead] = 30
set strategy_second_hero[STRAT_VersusUndead] = TAUREN_CHIEF
set strategy_second_hero_bonus[STRAT_VersusUndead] = 15
set strategy_third_hero[STRAT_VersusUndead] = 0
set strategy_third_hero_bonus[STRAT_VersusUndead] = 0
set strategy_race_aggression[STRAT_VersusUndead * 12 + 0] = 0
set strategy_race_aggression[STRAT_VersusUndead * 12 + 1] = 0
set strategy_race_aggression[STRAT_VersusUndead * 12 + 2] = 0
set strategy_race_aggression[STRAT_VersusUndead * 12 + 3] = 0
set strategy_race_aggression[STRAT_VersusUndead * 12 + 4] = 0
set strategy_race_aggression[STRAT_VersusUndead * 12 + 5] = 0
set strategy_race_aggression[STRAT_VersusUndead * 12 + 6] = 0
set strategy_race_aggression[STRAT_VersusUndead * 12 + 7] = 0
set strategy_race_aggression[STRAT_VersusUndead * 12 + 8] = 0
set strategy_race_aggression[STRAT_VersusUndead * 12 + 9] = 0
set strategy_race_aggression[STRAT_VersusUndead * 12 + 10] = 0
set strategy_race_aggression[STRAT_VersusUndead * 12 + 11] = 0
set strategy_name[STRAT_VersusElf] = "VersusElf"
set strategy_default_name[STRAT_VersusElf] = "Raiders and Demolishers"
set strategy_default_report[STRAT_VersusElf] = "I'm going raiders and Demolishers"
set key_building1[STRAT_VersusElf] = BESTIARY
set key_building2[STRAT_VersusElf] = 0
set key_upgrade1[STRAT_VersusElf] = UPG_ORC_ENSNARE
set key_upgrade2[STRAT_VersusElf] = UPG_ORC_NAPTHA
set key_unit[STRAT_VersusElf] = RAIDER
set beginning_strat[STRAT_VersusElf] = true
set strat_minimum_time[STRAT_VersusElf] = 50
set strategy_type[STRAT_VersusElf] = STRATEGY_TYPE_MELEE
set strategy_tier[STRAT_VersusElf] = 1
set strategy_first_exp_time[STRAT_VersusElf] = 100
set strategy_second_exp_time[STRAT_VersusElf] = 200
set strategy_first_hero[STRAT_VersusElf] = BLADE_MASTER
set strategy_first_hero_bonus[STRAT_VersusElf] = 30
set strategy_second_hero[STRAT_VersusElf] = TAUREN_CHIEF
set strategy_second_hero_bonus[STRAT_VersusElf] = 15
set strategy_third_hero[STRAT_VersusElf] = 0
set strategy_third_hero_bonus[STRAT_VersusElf] = 0
set strategy_race_aggression[STRAT_VersusElf * 12 + 0] = 0
set strategy_race_aggression[STRAT_VersusElf * 12 + 1] = 0
set strategy_race_aggression[STRAT_VersusElf * 12 + 2] = 0
set strategy_race_aggression[STRAT_VersusElf * 12 + 3] = 0
set strategy_race_aggression[STRAT_VersusElf * 12 + 4] = 0
set strategy_race_aggression[STRAT_VersusElf * 12 + 5] = 0
set strategy_race_aggression[STRAT_VersusElf * 12 + 6] = 0
set strategy_race_aggression[STRAT_VersusElf * 12 + 7] = 0
set strategy_race_aggression[STRAT_VersusElf * 12 + 8] = 0
set strategy_race_aggression[STRAT_VersusElf * 12 + 9] = 0
set strategy_race_aggression[STRAT_VersusElf * 12 + 10] = 0
set strategy_race_aggression[STRAT_VersusElf * 12 + 11] = 0
set rp_strat_length = 16
endfunction

function InitStrats takes nothing returns nothing
  call InitStratData()
  call CommonStratsDefault()
endfunction

function InitAllSkills takes nothing returns nothing
  set allskills[721] = CRITICAL_STRIKE
  set allskills[722] = WIND_WALK
  set allskills[723] = WIND_WALK
  set allskills[724] = CRITICAL_STRIKE
  set allskills[725] = CRITICAL_STRIKE
  set allskills[726] = BLADE_STORM
  set allskills[727] = WIND_WALK
  set allskills[728] = MIRROR_IMAGE
  set allskills[729] = MIRROR_IMAGE
  set allskills[730] = MIRROR_IMAGE

  set allskills[731] = WIND_WALK
  set allskills[732] = CRITICAL_STRIKE
  set allskills[733] = WIND_WALK
  set allskills[734] = CRITICAL_STRIKE
  set allskills[735] = WIND_WALK
  set allskills[736] = BLADE_STORM
  set allskills[737] = CRITICAL_STRIKE
  set allskills[738] = MIRROR_IMAGE
  set allskills[739] = MIRROR_IMAGE
  set allskills[740] = MIRROR_IMAGE

  set allskills[741] = CRITICAL_STRIKE
  set allskills[742] = WIND_WALK
  set allskills[743] = CRITICAL_STRIKE
  set allskills[744] = WIND_WALK
  set allskills[745] = CRITICAL_STRIKE
  set allskills[746] = BLADE_STORM
  set allskills[747] = WIND_WALK
  set allskills[748] = MIRROR_IMAGE
  set allskills[749] = MIRROR_IMAGE
  set allskills[750] = MIRROR_IMAGE

  set allskills[751] = CRITICAL_STRIKE
  set allskills[752] = WIND_WALK
  set allskills[753] = WIND_WALK
  set allskills[754] = CRITICAL_STRIKE
  set allskills[755] = CRITICAL_STRIKE
  set allskills[756] = BLADE_STORM
  set allskills[757] = WIND_WALK
  set allskills[758] = MIRROR_IMAGE
  set allskills[759] = MIRROR_IMAGE
  set allskills[760] = MIRROR_IMAGE

  set allskills[761] = WIND_WALK
  set allskills[762] = CRITICAL_STRIKE
  set allskills[763] = WIND_WALK
  set allskills[764] = CRITICAL_STRIKE
  set allskills[765] = WIND_WALK
  set allskills[766] = BLADE_STORM
  set allskills[767] = CRITICAL_STRIKE
  set allskills[768] = MIRROR_IMAGE
  set allskills[769] = MIRROR_IMAGE
  set allskills[770] = MIRROR_IMAGE

  set allskills[771] = CRITICAL_STRIKE
  set allskills[772] = WIND_WALK
  set allskills[773] = CRITICAL_STRIKE
  set allskills[774] = WIND_WALK
  set allskills[775] = CRITICAL_STRIKE
  set allskills[776] = BLADE_STORM
  set allskills[777] = WIND_WALK
  set allskills[778] = MIRROR_IMAGE
  set allskills[779] = MIRROR_IMAGE
  set allskills[780] = MIRROR_IMAGE

  set allskills[781] = CRITICAL_STRIKE
  set allskills[782] = WIND_WALK
  set allskills[783] = WIND_WALK
  set allskills[784] = CRITICAL_STRIKE
  set allskills[785] = CRITICAL_STRIKE
  set allskills[786] = BLADE_STORM
  set allskills[787] = WIND_WALK
  set allskills[788] = MIRROR_IMAGE
  set allskills[789] = MIRROR_IMAGE
  set allskills[790] = MIRROR_IMAGE

  set allskills[791] = WIND_WALK
  set allskills[792] = CRITICAL_STRIKE
  set allskills[793] = WIND_WALK
  set allskills[794] = CRITICAL_STRIKE
  set allskills[795] = WIND_WALK
  set allskills[796] = BLADE_STORM
  set allskills[797] = CRITICAL_STRIKE
  set allskills[798] = MIRROR_IMAGE
  set allskills[799] = MIRROR_IMAGE
  set allskills[800] = MIRROR_IMAGE

  set allskills[801] = CRITICAL_STRIKE
  set allskills[802] = WIND_WALK
  set allskills[803] = CRITICAL_STRIKE
  set allskills[804] = WIND_WALK
  set allskills[805] = CRITICAL_STRIKE
  set allskills[806] = BLADE_STORM
  set allskills[807] = WIND_WALK
  set allskills[808] = MIRROR_IMAGE
  set allskills[809] = MIRROR_IMAGE
  set allskills[810] = MIRROR_IMAGE

  set allskills[811] = SPIRIT_WOLF
  set allskills[812] = CHAIN_LIGHTNING
  set allskills[813] = SPIRIT_WOLF
  set allskills[814] = CHAIN_LIGHTNING
  set allskills[815] = SPIRIT_WOLF
  set allskills[816] = EARTHQUAKE
  set allskills[817] = CHAIN_LIGHTNING
  set allskills[818] = FAR_SIGHT
  set allskills[819] = FAR_SIGHT
  set allskills[820] = FAR_SIGHT

  set allskills[821] = SPIRIT_WOLF
  set allskills[822] = CHAIN_LIGHTNING
  set allskills[823] = SPIRIT_WOLF
  set allskills[824] = CHAIN_LIGHTNING
  set allskills[825] = CHAIN_LIGHTNING
  set allskills[826] = EARTHQUAKE
  set allskills[827] = SPIRIT_WOLF
  set allskills[828] = FAR_SIGHT
  set allskills[829] = FAR_SIGHT
  set allskills[830] = FAR_SIGHT

  set allskills[831] = CHAIN_LIGHTNING
  set allskills[832] = SPIRIT_WOLF
  set allskills[833] = CHAIN_LIGHTNING
  set allskills[834] = SPIRIT_WOLF
  set allskills[835] = CHAIN_LIGHTNING
  set allskills[836] = EARTHQUAKE
  set allskills[837] = SPIRIT_WOLF
  set allskills[838] = FAR_SIGHT
  set allskills[839] = FAR_SIGHT
  set allskills[840] = FAR_SIGHT

  set allskills[841] = SPIRIT_WOLF
  set allskills[842] = CHAIN_LIGHTNING
  set allskills[843] = SPIRIT_WOLF
  set allskills[844] = CHAIN_LIGHTNING
  set allskills[845] = SPIRIT_WOLF
  set allskills[846] = EARTHQUAKE
  set allskills[847] = CHAIN_LIGHTNING
  set allskills[848] = FAR_SIGHT
  set allskills[849] = FAR_SIGHT
  set allskills[850] = FAR_SIGHT

  set allskills[851] = SPIRIT_WOLF
  set allskills[852] = CHAIN_LIGHTNING
  set allskills[853] = SPIRIT_WOLF
  set allskills[854] = CHAIN_LIGHTNING
  set allskills[855] = CHAIN_LIGHTNING
  set allskills[856] = EARTHQUAKE
  set allskills[857] = SPIRIT_WOLF
  set allskills[858] = FAR_SIGHT
  set allskills[859] = FAR_SIGHT
  set allskills[860] = FAR_SIGHT

  set allskills[861] = CHAIN_LIGHTNING
  set allskills[862] = SPIRIT_WOLF
  set allskills[863] = CHAIN_LIGHTNING
  set allskills[864] = SPIRIT_WOLF
  set allskills[865] = CHAIN_LIGHTNING
  set allskills[866] = EARTHQUAKE
  set allskills[867] = SPIRIT_WOLF
  set allskills[868] = FAR_SIGHT
  set allskills[869] = FAR_SIGHT
  set allskills[870] = FAR_SIGHT

  set allskills[871] = SPIRIT_WOLF
  set allskills[872] = CHAIN_LIGHTNING
  set allskills[873] = SPIRIT_WOLF
  set allskills[874] = CHAIN_LIGHTNING
  set allskills[875] = SPIRIT_WOLF
  set allskills[876] = EARTHQUAKE
  set allskills[877] = CHAIN_LIGHTNING
  set allskills[878] = FAR_SIGHT
  set allskills[879] = FAR_SIGHT
  set allskills[880] = FAR_SIGHT

  set allskills[881] = SPIRIT_WOLF
  set allskills[882] = CHAIN_LIGHTNING
  set allskills[883] = SPIRIT_WOLF
  set allskills[884] = CHAIN_LIGHTNING
  set allskills[885] = CHAIN_LIGHTNING
  set allskills[886] = EARTHQUAKE
  set allskills[887] = SPIRIT_WOLF
  set allskills[888] = FAR_SIGHT
  set allskills[889] = FAR_SIGHT
  set allskills[890] = FAR_SIGHT

  set allskills[891] = CHAIN_LIGHTNING
  set allskills[892] = SPIRIT_WOLF
  set allskills[893] = CHAIN_LIGHTNING
  set allskills[894] = SPIRIT_WOLF
  set allskills[895] = CHAIN_LIGHTNING
  set allskills[896] = EARTHQUAKE
  set allskills[897] = SPIRIT_WOLF
  set allskills[898] = FAR_SIGHT
  set allskills[899] = FAR_SIGHT
  set allskills[900] = FAR_SIGHT

  set allskills[901] = WAR_STOMP
  set allskills[902] = ENDURANE_AURA
  set allskills[903] = WAR_STOMP
  set allskills[904] = ENDURANE_AURA
  set allskills[905] = WAR_STOMP
  set allskills[906] = REINCARNATION
  set allskills[907] = ENDURANE_AURA
  set allskills[908] = SHOCKWAVE
  set allskills[909] = SHOCKWAVE
  set allskills[910] = SHOCKWAVE

  set allskills[911] = SHOCKWAVE
  set allskills[912] = ENDURANE_AURA
  set allskills[913] = SHOCKWAVE
  set allskills[914] = ENDURANE_AURA
  set allskills[915] = SHOCKWAVE
  set allskills[916] = REINCARNATION
  set allskills[917] = ENDURANE_AURA
  set allskills[918] = WAR_STOMP
  set allskills[919] = WAR_STOMP
  set allskills[920] = WAR_STOMP

  set allskills[921] = WAR_STOMP
  set allskills[922] = ENDURANE_AURA
  set allskills[923] = ENDURANE_AURA
  set allskills[924] = WAR_STOMP
  set allskills[925] = ENDURANE_AURA
  set allskills[926] = REINCARNATION
  set allskills[927] = WAR_STOMP
  set allskills[928] = SHOCKWAVE
  set allskills[929] = SHOCKWAVE
  set allskills[930] = SHOCKWAVE

  set allskills[931] = WAR_STOMP
  set allskills[932] = ENDURANE_AURA
  set allskills[933] = WAR_STOMP
  set allskills[934] = ENDURANE_AURA
  set allskills[935] = WAR_STOMP
  set allskills[936] = REINCARNATION
  set allskills[937] = ENDURANE_AURA
  set allskills[938] = SHOCKWAVE
  set allskills[939] = SHOCKWAVE
  set allskills[940] = SHOCKWAVE

  set allskills[941] = ENDURANE_AURA
  set allskills[942] = WAR_STOMP
  set allskills[943] = ENDURANE_AURA
  set allskills[944] = WAR_STOMP
  set allskills[945] = ENDURANE_AURA
  set allskills[946] = REINCARNATION
  set allskills[947] = WAR_STOMP
  set allskills[948] = SHOCKWAVE
  set allskills[949] = SHOCKWAVE
  set allskills[950] = SHOCKWAVE

  set allskills[951] = SHOCKWAVE
  set allskills[952] = ENDURANE_AURA
  set allskills[953] = SHOCKWAVE
  set allskills[954] = ENDURANE_AURA
  set allskills[955] = SHOCKWAVE
  set allskills[956] = REINCARNATION
  set allskills[957] = ENDURANE_AURA
  set allskills[958] = WAR_STOMP
  set allskills[959] = WAR_STOMP
  set allskills[960] = WAR_STOMP

  set allskills[961] = WAR_STOMP
  set allskills[962] = ENDURANE_AURA
  set allskills[963] = WAR_STOMP
  set allskills[964] = ENDURANE_AURA
  set allskills[965] = WAR_STOMP
  set allskills[966] = REINCARNATION
  set allskills[967] = ENDURANE_AURA
  set allskills[968] = SHOCKWAVE
  set allskills[969] = SHOCKWAVE
  set allskills[970] = SHOCKWAVE

  set allskills[971] = ENDURANE_AURA
  set allskills[972] = WAR_STOMP
  set allskills[973] = ENDURANE_AURA
  set allskills[974] = WAR_STOMP
  set allskills[975] = ENDURANE_AURA
  set allskills[976] = REINCARNATION
  set allskills[977] = WAR_STOMP
  set allskills[978] = SHOCKWAVE
  set allskills[979] = SHOCKWAVE
  set allskills[980] = SHOCKWAVE

  set allskills[981] = SHOCKWAVE
  set allskills[982] = ENDURANE_AURA
  set allskills[983] = SHOCKWAVE
  set allskills[984] = ENDURANE_AURA
  set allskills[985] = SHOCKWAVE
  set allskills[986] = REINCARNATION
  set allskills[987] = ENDURANE_AURA
  set allskills[988] = WAR_STOMP
  set allskills[989] = WAR_STOMP
  set allskills[990] = WAR_STOMP

  set allskills[991] = SERPENT_WARD
  set allskills[992] = HEALING_WAVE
  set allskills[993] = SERPENT_WARD
  set allskills[994] = HEALING_WAVE
  set allskills[995] = SERPENT_WARD
  set allskills[996] = VOODOO
  set allskills[997] = HEALING_WAVE
  set allskills[998] = HEX
  set allskills[999] = HEX
  set allskills[1000] = HEX

  set allskills[1001] = HEX
  set allskills[1002] = HEALING_WAVE
  set allskills[1003] = HEALING_WAVE
  set allskills[1004] = HEX
  set allskills[1005] = HEALING_WAVE
  set allskills[1006] = VOODOO
  set allskills[1007] = HEX
  set allskills[1008] = SERPENT_WARD
  set allskills[1009] = SERPENT_WARD
  set allskills[1010] = SERPENT_WARD

  set allskills[1011] = SERPENT_WARD
  set allskills[1012] = HEALING_WAVE
  set allskills[1013] = HEALING_WAVE
  set allskills[1014] = SERPENT_WARD
  set allskills[1015] = HEALING_WAVE
  set allskills[1016] = VOODOO
  set allskills[1017] = SERPENT_WARD
  set allskills[1018] = HEX
  set allskills[1019] = HEX
  set allskills[1020] = HEX

  set allskills[1021] = SERPENT_WARD
  set allskills[1022] = HEALING_WAVE
  set allskills[1023] = SERPENT_WARD
  set allskills[1024] = HEALING_WAVE
  set allskills[1025] = SERPENT_WARD
  set allskills[1026] = VOODOO
  set allskills[1027] = HEALING_WAVE
  set allskills[1028] = HEX
  set allskills[1029] = HEX
  set allskills[1030] = HEX

  set allskills[1031] = HEX
  set allskills[1032] = HEALING_WAVE
  set allskills[1033] = HEALING_WAVE
  set allskills[1034] = HEX
  set allskills[1035] = HEALING_WAVE
  set allskills[1036] = VOODOO
  set allskills[1037] = HEX
  set allskills[1038] = SERPENT_WARD
  set allskills[1039] = SERPENT_WARD
  set allskills[1040] = SERPENT_WARD

  set allskills[1041] = SERPENT_WARD
  set allskills[1042] = HEALING_WAVE
  set allskills[1043] = HEALING_WAVE
  set allskills[1044] = SERPENT_WARD
  set allskills[1045] = HEALING_WAVE
  set allskills[1046] = VOODOO
  set allskills[1047] = SERPENT_WARD
  set allskills[1048] = HEX
  set allskills[1049] = HEX
  set allskills[1050] = HEX

  set allskills[1051] = SERPENT_WARD
  set allskills[1052] = HEALING_WAVE
  set allskills[1053] = SERPENT_WARD
  set allskills[1054] = HEALING_WAVE
  set allskills[1055] = SERPENT_WARD
  set allskills[1056] = VOODOO
  set allskills[1057] = HEALING_WAVE
  set allskills[1058] = HEX
  set allskills[1059] = HEX
  set allskills[1060] = HEX

  set allskills[1061] = HEX
  set allskills[1062] = HEALING_WAVE
  set allskills[1063] = HEALING_WAVE
  set allskills[1064] = HEX
  set allskills[1065] = HEALING_WAVE
  set allskills[1066] = VOODOO
  set allskills[1067] = HEX
  set allskills[1068] = SERPENT_WARD
  set allskills[1069] = SERPENT_WARD
  set allskills[1070] = SERPENT_WARD

  set allskills[1071] = SERPENT_WARD
  set allskills[1072] = HEALING_WAVE
  set allskills[1073] = HEALING_WAVE
  set allskills[1074] = SERPENT_WARD
  set allskills[1075] = HEALING_WAVE
  set allskills[1076] = VOODOO
  set allskills[1077] = SERPENT_WARD
  set allskills[1078] = HEX
  set allskills[1079] = HEX
  set allskills[1080] = HEX

endfunction

function InitBuildings takes nothing returns nothing
  set building[0] = ORC_ALTAR
  set building[1] = ORC_BARRACKS
  set building[2] = BESTIARY
  set building[3] = FORGE
  set building[4] = FORTRESS
  set building[5] = GREAT_HALL
  set building[6] = LODGE
  set building[7] = STRONGHOLD
  set building[8] = BURROW
  set building[9] = TOTEM
  set building[10] = ORC_WATCH_TOWER
  set building[11] = VOODOO_LOUNGE
  set building_length = 12
endfunction

function initRacialUnits takes nothing returns nothing

    set racial_peon = PEON
    set racial_altar = ORC_ALTAR
    set racial_lumber = FORGE

    set racial_hall[1] = GREAT_HALL
    set racial_hall[2] = STRONGHOLD
    set racial_hall[3] = FORTRESS
	// Basically if its not a undead type expansion method just make variable the first hall
	if racial_expansion == 0	then
		set racial_expansion = racial_hall[1]
	endif

    set racial_goldmine[minearray] = 'ngol'
	set minearray = minearray + 1

    set racial_farm = BURROW
	if race_sell_ziggurats then
		set racial_zigg[ziggarray] = old_id[racial_farm]
		set ziggarray = ziggarray + 1
	endif

    set racial_shop = VOODOO_LOUNGE

endfunction

function initRacialTraits takes nothing returns nothing
   local integer i = 0

   set i = GetRandomInt(1,100)
   set militia = race_militia_expansion_available and i <= 60
   if militia then
	call Trace("Militia expansion is true")
   endif
   set i = GetRandomInt(1, 100)
   set race_ancient_expansion_available = (race_ancient_expansion_available and i <= race_ancient_expansion_probability)
   set i = GetRandomInt(1, 100)
   if race_ancient_expansion_available then
	call Trace("Ancient Expansion is true")
   endif
   set race_towerrush_available = (race_towerrush_available and i <= race_towerrush_probability)
   if race_towerrush_available then
	call Trace("Towerrush variable is true")
   endif   

endfunction

function CanTowerRush takes nothing returns nothing
	local real distance = GetNearestEnemyDistance()
	local integer i = GetRandomInt(1,100)
	
	if game_is_ffa then
		set i = i + 40       // in ffa reduce likly hood of tower rush extremly
	endif
	
	 if hero_rush_bonus[hero[1]] >= race_towerrush_hero_rush_level then
		if distance < 8000 then   // Total percentage to be choosen is 33%
			call StartTowerRush(180)
		elseif i <= 75 and distance < 11000 then // Total percentage to be choosen is 25%
			call StartTowerRush(160)
		elseif i <= 50 and distance < 14000 then // Total percentage to be choosen is 16%
			call StartTowerRush(140)
		elseif i <= 20 and distance < 16000 then // Total percentage to be choosen is 7%
		endif
	  endif
endfunction

function chooseStrategyRP takes nothing returns nothing
  set rp_strat[0] = 30
  set rp_strat[1] = 23
  set rp_strat[2] = 32
  set rp_strat[3] = 30
  set rp_strat[4] = 18
  set rp_strat[5] = 32
  set rp_strat[6] = 25
  set rp_strat[7] = 23
  set rp_strat[8] = 40
  set rp_strat[9] = 35
  set rp_strat[10] = 8
  set rp_strat[11] = 16
  set rp_strat[12] = 15
  set rp_strat[13] = 30
  set rp_strat[14] = 30
  set rp_strat[15] = 30

  call AddFavoriteUnitRP()
  if ai_time > 2 then
    call mult_rp_strat(3)
  endif

  if c_ally_total > 0 then
      set rp_strat[STRAT_NormalOrc] = rp_strat[STRAT_NormalOrc] + 0
      set rp_strat[STRAT_FastSh] = rp_strat[STRAT_FastSh] + 9
      set rp_strat[STRAT_WyvSh] = rp_strat[STRAT_WyvSh] + 9
      set rp_strat[STRAT_HHunters] = rp_strat[STRAT_HHunters] + 0
      set rp_strat[STRAT_Raiders] = rp_strat[STRAT_Raiders] + 9
      set rp_strat[STRAT_GruntCatapults] = rp_strat[STRAT_GruntCatapults] + 18
      set rp_strat[STRAT_HeadCatapults] = rp_strat[STRAT_HeadCatapults] + 9
      set rp_strat[STRAT_Wyvern] = rp_strat[STRAT_Wyvern] + 0
      set rp_strat[STRAT_BarrackMix] = rp_strat[STRAT_BarrackMix] + 5
      set rp_strat[STRAT_BestiaryMix] = rp_strat[STRAT_BestiaryMix] + 5
      set rp_strat[STRAT_AntiPierce] = rp_strat[STRAT_AntiPierce] + 0
      set rp_strat[STRAT_AntiAir] = rp_strat[STRAT_AntiAir] + 0
      set rp_strat[STRAT_OAntiTower] = rp_strat[STRAT_OAntiTower] + 0
      set rp_strat[STRAT_VersusHuman] = rp_strat[STRAT_VersusHuman] + 0
      set rp_strat[STRAT_VersusUndead] = rp_strat[STRAT_VersusUndead] + 0
      set rp_strat[STRAT_VersusElf] = rp_strat[STRAT_VersusElf] + 0
  endif
  
  if game_is_1on1 then
      set rp_strat[STRAT_NormalOrc] = rp_strat[STRAT_NormalOrc] + 0
      set rp_strat[STRAT_FastSh] = rp_strat[STRAT_FastSh] + 0
      set rp_strat[STRAT_WyvSh] = rp_strat[STRAT_WyvSh] + 0
      set rp_strat[STRAT_HHunters] = rp_strat[STRAT_HHunters] + 0
      set rp_strat[STRAT_Raiders] = rp_strat[STRAT_Raiders] + 0
      set rp_strat[STRAT_GruntCatapults] = rp_strat[STRAT_GruntCatapults] + 0
      set rp_strat[STRAT_HeadCatapults] = rp_strat[STRAT_HeadCatapults] + 0
      set rp_strat[STRAT_Wyvern] = rp_strat[STRAT_Wyvern] + 0
      set rp_strat[STRAT_BarrackMix] = rp_strat[STRAT_BarrackMix] + 10
      set rp_strat[STRAT_BestiaryMix] = rp_strat[STRAT_BestiaryMix] + 5
      set rp_strat[STRAT_AntiPierce] = rp_strat[STRAT_AntiPierce] + 0
      set rp_strat[STRAT_AntiAir] = rp_strat[STRAT_AntiAir] + 0
      set rp_strat[STRAT_OAntiTower] = rp_strat[STRAT_OAntiTower] + 0
      set rp_strat[STRAT_VersusHuman] = rp_strat[STRAT_VersusHuman] + 0
      set rp_strat[STRAT_VersusUndead] = rp_strat[STRAT_VersusUndead] + 0
      set rp_strat[STRAT_VersusElf] = rp_strat[STRAT_VersusElf] + 0
  endif
  
  if game_is_ffa then
      set rp_strat[STRAT_NormalOrc] = rp_strat[STRAT_NormalOrc] + 0
      set rp_strat[STRAT_FastSh] = rp_strat[STRAT_FastSh] + 0
      set rp_strat[STRAT_WyvSh] = rp_strat[STRAT_WyvSh] + 0
      set rp_strat[STRAT_HHunters] = rp_strat[STRAT_HHunters] + 0
      set rp_strat[STRAT_Raiders] = rp_strat[STRAT_Raiders] + 0
      set rp_strat[STRAT_GruntCatapults] = rp_strat[STRAT_GruntCatapults] + 0
      set rp_strat[STRAT_HeadCatapults] = rp_strat[STRAT_HeadCatapults] + 0
      set rp_strat[STRAT_Wyvern] = rp_strat[STRAT_Wyvern] + 0
      set rp_strat[STRAT_BarrackMix] = rp_strat[STRAT_BarrackMix] + 5
      set rp_strat[STRAT_BestiaryMix] = rp_strat[STRAT_BestiaryMix] + 10
      set rp_strat[STRAT_AntiPierce] = rp_strat[STRAT_AntiPierce] + 0
      set rp_strat[STRAT_AntiAir] = rp_strat[STRAT_AntiAir] + 0
      set rp_strat[STRAT_OAntiTower] = rp_strat[STRAT_OAntiTower] + 0
      set rp_strat[STRAT_VersusHuman] = rp_strat[STRAT_VersusHuman] + 0
      set rp_strat[STRAT_VersusUndead] = rp_strat[STRAT_VersusUndead] + 0
      set rp_strat[STRAT_VersusElf] = rp_strat[STRAT_VersusElf] + 0
  endif

  if c_enemy[R_RANDOM] > 0 then
      set rp_strat[STRAT_NormalOrc] = rp_strat[STRAT_NormalOrc] + 10
      set rp_strat[STRAT_FastSh] = rp_strat[STRAT_FastSh] + 0
      set rp_strat[STRAT_WyvSh] = rp_strat[STRAT_WyvSh] + 0
      set rp_strat[STRAT_HHunters] = rp_strat[STRAT_HHunters] + 0
      set rp_strat[STRAT_Raiders] = rp_strat[STRAT_Raiders] + 0
      set rp_strat[STRAT_GruntCatapults] = rp_strat[STRAT_GruntCatapults] + 18
      set rp_strat[STRAT_HeadCatapults] = rp_strat[STRAT_HeadCatapults] + 12
      set rp_strat[STRAT_Wyvern] = rp_strat[STRAT_Wyvern] + 0
      set rp_strat[STRAT_BarrackMix] = rp_strat[STRAT_BarrackMix] + 5
      set rp_strat[STRAT_BestiaryMix] = rp_strat[STRAT_BestiaryMix] + 10
      set rp_strat[STRAT_AntiPierce] = rp_strat[STRAT_AntiPierce] + 0
      set rp_strat[STRAT_AntiAir] = rp_strat[STRAT_AntiAir] + 0
      set rp_strat[STRAT_OAntiTower] = rp_strat[STRAT_OAntiTower] + 0
      set rp_strat[STRAT_VersusHuman] = rp_strat[STRAT_VersusHuman] + 0
      set rp_strat[STRAT_VersusUndead] = rp_strat[STRAT_VersusUndead] + 0
      set rp_strat[STRAT_VersusElf] = rp_strat[STRAT_VersusElf] + 0
  endif

  if c_enemy[R_ELF] > 0 then
      set rp_strat[STRAT_NormalOrc] = rp_strat[STRAT_NormalOrc] + 0
      set rp_strat[STRAT_FastSh] = rp_strat[STRAT_FastSh] + 0
      set rp_strat[STRAT_WyvSh] = rp_strat[STRAT_WyvSh] + 12
      set rp_strat[STRAT_HHunters] = rp_strat[STRAT_HHunters] + 0
      set rp_strat[STRAT_Raiders] = rp_strat[STRAT_Raiders] + 0
      set rp_strat[STRAT_GruntCatapults] = rp_strat[STRAT_GruntCatapults] + 50
      set rp_strat[STRAT_HeadCatapults] = rp_strat[STRAT_HeadCatapults] + 9
      set rp_strat[STRAT_Wyvern] = rp_strat[STRAT_Wyvern] + -9
      set rp_strat[STRAT_BarrackMix] = rp_strat[STRAT_BarrackMix] + 0
      set rp_strat[STRAT_BestiaryMix] = rp_strat[STRAT_BestiaryMix] + 0
      set rp_strat[STRAT_AntiPierce] = rp_strat[STRAT_AntiPierce] + 0
      set rp_strat[STRAT_AntiAir] = rp_strat[STRAT_AntiAir] + 0
      set rp_strat[STRAT_OAntiTower] = rp_strat[STRAT_OAntiTower] + 0
      set rp_strat[STRAT_VersusHuman] = rp_strat[STRAT_VersusHuman] + 5
      set rp_strat[STRAT_VersusUndead] = rp_strat[STRAT_VersusUndead] + -5
      set rp_strat[STRAT_VersusElf] = rp_strat[STRAT_VersusElf] + 20
  endif

  if c_enemy[R_HUMAN] > 0 then
      set rp_strat[STRAT_NormalOrc] = rp_strat[STRAT_NormalOrc] + 0
      set rp_strat[STRAT_FastSh] = rp_strat[STRAT_FastSh] + 0
      set rp_strat[STRAT_WyvSh] = rp_strat[STRAT_WyvSh] + 0
      set rp_strat[STRAT_HHunters] = rp_strat[STRAT_HHunters] + 0
      set rp_strat[STRAT_Raiders] = rp_strat[STRAT_Raiders] + 9
      set rp_strat[STRAT_GruntCatapults] = rp_strat[STRAT_GruntCatapults] + 18
      set rp_strat[STRAT_HeadCatapults] = rp_strat[STRAT_HeadCatapults] + -9
      set rp_strat[STRAT_Wyvern] = rp_strat[STRAT_Wyvern] + -9
      set rp_strat[STRAT_BarrackMix] = rp_strat[STRAT_BarrackMix] + 0
      set rp_strat[STRAT_BestiaryMix] = rp_strat[STRAT_BestiaryMix] + 0
      set rp_strat[STRAT_AntiPierce] = rp_strat[STRAT_AntiPierce] + 0
      set rp_strat[STRAT_AntiAir] = rp_strat[STRAT_AntiAir] + 0
      set rp_strat[STRAT_OAntiTower] = rp_strat[STRAT_OAntiTower] + 0
      set rp_strat[STRAT_VersusHuman] = rp_strat[STRAT_VersusHuman] + 20
      set rp_strat[STRAT_VersusUndead] = rp_strat[STRAT_VersusUndead] + -10
      set rp_strat[STRAT_VersusElf] = rp_strat[STRAT_VersusElf] + 5
  endif

  if c_enemy[R_ORC] > 0 then
      set rp_strat[STRAT_NormalOrc] = rp_strat[STRAT_NormalOrc] + 0
      set rp_strat[STRAT_FastSh] = rp_strat[STRAT_FastSh] + 0
      set rp_strat[STRAT_WyvSh] = rp_strat[STRAT_WyvSh] + 18
      set rp_strat[STRAT_HHunters] = rp_strat[STRAT_HHunters] + 0
      set rp_strat[STRAT_Raiders] = rp_strat[STRAT_Raiders] + 9
      set rp_strat[STRAT_GruntCatapults] = rp_strat[STRAT_GruntCatapults] + 18
      set rp_strat[STRAT_HeadCatapults] = rp_strat[STRAT_HeadCatapults] + 0
      set rp_strat[STRAT_Wyvern] = rp_strat[STRAT_Wyvern] + 9
      set rp_strat[STRAT_BarrackMix] = rp_strat[STRAT_BarrackMix] + 0
      set rp_strat[STRAT_BestiaryMix] = rp_strat[STRAT_BestiaryMix] + 0
      set rp_strat[STRAT_AntiPierce] = rp_strat[STRAT_AntiPierce] + 0
      set rp_strat[STRAT_AntiAir] = rp_strat[STRAT_AntiAir] + 0
      set rp_strat[STRAT_OAntiTower] = rp_strat[STRAT_OAntiTower] + 0
      set rp_strat[STRAT_VersusHuman] = rp_strat[STRAT_VersusHuman] + 0
      set rp_strat[STRAT_VersusUndead] = rp_strat[STRAT_VersusUndead] + 0
      set rp_strat[STRAT_VersusElf] = rp_strat[STRAT_VersusElf] + 0
  endif

  if c_enemy[R_UNDEAD] > 0 then
      set rp_strat[STRAT_NormalOrc] = rp_strat[STRAT_NormalOrc] + 0
      set rp_strat[STRAT_FastSh] = rp_strat[STRAT_FastSh] + 0
      set rp_strat[STRAT_WyvSh] = rp_strat[STRAT_WyvSh] + 0
      set rp_strat[STRAT_HHunters] = rp_strat[STRAT_HHunters] + 0
      set rp_strat[STRAT_Raiders] = rp_strat[STRAT_Raiders] + 25
      set rp_strat[STRAT_GruntCatapults] = rp_strat[STRAT_GruntCatapults] + 9
      set rp_strat[STRAT_HeadCatapults] = rp_strat[STRAT_HeadCatapults] + 0
      set rp_strat[STRAT_Wyvern] = rp_strat[STRAT_Wyvern] + 0
      set rp_strat[STRAT_BarrackMix] = rp_strat[STRAT_BarrackMix] + 0
      set rp_strat[STRAT_BestiaryMix] = rp_strat[STRAT_BestiaryMix] + 0
      set rp_strat[STRAT_AntiPierce] = rp_strat[STRAT_AntiPierce] + 0
      set rp_strat[STRAT_AntiAir] = rp_strat[STRAT_AntiAir] + 0
      set rp_strat[STRAT_OAntiTower] = rp_strat[STRAT_OAntiTower] + 0
      set rp_strat[STRAT_VersusHuman] = rp_strat[STRAT_VersusHuman] + -10
      set rp_strat[STRAT_VersusUndead] = rp_strat[STRAT_VersusUndead] + 20
      set rp_strat[STRAT_VersusElf] = rp_strat[STRAT_VersusElf] + -10
  endif


  if c_ally[R_ELF] > 0 then
      set rp_strat[STRAT_NormalOrc] = rp_strat[STRAT_NormalOrc] + 0
      set rp_strat[STRAT_FastSh] = rp_strat[STRAT_FastSh] + 0
      set rp_strat[STRAT_WyvSh] = rp_strat[STRAT_WyvSh] + 0
      set rp_strat[STRAT_HHunters] = rp_strat[STRAT_HHunters] + 0
      set rp_strat[STRAT_Raiders] = rp_strat[STRAT_Raiders] + 0
      set rp_strat[STRAT_GruntCatapults] = rp_strat[STRAT_GruntCatapults] + 0
      set rp_strat[STRAT_HeadCatapults] = rp_strat[STRAT_HeadCatapults] + 0
      set rp_strat[STRAT_Wyvern] = rp_strat[STRAT_Wyvern] + 0
      set rp_strat[STRAT_BarrackMix] = rp_strat[STRAT_BarrackMix] + 0
      set rp_strat[STRAT_BestiaryMix] = rp_strat[STRAT_BestiaryMix] + 0
      set rp_strat[STRAT_AntiPierce] = rp_strat[STRAT_AntiPierce] + 0
      set rp_strat[STRAT_AntiAir] = rp_strat[STRAT_AntiAir] + 0
      set rp_strat[STRAT_OAntiTower] = rp_strat[STRAT_OAntiTower] + 0
      set rp_strat[STRAT_VersusHuman] = rp_strat[STRAT_VersusHuman] + 0
      set rp_strat[STRAT_VersusUndead] = rp_strat[STRAT_VersusUndead] + 0
      set rp_strat[STRAT_VersusElf] = rp_strat[STRAT_VersusElf] + 0
  endif

  if c_ally[R_HUMAN] > 0 then
      set rp_strat[STRAT_NormalOrc] = rp_strat[STRAT_NormalOrc] + 0
      set rp_strat[STRAT_FastSh] = rp_strat[STRAT_FastSh] + 0
      set rp_strat[STRAT_WyvSh] = rp_strat[STRAT_WyvSh] + 0
      set rp_strat[STRAT_HHunters] = rp_strat[STRAT_HHunters] + 0
      set rp_strat[STRAT_Raiders] = rp_strat[STRAT_Raiders] + 0
      set rp_strat[STRAT_GruntCatapults] = rp_strat[STRAT_GruntCatapults] + 0
      set rp_strat[STRAT_HeadCatapults] = rp_strat[STRAT_HeadCatapults] + 0
      set rp_strat[STRAT_Wyvern] = rp_strat[STRAT_Wyvern] + 0
      set rp_strat[STRAT_BarrackMix] = rp_strat[STRAT_BarrackMix] + 0
      set rp_strat[STRAT_BestiaryMix] = rp_strat[STRAT_BestiaryMix] + 0
      set rp_strat[STRAT_AntiPierce] = rp_strat[STRAT_AntiPierce] + 0
      set rp_strat[STRAT_AntiAir] = rp_strat[STRAT_AntiAir] + 0
      set rp_strat[STRAT_OAntiTower] = rp_strat[STRAT_OAntiTower] + 0
      set rp_strat[STRAT_VersusHuman] = rp_strat[STRAT_VersusHuman] + 0
      set rp_strat[STRAT_VersusUndead] = rp_strat[STRAT_VersusUndead] + 0
      set rp_strat[STRAT_VersusElf] = rp_strat[STRAT_VersusElf] + 0
  endif

  if c_ally[R_ORC] > 0 then
      set rp_strat[STRAT_NormalOrc] = rp_strat[STRAT_NormalOrc] + 0
      set rp_strat[STRAT_FastSh] = rp_strat[STRAT_FastSh] + 0
      set rp_strat[STRAT_WyvSh] = rp_strat[STRAT_WyvSh] + 0
      set rp_strat[STRAT_HHunters] = rp_strat[STRAT_HHunters] + 0
      set rp_strat[STRAT_Raiders] = rp_strat[STRAT_Raiders] + 0
      set rp_strat[STRAT_GruntCatapults] = rp_strat[STRAT_GruntCatapults] + 0
      set rp_strat[STRAT_HeadCatapults] = rp_strat[STRAT_HeadCatapults] + 0
      set rp_strat[STRAT_Wyvern] = rp_strat[STRAT_Wyvern] + 0
      set rp_strat[STRAT_BarrackMix] = rp_strat[STRAT_BarrackMix] + 0
      set rp_strat[STRAT_BestiaryMix] = rp_strat[STRAT_BestiaryMix] + 0
      set rp_strat[STRAT_AntiPierce] = rp_strat[STRAT_AntiPierce] + 0
      set rp_strat[STRAT_AntiAir] = rp_strat[STRAT_AntiAir] + 0
      set rp_strat[STRAT_OAntiTower] = rp_strat[STRAT_OAntiTower] + 0
      set rp_strat[STRAT_VersusHuman] = rp_strat[STRAT_VersusHuman] + 0
      set rp_strat[STRAT_VersusUndead] = rp_strat[STRAT_VersusUndead] + 0
      set rp_strat[STRAT_VersusElf] = rp_strat[STRAT_VersusElf] + 0
  endif

  if c_ally[R_UNDEAD] > 0 then
      set rp_strat[STRAT_NormalOrc] = rp_strat[STRAT_NormalOrc] + 0
      set rp_strat[STRAT_FastSh] = rp_strat[STRAT_FastSh] + 0
      set rp_strat[STRAT_WyvSh] = rp_strat[STRAT_WyvSh] + 0
      set rp_strat[STRAT_HHunters] = rp_strat[STRAT_HHunters] + 0
      set rp_strat[STRAT_Raiders] = rp_strat[STRAT_Raiders] + 0
      set rp_strat[STRAT_GruntCatapults] = rp_strat[STRAT_GruntCatapults] + 0
      set rp_strat[STRAT_HeadCatapults] = rp_strat[STRAT_HeadCatapults] + 0
      set rp_strat[STRAT_Wyvern] = rp_strat[STRAT_Wyvern] + 0
      set rp_strat[STRAT_BarrackMix] = rp_strat[STRAT_BarrackMix] + 0
      set rp_strat[STRAT_BestiaryMix] = rp_strat[STRAT_BestiaryMix] + 0
      set rp_strat[STRAT_AntiPierce] = rp_strat[STRAT_AntiPierce] + 0
      set rp_strat[STRAT_AntiAir] = rp_strat[STRAT_AntiAir] + 0
      set rp_strat[STRAT_OAntiTower] = rp_strat[STRAT_OAntiTower] + 0
      set rp_strat[STRAT_VersusHuman] = rp_strat[STRAT_VersusHuman] + 0
      set rp_strat[STRAT_VersusUndead] = rp_strat[STRAT_VersusUndead] + 0
      set rp_strat[STRAT_VersusElf] = rp_strat[STRAT_VersusElf] + 0
  endif


  if ai_time > 2 then
    call div_rp_strat(3)
  endif
  call make_rp_strat_positive()

endfunction

function StrategyChanger takes nothing returns nothing
  local real array rp
  
  if not strat_change_allowed or strategy != chosen_strategy or debug_strategy > -1 or FoodUsed() >= 85 or GetMaximumEnemyStrength() < ver_strat_change_enemy_strength_min then
    return
  endif
  call chooseStrategyRP()
  call normalize_rp_strat()  // Makes priority much larger so the extra bonuses do not make as much of a difference


  set rp[STRAT_NormalOrc] = rp[STRAT_NormalOrc] + 0 * enemy_air
  set rp[STRAT_FastSh] = rp[STRAT_FastSh] + -5 * enemy_air
  set rp[STRAT_WyvSh] = rp[STRAT_WyvSh] + 5 * enemy_air
  set rp[STRAT_HHunters] = rp[STRAT_HHunters] + 5 * enemy_air
  set rp[STRAT_Raiders] = rp[STRAT_Raiders] + 4 * enemy_air
  set rp[STRAT_GruntCatapults] = rp[STRAT_GruntCatapults] + -5 * enemy_air
  set rp[STRAT_HeadCatapults] = rp[STRAT_HeadCatapults] + 4 * enemy_air
  set rp[STRAT_Wyvern] = rp[STRAT_Wyvern] + 3 * enemy_air
  set rp[STRAT_BarrackMix] = rp[STRAT_BarrackMix] + 0 * enemy_air
  set rp[STRAT_BestiaryMix] = rp[STRAT_BestiaryMix] + 0 * enemy_air
  set rp[STRAT_AntiPierce] = rp[STRAT_AntiPierce] + -5 * enemy_air
  set rp[STRAT_AntiAir] = rp[STRAT_AntiAir] + 10 * enemy_air
  set rp[STRAT_OAntiTower] = rp[STRAT_OAntiTower] + 0 * enemy_air
  set rp[STRAT_VersusHuman] = rp[STRAT_VersusHuman] + 5 * enemy_air
  set rp[STRAT_VersusUndead] = rp[STRAT_VersusUndead] + 5 * enemy_air
  set rp[STRAT_VersusElf] = rp[STRAT_VersusElf] + 3 * enemy_air
  set rp[STRAT_NormalOrc] = rp[STRAT_NormalOrc] + 0 * enemy_casters
  set rp[STRAT_FastSh] = rp[STRAT_FastSh] + 0 * enemy_casters
  set rp[STRAT_WyvSh] = rp[STRAT_WyvSh] + 0 * enemy_casters
  set rp[STRAT_HHunters] = rp[STRAT_HHunters] + 0 * enemy_casters
  set rp[STRAT_Raiders] = rp[STRAT_Raiders] + 0 * enemy_casters
  set rp[STRAT_GruntCatapults] = rp[STRAT_GruntCatapults] + 0 * enemy_casters
  set rp[STRAT_HeadCatapults] = rp[STRAT_HeadCatapults] + 0 * enemy_casters
  set rp[STRAT_Wyvern] = rp[STRAT_Wyvern] + 0 * enemy_casters
  set rp[STRAT_BarrackMix] = rp[STRAT_BarrackMix] + 0 * enemy_casters
  set rp[STRAT_BestiaryMix] = rp[STRAT_BestiaryMix] + 0 * enemy_casters
  set rp[STRAT_AntiPierce] = rp[STRAT_AntiPierce] + 0 * enemy_casters
  set rp[STRAT_AntiAir] = rp[STRAT_AntiAir] + 0 * enemy_casters
  set rp[STRAT_OAntiTower] = rp[STRAT_OAntiTower] + 0 * enemy_casters
  set rp[STRAT_VersusHuman] = rp[STRAT_VersusHuman] + 10 * enemy_casters
  set rp[STRAT_VersusUndead] = rp[STRAT_VersusUndead] + 0 * enemy_casters
  set rp[STRAT_VersusElf] = rp[STRAT_VersusElf] + 10 * enemy_casters
  set rp[STRAT_NormalOrc] = rp[STRAT_NormalOrc] + 0 * enemy_towers
  set rp[STRAT_FastSh] = rp[STRAT_FastSh] + 0 * enemy_towers
  set rp[STRAT_WyvSh] = rp[STRAT_WyvSh] + 0 * enemy_towers
  set rp[STRAT_HHunters] = rp[STRAT_HHunters] + 0 * enemy_towers
  set rp[STRAT_Raiders] = rp[STRAT_Raiders] + 5 * enemy_towers
  set rp[STRAT_GruntCatapults] = rp[STRAT_GruntCatapults] + 10 * enemy_towers
  set rp[STRAT_HeadCatapults] = rp[STRAT_HeadCatapults] + 5 * enemy_towers
  set rp[STRAT_Wyvern] = rp[STRAT_Wyvern] + 0 * enemy_towers
  set rp[STRAT_BarrackMix] = rp[STRAT_BarrackMix] + 0 * enemy_towers
  set rp[STRAT_BestiaryMix] = rp[STRAT_BestiaryMix] + 0 * enemy_towers
  set rp[STRAT_AntiPierce] = rp[STRAT_AntiPierce] + 0 * enemy_towers
  set rp[STRAT_AntiAir] = rp[STRAT_AntiAir] + 2 * enemy_towers
  set rp[STRAT_OAntiTower] = rp[STRAT_OAntiTower] + 10 * enemy_towers
  set rp[STRAT_VersusHuman] = rp[STRAT_VersusHuman] + 0 * enemy_towers
  set rp[STRAT_VersusUndead] = rp[STRAT_VersusUndead] + 5 * enemy_towers
  set rp[STRAT_VersusElf] = rp[STRAT_VersusElf] + 5 * enemy_towers
  set rp[STRAT_NormalOrc] = rp[STRAT_NormalOrc] + 0 * enemy_piercing
  set rp[STRAT_FastSh] = rp[STRAT_FastSh] + -3 * enemy_piercing
  set rp[STRAT_WyvSh] = rp[STRAT_WyvSh] + -10 * enemy_piercing
  set rp[STRAT_HHunters] = rp[STRAT_HHunters] + 0 * enemy_piercing
  set rp[STRAT_Raiders] = rp[STRAT_Raiders] + 0 * enemy_piercing
  set rp[STRAT_GruntCatapults] = rp[STRAT_GruntCatapults] + 0 * enemy_piercing
  set rp[STRAT_HeadCatapults] = rp[STRAT_HeadCatapults] + 0 * enemy_piercing
  set rp[STRAT_Wyvern] = rp[STRAT_Wyvern] + -10 * enemy_piercing
  set rp[STRAT_BarrackMix] = rp[STRAT_BarrackMix] + 0 * enemy_piercing
  set rp[STRAT_BestiaryMix] = rp[STRAT_BestiaryMix] + 0 * enemy_piercing
  set rp[STRAT_AntiPierce] = rp[STRAT_AntiPierce] + 10 * enemy_piercing
  set rp[STRAT_AntiAir] = rp[STRAT_AntiAir] + -10 * enemy_piercing
  set rp[STRAT_OAntiTower] = rp[STRAT_OAntiTower] + -3 * enemy_piercing
  set rp[STRAT_VersusHuman] = rp[STRAT_VersusHuman] + -2 * enemy_piercing
  set rp[STRAT_VersusUndead] = rp[STRAT_VersusUndead] + -3 * enemy_piercing
  set rp[STRAT_VersusElf] = rp[STRAT_VersusElf] + -2 * enemy_piercing
  set rp[STRAT_NormalOrc] = rp[STRAT_NormalOrc] + 0 * enemy_normal
  set rp[STRAT_FastSh] = rp[STRAT_FastSh] + 4 * enemy_normal
  set rp[STRAT_WyvSh] = rp[STRAT_WyvSh] + 2 * enemy_normal
  set rp[STRAT_HHunters] = rp[STRAT_HHunters] + -5 * enemy_normal
  set rp[STRAT_Raiders] = rp[STRAT_Raiders] + -5 * enemy_normal
  set rp[STRAT_GruntCatapults] = rp[STRAT_GruntCatapults] + 2 * enemy_normal
  set rp[STRAT_HeadCatapults] = rp[STRAT_HeadCatapults] + -3 * enemy_normal
  set rp[STRAT_Wyvern] = rp[STRAT_Wyvern] + 0 * enemy_normal
  set rp[STRAT_BarrackMix] = rp[STRAT_BarrackMix] + 0 * enemy_normal
  set rp[STRAT_BestiaryMix] = rp[STRAT_BestiaryMix] + 0 * enemy_normal
  set rp[STRAT_AntiPierce] = rp[STRAT_AntiPierce] + 4 * enemy_normal
  set rp[STRAT_AntiAir] = rp[STRAT_AntiAir] + 0 * enemy_normal
  set rp[STRAT_OAntiTower] = rp[STRAT_OAntiTower] + 0 * enemy_normal
  set rp[STRAT_VersusHuman] = rp[STRAT_VersusHuman] + -3 * enemy_normal
  set rp[STRAT_VersusUndead] = rp[STRAT_VersusUndead] + 0 * enemy_normal
  set rp[STRAT_VersusElf] = rp[STRAT_VersusElf] + -3 * enemy_normal
  set rp[STRAT_NormalOrc] = rp[STRAT_NormalOrc] + 0 * enemy_siege
  set rp[STRAT_FastSh] = rp[STRAT_FastSh] + -3 * enemy_siege
  set rp[STRAT_WyvSh] = rp[STRAT_WyvSh] + -3 * enemy_siege
  set rp[STRAT_HHunters] = rp[STRAT_HHunters] + 0 * enemy_siege
  set rp[STRAT_Raiders] = rp[STRAT_Raiders] + 0 * enemy_siege
  set rp[STRAT_GruntCatapults] = rp[STRAT_GruntCatapults] + 0 * enemy_siege
  set rp[STRAT_HeadCatapults] = rp[STRAT_HeadCatapults] + 0 * enemy_siege
  set rp[STRAT_Wyvern] = rp[STRAT_Wyvern] + 0 * enemy_siege
  set rp[STRAT_BarrackMix] = rp[STRAT_BarrackMix] + 0 * enemy_siege
  set rp[STRAT_BestiaryMix] = rp[STRAT_BestiaryMix] + 0 * enemy_siege
  set rp[STRAT_AntiPierce] = rp[STRAT_AntiPierce] + 0 * enemy_siege
  set rp[STRAT_AntiAir] = rp[STRAT_AntiAir] + 0 * enemy_siege
  set rp[STRAT_OAntiTower] = rp[STRAT_OAntiTower] + 0 * enemy_siege
  set rp[STRAT_VersusHuman] = rp[STRAT_VersusHuman] + -3 * enemy_siege
  set rp[STRAT_VersusUndead] = rp[STRAT_VersusUndead] + 0 * enemy_siege
  set rp[STRAT_VersusElf] = rp[STRAT_VersusElf] + -3 * enemy_siege
  set rp[STRAT_NormalOrc] = rp[STRAT_NormalOrc] + 0 * enemy_magic
  set rp[STRAT_FastSh] = rp[STRAT_FastSh] + -10 * enemy_magic
  set rp[STRAT_WyvSh] = rp[STRAT_WyvSh] + -3 * enemy_magic
  set rp[STRAT_HHunters] = rp[STRAT_HHunters] + 0 * enemy_magic
  set rp[STRAT_Raiders] = rp[STRAT_Raiders] + 0 * enemy_magic
  set rp[STRAT_GruntCatapults] = rp[STRAT_GruntCatapults] + -10 * enemy_magic
  set rp[STRAT_HeadCatapults] = rp[STRAT_HeadCatapults] + -5 * enemy_magic
  set rp[STRAT_Wyvern] = rp[STRAT_Wyvern] + -3 * enemy_magic
  set rp[STRAT_BarrackMix] = rp[STRAT_BarrackMix] + 0 * enemy_magic
  set rp[STRAT_BestiaryMix] = rp[STRAT_BestiaryMix] + 0 * enemy_magic
  set rp[STRAT_AntiPierce] = rp[STRAT_AntiPierce] + -10 * enemy_magic
  set rp[STRAT_AntiAir] = rp[STRAT_AntiAir] + -3 * enemy_magic
  set rp[STRAT_OAntiTower] = rp[STRAT_OAntiTower] + -10 * enemy_magic
  set rp[STRAT_VersusHuman] = rp[STRAT_VersusHuman] + 0 * enemy_magic
  set rp[STRAT_VersusUndead] = rp[STRAT_VersusUndead] + -10 * enemy_magic
  set rp[STRAT_VersusElf] = rp[STRAT_VersusElf] + 0 * enemy_magic
  set rp[STRAT_NormalOrc] = rp[STRAT_NormalOrc] + 0 * enemy_unarmored
  set rp[STRAT_FastSh] = rp[STRAT_FastSh] + 0 * enemy_unarmored
  set rp[STRAT_WyvSh] = rp[STRAT_WyvSh] + 3 * enemy_unarmored
  set rp[STRAT_HHunters] = rp[STRAT_HHunters] + 3 * enemy_unarmored
  set rp[STRAT_Raiders] = rp[STRAT_Raiders] + 5 * enemy_unarmored
  set rp[STRAT_GruntCatapults] = rp[STRAT_GruntCatapults] + 3 * enemy_unarmored
  set rp[STRAT_HeadCatapults] = rp[STRAT_HeadCatapults] + 5 * enemy_unarmored
  set rp[STRAT_Wyvern] = rp[STRAT_Wyvern] + 5 * enemy_unarmored
  set rp[STRAT_BarrackMix] = rp[STRAT_BarrackMix] + 3 * enemy_unarmored
  set rp[STRAT_BestiaryMix] = rp[STRAT_BestiaryMix] + 5 * enemy_unarmored
  set rp[STRAT_AntiPierce] = rp[STRAT_AntiPierce] + 0 * enemy_unarmored
  set rp[STRAT_AntiAir] = rp[STRAT_AntiAir] + 5 * enemy_unarmored
  set rp[STRAT_OAntiTower] = rp[STRAT_OAntiTower] + 10 * enemy_unarmored
  set rp[STRAT_VersusHuman] = rp[STRAT_VersusHuman] + 3 * enemy_unarmored
  set rp[STRAT_VersusUndead] = rp[STRAT_VersusUndead] + 4 * enemy_unarmored
  set rp[STRAT_VersusElf] = rp[STRAT_VersusElf] + 3 * enemy_unarmored
  set rp[STRAT_NormalOrc] = rp[STRAT_NormalOrc] + 0 * enemy_lightarmor
  set rp[STRAT_FastSh] = rp[STRAT_FastSh] + 1 * enemy_lightarmor
  set rp[STRAT_WyvSh] = rp[STRAT_WyvSh] + 10 * enemy_lightarmor
  set rp[STRAT_HHunters] = rp[STRAT_HHunters] + 10 * enemy_lightarmor
  set rp[STRAT_Raiders] = rp[STRAT_Raiders] + 0 * enemy_lightarmor
  set rp[STRAT_GruntCatapults] = rp[STRAT_GruntCatapults] + 0 * enemy_lightarmor
  set rp[STRAT_HeadCatapults] = rp[STRAT_HeadCatapults] + 8 * enemy_lightarmor
  set rp[STRAT_Wyvern] = rp[STRAT_Wyvern] + 10 * enemy_lightarmor
  set rp[STRAT_BarrackMix] = rp[STRAT_BarrackMix] + 5 * enemy_lightarmor
  set rp[STRAT_BestiaryMix] = rp[STRAT_BestiaryMix] + 5 * enemy_lightarmor
  set rp[STRAT_AntiPierce] = rp[STRAT_AntiPierce] + 0 * enemy_lightarmor
  set rp[STRAT_AntiAir] = rp[STRAT_AntiAir] + 8 * enemy_lightarmor
  set rp[STRAT_OAntiTower] = rp[STRAT_OAntiTower] + 0 * enemy_lightarmor
  set rp[STRAT_VersusHuman] = rp[STRAT_VersusHuman] + 1 * enemy_lightarmor
  set rp[STRAT_VersusUndead] = rp[STRAT_VersusUndead] + 0 * enemy_lightarmor
  set rp[STRAT_VersusElf] = rp[STRAT_VersusElf] + 1 * enemy_lightarmor
  set rp[STRAT_NormalOrc] = rp[STRAT_NormalOrc] + 0 * enemy_mediumarmor
  set rp[STRAT_FastSh] = rp[STRAT_FastSh] + 5 * enemy_mediumarmor
  set rp[STRAT_WyvSh] = rp[STRAT_WyvSh] + 0 * enemy_mediumarmor
  set rp[STRAT_HHunters] = rp[STRAT_HHunters] + 0 * enemy_mediumarmor
  set rp[STRAT_Raiders] = rp[STRAT_Raiders] + 0 * enemy_mediumarmor
  set rp[STRAT_GruntCatapults] = rp[STRAT_GruntCatapults] + 3 * enemy_mediumarmor
  set rp[STRAT_HeadCatapults] = rp[STRAT_HeadCatapults] + 0 * enemy_mediumarmor
  set rp[STRAT_Wyvern] = rp[STRAT_Wyvern] + 0 * enemy_mediumarmor
  set rp[STRAT_BarrackMix] = rp[STRAT_BarrackMix] + 1 * enemy_mediumarmor
  set rp[STRAT_BestiaryMix] = rp[STRAT_BestiaryMix] + -5 * enemy_mediumarmor
  set rp[STRAT_AntiPierce] = rp[STRAT_AntiPierce] + 5 * enemy_mediumarmor
  set rp[STRAT_AntiAir] = rp[STRAT_AntiAir] + 0 * enemy_mediumarmor
  set rp[STRAT_OAntiTower] = rp[STRAT_OAntiTower] + 0 * enemy_mediumarmor
  set rp[STRAT_VersusHuman] = rp[STRAT_VersusHuman] + 0 * enemy_mediumarmor
  set rp[STRAT_VersusUndead] = rp[STRAT_VersusUndead] + 6 * enemy_mediumarmor
  set rp[STRAT_VersusElf] = rp[STRAT_VersusElf] + 0 * enemy_mediumarmor
  set rp[STRAT_NormalOrc] = rp[STRAT_NormalOrc] + 0 * enemy_heavyarmor
  set rp[STRAT_FastSh] = rp[STRAT_FastSh] + 8 * enemy_heavyarmor
  set rp[STRAT_WyvSh] = rp[STRAT_WyvSh] + 5 * enemy_heavyarmor
  set rp[STRAT_HHunters] = rp[STRAT_HHunters] + 0 * enemy_heavyarmor
  set rp[STRAT_Raiders] = rp[STRAT_Raiders] + 0 * enemy_heavyarmor
  set rp[STRAT_GruntCatapults] = rp[STRAT_GruntCatapults] + 0 * enemy_heavyarmor
  set rp[STRAT_HeadCatapults] = rp[STRAT_HeadCatapults] + 0 * enemy_heavyarmor
  set rp[STRAT_Wyvern] = rp[STRAT_Wyvern] + 0 * enemy_heavyarmor
  set rp[STRAT_BarrackMix] = rp[STRAT_BarrackMix] + 0 * enemy_heavyarmor
  set rp[STRAT_BestiaryMix] = rp[STRAT_BestiaryMix] + 5 * enemy_heavyarmor
  set rp[STRAT_AntiPierce] = rp[STRAT_AntiPierce] + 0 * enemy_heavyarmor
  set rp[STRAT_AntiAir] = rp[STRAT_AntiAir] + 0 * enemy_heavyarmor
  set rp[STRAT_OAntiTower] = rp[STRAT_OAntiTower] + 0 * enemy_heavyarmor
  set rp[STRAT_VersusHuman] = rp[STRAT_VersusHuman] + 8 * enemy_heavyarmor
  set rp[STRAT_VersusUndead] = rp[STRAT_VersusUndead] + 0 * enemy_heavyarmor
  set rp[STRAT_VersusElf] = rp[STRAT_VersusElf] + 8 * enemy_heavyarmor

  set rp_strat[STRAT_NormalOrc] = rp_strat[STRAT_NormalOrc] + R2I(rp[STRAT_NormalOrc])
  set rp_strat[STRAT_FastSh] = rp_strat[STRAT_FastSh] + R2I(rp[STRAT_FastSh])
  set rp_strat[STRAT_WyvSh] = rp_strat[STRAT_WyvSh] + R2I(rp[STRAT_WyvSh])
  set rp_strat[STRAT_HHunters] = rp_strat[STRAT_HHunters] + R2I(rp[STRAT_HHunters])
  set rp_strat[STRAT_Raiders] = rp_strat[STRAT_Raiders] + R2I(rp[STRAT_Raiders])
  set rp_strat[STRAT_GruntCatapults] = rp_strat[STRAT_GruntCatapults] + R2I(rp[STRAT_GruntCatapults])
  set rp_strat[STRAT_HeadCatapults] = rp_strat[STRAT_HeadCatapults] + R2I(rp[STRAT_HeadCatapults])
  set rp_strat[STRAT_Wyvern] = rp_strat[STRAT_Wyvern] + R2I(rp[STRAT_Wyvern])
  set rp_strat[STRAT_BarrackMix] = rp_strat[STRAT_BarrackMix] + R2I(rp[STRAT_BarrackMix])
  set rp_strat[STRAT_BestiaryMix] = rp_strat[STRAT_BestiaryMix] + R2I(rp[STRAT_BestiaryMix])
  set rp_strat[STRAT_AntiPierce] = rp_strat[STRAT_AntiPierce] + R2I(rp[STRAT_AntiPierce])
  set rp_strat[STRAT_AntiAir] = rp_strat[STRAT_AntiAir] + R2I(rp[STRAT_AntiAir])
  set rp_strat[STRAT_OAntiTower] = rp_strat[STRAT_OAntiTower] + R2I(rp[STRAT_OAntiTower])
  set rp_strat[STRAT_VersusHuman] = rp_strat[STRAT_VersusHuman] + R2I(rp[STRAT_VersusHuman])
  set rp_strat[STRAT_VersusUndead] = rp_strat[STRAT_VersusUndead] + R2I(rp[STRAT_VersusUndead])
  set rp_strat[STRAT_VersusElf] = rp_strat[STRAT_VersusElf] + R2I(rp[STRAT_VersusElf])

  call finish_strategy_change()
endfunction

function SetRaceAggression takes nothing returns nothing
  set b_race_aggression[0] = 3
  set b_race_aggression[1] = 4
  set b_race_aggression[2] = 5
  set b_race_aggression[3] = 4
  set b_race_aggression[4] = 3
  set b_race_aggression[5] = 2
  set b_race_aggression[6] = 1
  set b_race_aggression[7] = 3
  set b_race_aggression[8] = 5
  set b_race_aggression[9] = -1
  set b_race_aggression[10] = 2
  set b_race_aggression[11] = 3
endfunction

function AMAI_PickMeleeHero takes nothing returns nothing
  local integer i = 0
  //local location l = GetUnitLoc(nearest_neutral[NEUTRAL_TAVERN])

  set hero_number = race_hero_number + ver_neutral_hero_number
  // recalculate_heros occurs only if hero is a tavern hero but tavern is not pathable
  if not recalculate_heros and ver_neutral_heroes_available and neutral_available[NEUTRAL_TAVERN] then //and CanPathToLoc(home_location, l, PATHING_TYPE_WALKABILITY) > 0 then
    call InitNeutralSkills()
	//call Trace("PickMeleeHero: Neutral Hero possible")
  else
    set first_choosable_hero = ver_neutral_hero_number
  endif
  //call RemoveLocation(l)
  //set l = null

  set all_heroes[0] = NAGA_SORCERESS
  set hero_rp[0] = 20
  set all_heroes[1] = BEAST_MASTER
  set hero_rp[1] = 15
  set all_heroes[2] = DARK_RANGER 
  set hero_rp[2] = 19
  set all_heroes[3] = NEUTRAL_PIT_LORD 
  set hero_rp[3] = 8
  set all_heroes[4] = BREW_MASTER 
  set hero_rp[4] = 12
  set all_heroes[5] = GOBLIN_TINKER
  set hero_rp[5] = 3
  set all_heroes[6] = FIRELORD
  set hero_rp[6] = 19
  set all_heroes[7] = ALCHEMIST
  set hero_rp[7] = 3
  set all_heroes[8] = BLADE_MASTER
  set hero_rp[8] = 87
  set all_heroes[9] = FAR_SEER
  set hero_rp[9] = 84
  set all_heroes[10] = TAUREN_CHIEF
  set hero_rp[10] = 66
  set all_heroes[11] = SHADOW_HUNTER
  set hero_rp[11] = 66
  
  
  loop
	exitwhen i > hero_number
    set all_heroes_copy[i] = all_heroes[i]
	set i = i + 1
  endloop

  call AddFavoriteHeroRP()
  call AddStrategyHeroRP(strategy_first_hero[strategy], strategy_first_hero_bonus[strategy])

  // increase the rp for those that are good for certain matchups

  if c_ally_total > 0 then
    set hero_rp[0] = hero_rp[0] + 0
    set hero_rp[1] = hero_rp[1] + 0
    set hero_rp[2] = hero_rp[2] + 0
    set hero_rp[3] = hero_rp[3] + 0
    set hero_rp[4] = hero_rp[4] + 0
    set hero_rp[5] = hero_rp[5] + 0
    set hero_rp[6] = hero_rp[6] + 0
    set hero_rp[7] = hero_rp[7] + 0
    set hero_rp[8] = hero_rp[8] + 0
    set hero_rp[9] = hero_rp[9] + 0
    set hero_rp[10] = hero_rp[10] + 0
    set hero_rp[11] = hero_rp[11] + 0
  endif
  
  if c_enemy[R_RANDOM] > 0 then
    set hero_rp[0] = hero_rp[0] + 0
    set hero_rp[1] = hero_rp[1] + 0
    set hero_rp[2] = hero_rp[2] + 0
    set hero_rp[3] = hero_rp[3] + 0
    set hero_rp[4] = hero_rp[4] + 0
    set hero_rp[5] = hero_rp[5] + 0
    set hero_rp[6] = hero_rp[6] + 0
    set hero_rp[7] = hero_rp[7] + 0
    set hero_rp[8] = hero_rp[8] + 0
    set hero_rp[9] = hero_rp[9] + 0
    set hero_rp[10] = hero_rp[10] + 0
    set hero_rp[11] = hero_rp[11] + 0
  endif

  if c_enemy[R_ELF] > 0 then
    set hero_rp[0] = hero_rp[0] + 0
    set hero_rp[1] = hero_rp[1] + 0
    set hero_rp[2] = hero_rp[2] + 0
    set hero_rp[3] = hero_rp[3] + 0
    set hero_rp[4] = hero_rp[4] + 0
    set hero_rp[5] = hero_rp[5] + 0
    set hero_rp[6] = hero_rp[6] + 0
    set hero_rp[7] = hero_rp[7] + 0
    set hero_rp[8] = hero_rp[8] + 5
    set hero_rp[9] = hero_rp[9] + 10
    set hero_rp[10] = hero_rp[10] + 10
    set hero_rp[11] = hero_rp[11] + 5
  endif

  if c_ally[R_ELF] > 0 then
    set hero_rp[0] = hero_rp[0] + 0
    set hero_rp[1] = hero_rp[1] + 0
    set hero_rp[2] = hero_rp[2] + 0
    set hero_rp[3] = hero_rp[3] + 0
    set hero_rp[4] = hero_rp[4] + 0
    set hero_rp[5] = hero_rp[5] + 0
    set hero_rp[6] = hero_rp[6] + 0
    set hero_rp[7] = hero_rp[7] + 0
    set hero_rp[8] = hero_rp[8] + 0
    set hero_rp[9] = hero_rp[9] + 0
    set hero_rp[10] = hero_rp[10] + 0
    set hero_rp[11] = hero_rp[11] + 0
  endif
  
  if c_enemy[R_HUMAN] > 0 then
    set hero_rp[0] = hero_rp[0] + 0
    set hero_rp[1] = hero_rp[1] + 0
    set hero_rp[2] = hero_rp[2] + 0
    set hero_rp[3] = hero_rp[3] + 0
    set hero_rp[4] = hero_rp[4] + 0
    set hero_rp[5] = hero_rp[5] + 0
    set hero_rp[6] = hero_rp[6] + 0
    set hero_rp[7] = hero_rp[7] + 0
    set hero_rp[8] = hero_rp[8] + 5
    set hero_rp[9] = hero_rp[9] + 10
    set hero_rp[10] = hero_rp[10] + 5
    set hero_rp[11] = hero_rp[11] + 5
  endif

  if c_ally[R_HUMAN] > 0 then
    set hero_rp[0] = hero_rp[0] + 0
    set hero_rp[1] = hero_rp[1] + 0
    set hero_rp[2] = hero_rp[2] + 0
    set hero_rp[3] = hero_rp[3] + 0
    set hero_rp[4] = hero_rp[4] + 0
    set hero_rp[5] = hero_rp[5] + 0
    set hero_rp[6] = hero_rp[6] + 0
    set hero_rp[7] = hero_rp[7] + 0
    set hero_rp[8] = hero_rp[8] + 0
    set hero_rp[9] = hero_rp[9] + 0
    set hero_rp[10] = hero_rp[10] + 0
    set hero_rp[11] = hero_rp[11] + 0
  endif
  
  if c_enemy[R_ORC] > 0 then
    set hero_rp[0] = hero_rp[0] + 0
    set hero_rp[1] = hero_rp[1] + 0
    set hero_rp[2] = hero_rp[2] + 0
    set hero_rp[3] = hero_rp[3] + 0
    set hero_rp[4] = hero_rp[4] + 0
    set hero_rp[5] = hero_rp[5] + 0
    set hero_rp[6] = hero_rp[6] + 0
    set hero_rp[7] = hero_rp[7] + 0
    set hero_rp[8] = hero_rp[8] + 5
    set hero_rp[9] = hero_rp[9] + 10
    set hero_rp[10] = hero_rp[10] + 0
    set hero_rp[11] = hero_rp[11] + 10
  endif

  if c_ally[R_ORC] > 0 then
    set hero_rp[0] = hero_rp[0] + 0
    set hero_rp[1] = hero_rp[1] + 0
    set hero_rp[2] = hero_rp[2] + 0
    set hero_rp[3] = hero_rp[3] + 0
    set hero_rp[4] = hero_rp[4] + 0
    set hero_rp[5] = hero_rp[5] + 0
    set hero_rp[6] = hero_rp[6] + 0
    set hero_rp[7] = hero_rp[7] + 0
    set hero_rp[8] = hero_rp[8] + 0
    set hero_rp[9] = hero_rp[9] + 0
    set hero_rp[10] = hero_rp[10] + 0
    set hero_rp[11] = hero_rp[11] + 0
  endif
  
  if c_enemy[R_UNDEAD] > 0 then
    set hero_rp[0] = hero_rp[0] + 0
    set hero_rp[1] = hero_rp[1] + 0
    set hero_rp[2] = hero_rp[2] + 0
    set hero_rp[3] = hero_rp[3] + 0
    set hero_rp[4] = hero_rp[4] + 0
    set hero_rp[5] = hero_rp[5] + 0
    set hero_rp[6] = hero_rp[6] + 0
    set hero_rp[7] = hero_rp[7] + 0
    set hero_rp[8] = hero_rp[8] + 5
    set hero_rp[9] = hero_rp[9] + 10
    set hero_rp[10] = hero_rp[10] + 5
    set hero_rp[11] = hero_rp[11] + 5
  endif

  if c_ally[R_UNDEAD] > 0 then
    set hero_rp[0] = hero_rp[0] + 0
    set hero_rp[1] = hero_rp[1] + 0
    set hero_rp[2] = hero_rp[2] + 0
    set hero_rp[3] = hero_rp[3] + 0
    set hero_rp[4] = hero_rp[4] + 0
    set hero_rp[5] = hero_rp[5] + 0
    set hero_rp[6] = hero_rp[6] + 0
    set hero_rp[7] = hero_rp[7] + 0
    set hero_rp[8] = hero_rp[8] + 0
    set hero_rp[9] = hero_rp[9] + 0
    set hero_rp[10] = hero_rp[10] + 0
    set hero_rp[11] = hero_rp[11] + 0
  endif
  

  set hero_rp[0] = hero_rp[0] + -15
  set hero_rp[1] = hero_rp[1] + -4
  set hero_rp[2] = hero_rp[2] + -14
  set hero_rp[3] = hero_rp[3] + -8
  set hero_rp[4] = hero_rp[4] + -9
  set hero_rp[5] = hero_rp[5] + -4
  set hero_rp[6] = hero_rp[6] + -14
  set hero_rp[7] = hero_rp[7] + -3
  set hero_rp[8] = hero_rp[8] + 0
  set hero_rp[9] = hero_rp[9] + 22
  set hero_rp[10] = hero_rp[10] + -22
  set hero_rp[11] = hero_rp[11] + -22

  set picked_hero = ChooseFirstHero()
  
  set hero_rp[0] = hero_rp[0] - -15
  set hero_rp[1] = hero_rp[1] - -4
  set hero_rp[2] = hero_rp[2] - -14
  set hero_rp[3] = hero_rp[3] - -8
  set hero_rp[4] = hero_rp[4] - -9
  set hero_rp[5] = hero_rp[5] - -4
  set hero_rp[6] = hero_rp[6] - -14
  set hero_rp[7] = hero_rp[7] - -3
  set hero_rp[8] = hero_rp[8] - 0
  set hero_rp[9] = hero_rp[9] - 22
  set hero_rp[10] = hero_rp[10] - -22
  set hero_rp[11] = hero_rp[11] - -22
  
  
  // increase the rp for those that are better as second or third hero
  set hero_rp[0] = hero_rp[0] + 5
  set hero_rp[1] = hero_rp[1] + -8
  set hero_rp[2] = hero_rp[2] + -5
  set hero_rp[3] = hero_rp[3] + -2
  set hero_rp[4] = hero_rp[4] + 3
  set hero_rp[5] = hero_rp[5] + -1
  set hero_rp[6] = hero_rp[6] + -5
  set hero_rp[7] = hero_rp[7] + -1
  set hero_rp[8] = hero_rp[8] + -28
  set hero_rp[9] = hero_rp[9] + -28
  set hero_rp[10] = hero_rp[10] + 10
  set hero_rp[11] = hero_rp[11] + 12

  call AddStrategyHeroRP(strategy_second_hero[strategy], strategy_second_hero_bonus[strategy])  
  call ChooseSecondHero()
  set hero_rp[0] = hero_rp[0] - 5
  set hero_rp[1] = hero_rp[1] - -8
  set hero_rp[2] = hero_rp[2] - -5
  set hero_rp[3] = hero_rp[3] - -2
  set hero_rp[4] = hero_rp[4] - 3
  set hero_rp[5] = hero_rp[5] - -1
  set hero_rp[6] = hero_rp[6] - -5
  set hero_rp[7] = hero_rp[7] - -1
  set hero_rp[8] = hero_rp[8] - -28
  set hero_rp[9] = hero_rp[9] - -28
  set hero_rp[10] = hero_rp[10] - 10
  set hero_rp[11] = hero_rp[11] - 12
  // ------------------------------------------------------------------------------
  
  set hero_rp[0] = hero_rp[0] + 0
  set hero_rp[1] = hero_rp[1] + -12
  set hero_rp[2] = hero_rp[2] + 0
  set hero_rp[3] = hero_rp[3] + 2
  set hero_rp[4] = hero_rp[4] + 6
  set hero_rp[5] = hero_rp[5] + 0
  set hero_rp[6] = hero_rp[6] + 0
  set hero_rp[7] = hero_rp[7] + 0
  set hero_rp[8] = hero_rp[8] + 0
  set hero_rp[9] = hero_rp[9] + 0
  set hero_rp[10] = hero_rp[10] + 0
  set hero_rp[11] = hero_rp[11] + 0

  call AddStrategyHeroRP(strategy_third_hero[strategy], strategy_third_hero_bonus[strategy])
  call ChooseRestHeroes()
endfunction






function airairBuild takes nothing returns nothing
  local integer cc_airair = 0

	set cc_airair = TownCount(WYVERN)
	if cc_airair >= bn_airair then
	  set strategy = chosen_strategy
	else
	  call BuildUnit( bn_airair, WYVERN, 90  )
	endif
endfunction
function airgroundBuild takes nothing returns nothing
  local integer cc_airground = 0

	set cc_airground = TownCount(WYVERN)
	if cc_airground >= bn_airground then
	  set strategy = chosen_strategy
	else
	  call BuildUnit( bn_airground, WYVERN, 90  )
	endif
endfunction
function groundairBuild takes nothing returns nothing
  local integer cc_groundair = 0

	set cc_groundair = TownCount(HEAD_HUNTER)
	if cc_groundair >= bn_groundair then
	  set strategy = chosen_strategy
	else
	  call BuildUnit( bn_groundair, HEAD_HUNTER, 90  )
	endif
endfunction
function groundgroundBuild takes nothing returns nothing
  local integer cc_groundground = 0

	set cc_groundground = TownCount(GRUNT)
	if cc_groundground >= bn_groundground then
	  set strategy = chosen_strategy
	else
	  call BuildUnit( bn_groundground, GRUNT, 90  )
	endif
endfunction
function farmBuild takes nothing returns nothing
  local integer cc_farm = 0

	set cc_farm = TownCount(BURROW)
	if cc_farm >= bn_farm then
	  set strategy = chosen_strategy
	else
	  call BuildUnit( bn_farm, BURROW, 90  )
	endif
endfunction
function guardBuild takes nothing returns nothing
  local integer cc_guard = 0

	set cc_guard = TownCount(ORC_WATCH_TOWER)
	if cc_guard >= bn_guard then
	  set strategy = chosen_strategy
	else
	  call BuildUnit( bn_guard, ORC_WATCH_TOWER, 90  )
	endif
endfunction

function cmdBuild takes nothing returns nothing
  if false then
  elseif strategy == 50 then
    call airairBuild()
  elseif strategy == 51 then
    call airgroundBuild()
  elseif strategy == 52 then
    call groundairBuild()
  elseif strategy == 53 then
    call groundgroundBuild()
  elseif strategy == 54 then
    call farmBuild()
  elseif strategy == 55 then
    call guardBuild()
  endif
endfunction

function set_skills takes nothing returns nothing
    if hero[1]== NAGA_SORCERESS then
        call LoadSkills(1,1,1)
    elseif hero[2]== NAGA_SORCERESS then
        call LoadSkills(2,1,2)
    elseif hero[3]== NAGA_SORCERESS then
        call LoadSkills(3,1,3)
    endif
    if hero[1]== BEAST_MASTER then
        call LoadSkills(1,2,1)
    elseif hero[2]== BEAST_MASTER then
        call LoadSkills(2,2,2)
    elseif hero[3]== BEAST_MASTER then
        call LoadSkills(3,2,3)
    endif
    if hero[1]== DARK_RANGER  then
        call LoadSkills(1,3,1)
    elseif hero[2]== DARK_RANGER  then
        call LoadSkills(2,3,2)
    elseif hero[3]== DARK_RANGER  then
        call LoadSkills(3,3,3)
    endif
    if hero[1]== NEUTRAL_PIT_LORD  then
        call LoadSkills(1,4,1)
    elseif hero[2]== NEUTRAL_PIT_LORD  then
        call LoadSkills(2,4,2)
    elseif hero[3]== NEUTRAL_PIT_LORD  then
        call LoadSkills(3,4,3)
    endif
    if hero[1]== BREW_MASTER  then
        call LoadSkills(1,5,1)
    elseif hero[2]== BREW_MASTER  then
        call LoadSkills(2,5,2)
    elseif hero[3]== BREW_MASTER  then
        call LoadSkills(3,5,3)
    endif
    if hero[1]== GOBLIN_TINKER then
        call LoadSkills(1,6,1)
    elseif hero[2]== GOBLIN_TINKER then
        call LoadSkills(2,6,2)
    elseif hero[3]== GOBLIN_TINKER then
        call LoadSkills(3,6,3)
    endif
    if hero[1]== FIRELORD then
        call LoadSkills(1,7,1)
    elseif hero[2]== FIRELORD then
        call LoadSkills(2,7,2)
    elseif hero[3]== FIRELORD then
        call LoadSkills(3,7,3)
    endif
    if hero[1]== ALCHEMIST then
        call LoadSkills(1,8,1)
    elseif hero[2]== ALCHEMIST then
        call LoadSkills(2,8,2)
    elseif hero[3]== ALCHEMIST then
        call LoadSkills(3,8,3)
    endif
    if hero[1]== BLADE_MASTER then
        call LoadSkills(1,9,1)
    elseif hero[2]== BLADE_MASTER then
        call LoadSkills(2,9,2)
    elseif hero[3]== BLADE_MASTER then
        call LoadSkills(3,9,3)
    endif
    if hero[1]== FAR_SEER then
        call LoadSkills(1,10,1)
    elseif hero[2]== FAR_SEER then
        call LoadSkills(2,10,2)
    elseif hero[3]== FAR_SEER then
        call LoadSkills(3,10,3)
    endif
    if hero[1]== TAUREN_CHIEF then
        call LoadSkills(1,11,1)
    elseif hero[2]== TAUREN_CHIEF then
        call LoadSkills(2,11,2)
    elseif hero[3]== TAUREN_CHIEF then
        call LoadSkills(3,11,3)
    endif
    if hero[1]== SHADOW_HUNTER then
        call LoadSkills(1,12,1)
    elseif hero[2]== SHADOW_HUNTER then
        call LoadSkills(2,12,2)
    elseif hero[3]== SHADOW_HUNTER then
        call LoadSkills(3,12,3)
    endif
endfunction

function setup_force takes boolean inj returns nothing

    set wave = wave + 1

    call InitAssaultGroup()

    if inj then
      call RemoveInjuries()
    endif

    call SetMeleeGroupAM( hero[1]    )
    call SetMeleeGroupAM( hero[2]   )
    call SetMeleeGroupAM( hero[3]   )
    call SetMeleeGroupAM( CATAPULT      )
    call SetMeleeGroupAM( WITCH_DOCTOR      )
    call SetMeleeGroupAM( GRUNT      )
    call SetMeleeGroupAM( HEAD_HUNTER      )
    call SetMeleeGroupAM( BERSERKER      )
    call SetMeleeGroupAM( KODO_BEAST      )
    call SetMeleeGroupAM( RAIDER      )
    call SetMeleeGroupAM( SHAMAN      )
    call SetMeleeGroupAM( TAUREN      )
    call SetMeleeGroupAM( WYVERN      )
    call SetMeleeGroupAM( BATRIDER      )
    call SetMeleeGroupAM( SPIRIT_WALKER      )
    call SetMeleeGroupAM( SPIRIT_WALKER_M      )
    call SetMeleeGroupAM( GOBLIN_TINKER_M      )
    call SetMeleeGroupAM( ALCHEMIST_M1      )
    call SetMeleeGroupAM( ALCHEMIST_M2      )
    call SetMeleeGroupAM( ALCHEMIST_M3      )
    
    call AttackGroupAddNeutrals()

endfunction



function basic_melee takes integer food, integer prio returns nothing
    call FoodPoolAM(food, true, race_simple_melee, GetFoodUsed(old_id[race_simple_melee]), CanBuildUnit(race_advanced_melee), race_advanced_melee, GetFoodUsed(old_id[race_advanced_melee]), prio)
endfunction

function setup_ghouls takes nothing returns nothing
  local integer gn = TownCountDone(racial_ghoul)
  local integer wood = GetWood()
  if wood > minimum_peon_wood then
    set take_all_ghouls_along = true
  elseif wood < minimum_peon_wood then
    set take_all_ghouls_along = false
  endif
  if take_all_ghouls_along then
    set attacking_ghouls = gn - Max(1 - (R2I(shredder_peon_count/2) * TownCountDone(neutral_shredder)), 0)
	set harvesting_ghouls = 0
  elseif wave <= 4 then
    set attacking_ghouls = Max(6, gn - 2)
	set harvesting_ghouls = 1
  //elseif wave==2 then
  //  set attacking_ghouls = Max(6, gn - 2)
 // elseif wood < maximum_peon_wood then
    //set attacking_ghouls = gn - Max((gn - 4) - (4 * TownCountDone(neutral_shredder)), 0)
  //elseif wood > maximum_peon_wood and wood < minimum_peon_wood / 2 then
  //  set attacking_ghouls = gn - Max(2 - (4 * TownCountDone(neutral_shredder)), 0)
  else
	  //set harvesting_ghouls = Max(0,Min(5 - wood / R2I(maximum_peon_wood*1),gn) - (R2I(shredder_peon_count/2) * TownCountDone(neutral_shredder)))
    set harvesting_ghouls = Max(1,Min(5 - wood / R2I(maximum_peon_wood*1),gn) - (R2I(shredder_peon_count/2) * TownCountDone(neutral_shredder)))
	  set attacking_ghouls = gn - harvesting_ghouls 
  endif
  set attacking_ghouls = Min(Max(attacking_ghouls, 0), gn)
endfunction

//============================================================================
//  global builds
//============================================================================
function global_init_strategy takes nothing returns nothing
    call AddBlock(1, ORC_ALTAR, true, 0, VOODOO_LOUNGE, 36)
    call AddBlock(1, ORC_BARRACKS, true, 0, VOODOO_LOUNGE, 36)
    call AddBlock(1, GRUNT, false, 0, VOODOO_LOUNGE, 36)
    call AddBlock(1, STRONGHOLD, false, 0, VOODOO_LOUNGE, 36)
    //if not towerrush then
    	//call AddBlock(1, ORC_BARRACKS, false, 0, FORGE, 60)
    //endif
    call AddBlock(8, ORC_ALTAR, true, 0, BURROW, 1)
    call AddHarass(1, 1, GRUNT)
    call AddHarass(3, 2, WYVERN)
    call AddHarass(4, 1, BLADE_MASTER)

	call AddBlock(8, HUMAN_ALTAR, true, 1, ORC_ALTAR, 360)






































































































endfunction
function global_build_sequence takes nothing returns nothing
	  call DefendTownsDone(1, BURROW, 70)
	  call DefendTownsDone(2, ORC_WATCH_TOWER, 70)

          call BuildAtMine(1, ORC_WATCH_TOWER, 40)
          call BuildFront(2, ORC_WATCH_TOWER, 35)

	if tier == 3 and GetGold() > 2000 then
		call DefendTownsDone(1, BURROW, 70)
		call DefendTownsDone(2, ORC_WATCH_TOWER, 70)
		call DefendTownsDone(4, ORC_WATCH_TOWER, 35)
		call BuildFront(4, ORC_WATCH_TOWER, 35)
		if TownCount(ORC_WATCH_TOWER) >= 4 and TownCount(VOODOO_LOUNGE) < 2 then
			call DefendTownsDone(1, VOODOO_LOUNGE, 40)
		endif
	endif

          if urgent_healing_count > 3 then
          call BuildItem(1, HEALING_SALVE, 120)
	  else
          call BuildItem(1, HEALING_SALVE, 50)
          endif
          //call BuildItem(2, HEALING_SALVE, 50)
		if urgent_healing_count > 2 then
			call BuildItem(2, HEALING_SALVE, 50)
		endif
          call BuildItem(1, M_SCROLL_OF_HEALING, 55)
          
          //call BuildItem(1, SCROLL_OF_SPEED, 70)
		if TownCountDone(GRUNT)>3 then
			call BuildItem(1, SCROLL_OF_SPEED, 40)
		endif
	//call BuildItem(2, M_SCROLL_OF_HEALING, 40)
          //call BuildItem(1, SCROLL_OF_PROTECTION, 40)
          call BuildItem(1, POTION_OF_LESSER_INVULNERBILITY, 50)
	  //if hero[1] == BLADE_MASTER then
	//if hero[1] == BLADE_MASTER and tier < 3 then
		//call BuildItem(1, LESSER_CLARITY_POTION, 70)
	  //endif
      if tier == 1 then
	call BuildItem(1, M_TOWN_PORTAL, 100)
      endif
          if tier > 1 then
            call BuildItem(1, HEALING_POTION, 70)
            call BuildItem(1, TOWN_PORTAL, 180)
		//if urgent_healing_count > 3 then
			call BuildItem(2, M_SCROLL_OF_HEALING, 40)
		//endif
          endif
          call BuildUnit(1, VOODOO_LOUNGE, 80+(20*(tier-1)))

	// DYNAMIC
	call ResetDynamicSystem()
	if tier == 1 then
		call ResetDynamicSystem()
		call AddUnitToAntiair(HEAD_HUNTER,29)
		call AddUnitToAntiair(STRONGHOLD,1)
		call AddUnitToAnticasters(HEAD_HUNTER,29)
		call AddUnitToAnticasters(STRONGHOLD,1)
		call AddUnitToAntitowers(CATAPULT,29)
		call AddUnitToAntitowers(STRONGHOLD,1)
		call AddUnitToAntipiercing(GRUNT, 29)
		call AddUnitToAntipiercing(STRONGHOLD, 1)
		call AddUnitToAntinormal(GRUNT, 30)
		call AddUnitToAntisiege(GRUNT,29)
		call AddUnitToAntisiege(STRONGHOLD,1)
		call AddUnitToAntimagic(HEAD_HUNTER,29)
		call AddUnitToAntimagic(STRONGHOLD,1)
		call AddUnitToAntiunarmored(HEAD_HUNTER,30)
		call AddUnitToAntiunarmored(CATAPULT,7)
		call AddUnitToAntiunarmored(STRONGHOLD,1)
		call AddUnitToAntilightarmor(HEAD_HUNTER,1)
		call AddUnitToAntimediumarmor(STRONGHOLD,1)
		call AddUnitToAntimediumarmor(GRUNT,30)
		call AddUnitToAntiheavyarmor(GRUNT,29)
		call AddUnitToAntiheavyarmor(STRONGHOLD,1)
		call DynamicBuildUnit(40, 40)
	elseif tier == 2 then
		call ResetDynamicSystem()
		call AddUnitToAntiair(HEAD_HUNTER,1)
		call AddUnitToAntiair(BATRIDER,1)
		call AddUnitToAntiair(RAIDER,1)

		call AddUnitToAnticasters(SPIRIT_WALKER,15)
		call AddUnitToAnticasters(SHAMAN,5)

		call AddUnitToAntitowers(CATAPULT,8)
		call AddUnitToAntitowers(BATRIDER,1)
		call AddUnitToAntitowers(RAIDER,1)

		call AddUnitToAntipiercing(RAIDER, 1)
		call AddUnitToAntipiercing(HEAD_HUNTER, 1)

		call AddUnitToAntinormal(GRUNT, 19)
		call AddUnitToAntinormal(KODO_BEAST, 1)
		call AddUnitToAntinormal(TAUREN,10)

		call AddUnitToAntisiege(HEAD_HUNTER,1)
		call AddUnitToAntisiege(RAIDER,5)
		call AddUnitToAntisiege(WYVERN,5)

		call AddUnitToAntimagic(HEAD_HUNTER,1)
		call AddUnitToAntimagic(RAIDER,5)

		call AddUnitToAntiunarmored(HEAD_HUNTER,2)
		call AddUnitToAntiunarmored(WYVERN,5)
		call AddUnitToAntiunarmored(RAIDER,5)

		call AddUnitToAntilightarmor(HEAD_HUNTER,3)
		call AddUnitToAntilightarmor(WYVERN,1)

		call AddUnitToAntimediumarmor(GRUNT,19)
		call AddUnitToAntimediumarmor(KODO_BEAST,1)
		call AddUnitToAntimediumarmor(TAUREN,10)

		call AddUnitToAntiheavyarmor(SHAMAN,15)
		call AddUnitToAntiheavyarmor(WITCH_DOCTOR,2)
		call AddUnitToAntiheavyarmor(SPIRIT_WALKER,3)
		call AddUnitToAntiheavyarmor(WYVERN,5)
		//call DynamicBuildUnit(75, 40)
		call DynamicBuildUnit(64, 40)
	else
		call ResetDynamicSystem()
		call AddUnitToAntiair(HEAD_HUNTER,1)
		call AddUnitToAntiair(BATRIDER,1)
		call AddUnitToAntiair(RAIDER,1)

		call AddUnitToAnticasters(SPIRIT_WALKER,15)
		call AddUnitToAnticasters(SHAMAN,5)

		call AddUnitToAntitowers(CATAPULT,8)
		call AddUnitToAntitowers(BATRIDER,1)
		call AddUnitToAntitowers(RAIDER,1)

		call AddUnitToAntipiercing(RAIDER, 1)
		call AddUnitToAntipiercing(HEAD_HUNTER, 1)

		call AddUnitToAntinormal(TAUREN, 19)
		call AddUnitToAntinormal(KODO_BEAST, 1)

		call AddUnitToAntisiege(HEAD_HUNTER,1)
		call AddUnitToAntisiege(RAIDER,5)
		call AddUnitToAntisiege(WYVERN,5)

		call AddUnitToAntimagic(HEAD_HUNTER,1)
		call AddUnitToAntimagic(RAIDER,5)

		call AddUnitToAntiunarmored(HEAD_HUNTER,2)
		call AddUnitToAntiunarmored(WYVERN,7)
		call AddUnitToAntiunarmored(RAIDER,7)

		call AddUnitToAntilightarmor(HEAD_HUNTER,1)
		call AddUnitToAntilightarmor(WYVERN,1)

		call AddUnitToAntimediumarmor(TAUREN,10)
		call AddUnitToAntimediumarmor(KODO_BEAST,1)

		call AddUnitToAntiheavyarmor(SHAMAN,15)
		call AddUnitToAntiheavyarmor(WITCH_DOCTOR,2)
		call AddUnitToAntiheavyarmor(SPIRIT_WALKER,3)
		call AddUnitToAntiheavyarmor(WYVERN,5)
		call DynamicBuildUnit(100, 40)
	endif

    // Global upgrades

      // TIER 1 UPGRADES
      //--------------------------------------------------------
		if tier == 1 then
		endif
	  	//call BuildAdvUpgr2(3, UPG_ORC_MELEE, 1,TownCountDone(GRUNT) + TownCountDone(TAUREN) + TownCountDone(RAIDER), 5,5,35)
   		//call BuildAdvUpgr2(3, UPG_ORC_ARMOR, 1,TownCountDone(GRUNT) + TownCountDone(TAUREN) + TownCountDone(RAIDER) + TownCountDone(HEAD_HUNTER) + TownCountDone(CATAPULT) + TownCountDone(KODO_BEAST) + TownCountDone(WYVERN) + TownCountDone(BATRIDER), 5,5,35)
		//call BuildAdvUpgr2(3, UPG_ORC_RANGED, 1,TownCountDone(HEAD_HUNTER) + TownCountDone(CATAPULT) + TownCountDone(KODO_BEAST) + TownCountDone(WYVERN) + TownCountDone(BATRIDER), 5,5,35)
		call BuildAdvUpgr(3, UPG_ORC_MELEE, 1,TownCountDone(GRUNT) + TownCountDone(TAUREN) + TownCountDone(RAIDER), 20,8,40)
		call BuildAdvUpgr(3, UPG_ORC_ARMOR, 1,TownCountDone(GRUNT) + TownCountDone(TAUREN) + TownCountDone(RAIDER) + TownCountDone(HEAD_HUNTER) + TownCountDone(CATAPULT) + TownCountDone(KODO_BEAST) + TownCountDone(WYVERN) + TownCountDone(BATRIDER), 20,8,40)
		call BuildAdvUpgr(3, UPG_ORC_RANGED, 1,TownCountDone(HEAD_HUNTER) + TownCountDone(CATAPULT) + TownCountDone(KODO_BEAST) + TownCountDone(WYVERN) + TownCountDone(BATRIDER), 20,8,40)

	  
      // TIER 2 UPGRADES
      //--------------------------------------------------------
		if tier >= 2 then
		endif
		if not (c_enemy_total == c_enemy[R_ELF]) then
			call BuildAdvUpgr(2, UPG_ORC_SPIKES, 1, 1, 1, 10, 10)
		endif
		//call BuildAdvUpgr2(1, UPG_ORC_PILLAGE, 2,TownCountDone(RAIDER) + TownCountDone(GRUNT),0.5,15,50)
	  	//call BuildAdvUpgr2(1, UPG_ORC_WAR_DRUMS, 2,TownCountDone(KODO_BEAST),0.25,10,50)
		//call BuildAdvUpgr2(1, UPG_ORC_ENSNARE, 2,TownCountDone(RAIDER),0.33,15,70)
		//call BuildAdvUpgr2(1, UPG_ORC_REGEN, 2,TownCountDone(HEAD_HUNTER)+TownCountDone(BATRIDER),1,15,45)
		//call BuildAdvUpgr2(2, UPG_ORC_SHAMAN, 2,TownCountDone(SHAMAN),0.33,15,80)
		//call BuildAdvUpgr2(2, UPG_ORC_DOCS, 2,TownCountDone(WITCH_DOCTOR), 0.33,15,80)
		//call BuildAdvUpgr2(2, UPG_ORC_SWALKER, 2,TownCountDone(SPIRIT_WALKER), 0.33,15,80)
		//call BuildAdvUpgr2(2, UPG_ORC_BERSERK, 2, TownCountDone(GRUNT), 0.33,15,60)	  
		call BuildAdvUpgr(1, UPG_ORC_PILLAGE, 2,TownCountDone(RAIDER) + TownCountDone(GRUNT),8,5,65)
		call BuildAdvUpgr(1, UPG_ORC_WAR_DRUMS, 2,TownCountDone(KODO_BEAST),3,5,60)
		call BuildAdvUpgr(1, UPG_ORC_ENSNARE, 2,TownCountDone(RAIDER),5,5,85)
		call BuildAdvUpgr(1, UPG_ORC_REGEN, 2,TownCountDone(HEAD_HUNTER)+TownCountDone(BATRIDER),15,5,60)
		call BuildAdvUpgr(2, UPG_ORC_SHAMAN, 2,TownCountDone(SHAMAN),5,5,95)
		call BuildAdvUpgr(2, UPG_ORC_DOCS, 2,TownCountDone(WITCH_DOCTOR), 5,5,95)
		call BuildAdvUpgr(2, UPG_ORC_SWALKER, 2,TownCountDone(SPIRIT_WALKER), 5,5,95)
		call BuildAdvUpgr(2, UPG_ORC_BERSERK, 2, TownCountDone(GRUNT), 5,5,75)	  

	 	//if towerrush then
        	//	call BuildAdvUpgr(1, UPG_ORC_BURROWS, 2,1,1,0,40)
	  	//else
		//	call BuildAdvUpgr(1, UPG_ORC_BURROWS, 2, 1,1,0,40)
		//endif
		call BuildAdvUpgr(1, UPG_ORC_BURROWS, 2,1,1,0,40)


      // TIER 3 UPGRADES
      //--------------------------------------------------------
		if tier == 3 then
		endif
		//call BuildAdvUpgr2(1, UPG_ORC_NAPTHA, 3,TownCountDone(CATAPULT),0.25,15,50)
		//call BuildAdvUpgr2(1, UPG_ORC_BERSERKER, 3,TownCountDone(HEAD_HUNTER), 0.33,15,60)
        //call BuildAdvUpgr2(1, UPG_ORC_VENOM, 3,TownCountDone(WYVERN),0.33,15,70)
		//call BuildAdvUpgr2(1, UPG_ORC_PULVERIZE, 3,TownCountDone(TAUREN),0.25,15,60)
		//call BuildAdvUpgr2(1, UPG_ORC_FIRE, 3,TownCountDone(BATRIDER),0.33,15,60)
		//call BuildAdvUpgr2(1, UPG_ORC_WAR_DRUMS,3, TownCountDone(KODO_BEAST),0.25,15,40)
		call BuildAdvUpgr(1, UPG_ORC_NAPTHA, 3,TownCountDone(CATAPULT),4,5,65)
		call BuildAdvUpgr(1, UPG_ORC_BERSERKER, 3,TownCountDone(HEAD_HUNTER), 5,5,75)
		call BuildAdvUpgr(1, UPG_ORC_VENOM, 3,TownCountDone(WYVERN),5,5,85)
		call BuildAdvUpgr(1, UPG_ORC_PULVERIZE, 3,TownCountDone(TAUREN),4,5,75)
		call BuildAdvUpgr(1, UPG_ORC_FIRE, 3,TownCountDone(BATRIDER),5,5,75)
	  


          // Global Mercenaries
          call BuildUnit(2, merc_healer, 70)

          // Harass
          call Harass(1, HARASS_TARGET_PEONS, true, 4, 0.75, 0, GetPlayerRace(nearest_enemy) != RACE_UNDEAD and TownCountDone(GRUNT) > 4, 40, 80)
          call Harass(3, HARASS_TARGET_PEONS, true, 5, 0.85, 0, GetPlayerRace(nearest_enemy) != RACE_UNDEAD and TownCountDone(WYVERN) > 4, 120, 160)
	  call Harass(4, HARASS_TARGET_PEONS, false, 12, 0.25, 0, hero[1] == BLADE_MASTER and hero_skills[1] == HERO_SKILL_MINOR and not towerrush and GetPlayerRace(nearest_enemy) != RACE_UNDEAD, 36, 150)








































































































endfunction

//============================================================================
//  build_sequence
//============================================================================
function init_strategy_NormalOrc takes nothing returns nothing

    call AddHarass(2, 5, GRUNT)
    set distraction_group = 2
























endfunction
function build_sequence_NormalOrc takes nothing returns nothing
if tier == 3 then
      call BuildUnit(1, hero[1], 140)
      call BuildUnit(1, hero[2], 130)
      call BuildUnit(1, hero[3], 120)

      call BuildUnit(6, GRUNT, 40)
      call BuildUnit(4, TAUREN, 44)
      call BuildUnit(3, WYVERN, 46)
      call BuildUnit(2, BATRIDER, 48)
      call BuildUnit(4, RAIDER, 44)
      call BuildUnit(1, KODO_BEAST, 50 )
      call BuildUnit(4, SHAMAN, 44)
      //call BuildUnit(2, WITCH_DOCTOR, 48)
      call BuildUnit(1, SPIRIT_WALKER, 50)
      call BuildUnit(2, CATAPULT, 48)
      //call BuildUnit(1, hero[1], 80)
      //call BuildUnit(1, hero[2], 60)
      //call BuildUnit(1, hero[3], 50)

	call BuildUnit(4, WITCH_DOCTOR, 70)
	call BuildUpgr(2, UPG_ORC_DOCS, 75)

























elseif tier == 2 then

      call BuildUnit(1, hero[1], 80)     
      call BuildUnit(1, hero[2], 60)
      call BuildUnit(1, VOODOO_LOUNGE, 60)

      call BuildUnit(3, GRUNT, 50)
      call BuildUnit(3, HEAD_HUNTER, 50)
      call BuildUnit(2, CATAPULT, 52)
      call BuildUnit(1, FORTRESS, 40)
      call BuildUnit(1, SHAMAN, 54)
      call BuildUnit(1, SPIRIT_WALKER, 54)
      call BuildUnit(1, WITCH_DOCTOR, 54)
      call BuildUnit(2, WYVERN, 52)
      call BuildUnit(3, RAIDER, 50)

      call BuildUpgr(1, UPG_ORC_SPIKES, 60)

























else
	call BuildUnit(1, hero[1], 150)
      //call BuildUnit(1, hero[1], 80)     
      call BuildUnit(2, GRUNT, 60)
      call BuildUnit(1, HEAD_HUNTER, 55)
      call BuildUnit(1, VOODOO_LOUNGE, 54)
      call BuildUnit(3, HEAD_HUNTER, 46)
      call BuildUnit(4, GRUNT, 38)
      call BasicExpansionAM( GetMinesOwned() < 2 ,GREAT_HALL, 37)
      call BuildFront(1, ORC_WATCH_TOWER, 36)
      call BuildUnit(6, GRUNT, 25)
      call BuildUnit(1, STRONGHOLD, 24)
      call BuildUnit(2, CATAPULT, 22)


























endif
endfunction

//============================================================================
//  build_sequence
//============================================================================
function init_strategy_FastSh takes nothing returns nothing

    //call AddHarass(2, 1, TAUREN)
    //set distraction_group = 2






























endfunction
function build_sequence_FastSh takes nothing returns nothing
if tier == 3 then
      call BuildUnit(1, hero[1], 140)
      call BuildUnit(1, hero[2], 130)
      call BuildUnit(1, hero[3], 120)

      call BuildUnit(10, TAUREN, 45)
      call BuildUnit(7, SPIRIT_WALKER, 48)
      call BuildUnit(10, SHAMAN, 45)
      //call BuildUnit(1, hero[1], 90)
      //call BuildUnit(1, hero[2], 70)
      call BuildUnit(1, VOODOO_LOUNGE, 50)
      call BuildUnit(1, ZEPPELIN, 50)

      call BuildUpgr(2, UPG_ORC_SWALKER, 62)
      call BuildUpgr(2, UPG_ORC_SHAMAN, 65)
      call BuildUpgr(1, UPG_ORC_PULVERIZE, 65)

	call BuildUnit(4, WITCH_DOCTOR, 70)
	call BuildUpgr(2, UPG_ORC_DOCS, 75)
































elseif tier == 2 then
      call BuildUnit(5, GRUNT, 65)
      call BuildUnit(5, SPIRIT_WALKER, 60)
      call BuildUnit(10, SHAMAN, 60)
      call BuildUnit(1, FORTRESS, 60)
      call BuildUnit(1, hero[1], 80)
	call BuildUnit(1, hero[2], 70)
	call BuildUnit(2, TAUREN, 60)

      call BuildUpgr(1, UPG_ORC_SWALKER, 75)
      call BuildUpgr(1, UPG_ORC_SHAMAN, 80)
































else
	call BuildUnit(1, hero[1], 150)
      call BuildFront(2, ORC_WATCH_TOWER, 42)
      	//call BuildUnit(1, hero[1], 80)
      	call BuildUnit(10, GRUNT, 40)
        call BuildUnit(1, STRONGHOLD, 50)































endif
endfunction

//============================================================================
//  build_sequence
//============================================================================
function init_strategy_WyvSh takes nothing returns nothing

    call AddHarass(2, 2, WYVERN)
    set distraction_group = 2































endfunction
function build_sequence_WyvSh takes nothing returns nothing
if tier == 3 then
      call BuildUnit(1, hero[1], 140)
      call BuildUnit(1, hero[2], 130)
      call BuildUnit(1, hero[3], 120)

      call BuildUnit(14, WYVERN, 42)
      call BuildUnit(8, SHAMAN, 54)
      //call BuildUnit(1, hero[1], 80)
      //call BuildUnit(1, hero[2], 60)
      call BuildUnit(1, VOODOO_LOUNGE, 50)

      call BuildUpgr(2, UPG_ORC_SHAMAN, 70)
      call BuildUpgr(1, UPG_ORC_VENOM, 70)

	call BuildUnit(4, WITCH_DOCTOR, 70)
	call BuildUpgr(2, UPG_ORC_DOCS, 75)


































elseif tier == 2 then

      call BuildUnit(10, WYVERN, 40)
      call BuildUnit(5, SHAMAN, 50)
	call BuildUnit(3, GRUNT, 50)
      call BuildUnit(1, hero[1], 80)
      call BuildUnit(1, hero[2], 40)
      call BuildUnit(1, FORTRESS, 20)
      call BuildUnit(1, VOODOO_LOUNGE, 50)

      call BuildUpgr(1, UPG_ORC_SHAMAN, 60)




































else
	call BuildUnit(1, hero[1], 150)
      call BuildFront(2, ORC_WATCH_TOWER, 42)
	//call BuildUnit(1, hero[1], 80)
	call BuildUnit(10, GRUNT, 40)
        call BuildUnit(1, STRONGHOLD, 50)

































endif
endfunction

//============================================================================
//  build_sequence
//============================================================================

//============================================================================
//  build_sequence
//============================================================================
function init_strategy_HHunters takes nothing returns nothing
    //call AddRBlock(385, 50, 0, 0, ORC_BARRACKS, 60)
    //call AddBlock(1, FORGE, false, 1, BURROW, 60)
    call AddBlock(1, ORC_ALTAR, false, 1, BURROW, 60)
    //call AddBlock(1, FORGE, false, 9, PEON, 60)

    call AddHarass(2, 3, HEAD_HUNTER)
    set distraction_group = 2
























endfunction
function build_sequence_HHunters takes nothing returns nothing
if tier == 3 then
      call BuildUnit(1, hero[1], 140)
      call BuildUnit(1, hero[2], 130)
      call BuildUnit(1, hero[3], 120)

      call BuildUnit(3, merc_range, 70)
      call BuildUnit(32, HEAD_HUNTER, 20)
      //call BuildUnit(1, hero[1], 80)
      //call BuildUnit(1, hero[2], 60)
      //call BuildUnit(1, hero[3], 40)
      call BuildUnit(1, VOODOO_LOUNGE, 50)

      call BuildUpgr(1, UPG_ORC_REGEN, 84)
      call BuildUpgr(1, UPG_ORC_BERSERKER, 84)

	call BuildUnit(4, WITCH_DOCTOR, 70)
	call BuildUpgr(2, UPG_ORC_DOCS, 75)




























elseif tier == 2 then

      call BuildUnit(2, merc_range, 70)
      call BuildUnit(20, HEAD_HUNTER, 30)
      call BuildUnit(1, hero[1], 80)
      call BuildUnit(1, hero[2], 60)
      call BuildUnit(1, FORTRESS, 10)
      call BuildUnit(1, VOODOO_LOUNGE, 50)

      call BuildUpgr(1, UPG_ORC_REGEN, 70)




























else
	call BuildUnit(1, hero[1], 150)
      call BuildUnit(1, merc_rush, 60)
      call BuildUnit(12, HEAD_HUNTER, 38)
      //call BuildUnit(1, hero[1], 80)
      call BuildUnit(1, STRONGHOLD, 50)





























endif
endfunction

//============================================================================
//  build_sequence
//============================================================================
function init_strategy_Raiders takes nothing returns nothing

    call AddHarass(2, 2, RAIDER)
    set distraction_group = 2























endfunction
function build_sequence_Raiders takes nothing returns nothing
if tier == 3 then
      call BuildUnit(1, hero[1], 140)
      call BuildUnit(1, hero[2], 130)
      call BuildUnit(1, hero[3], 120)

      call BuildUnit(18, RAIDER, 40)
      //call BuildUnit(1, hero[1], 80)
      //call BuildUnit(1, hero[2], 60)
      //call BuildUnit(1, hero[3], 40)
      call BuildUnit(1, VOODOO_LOUNGE, 50)

      call BuildUpgr(1, UPG_ORC_ENSNARE, 76)

	call BuildUnit(4, WITCH_DOCTOR, 70)
	call BuildUpgr(2, UPG_ORC_DOCS, 75)






















elseif tier == 2 then

      call BuildUnit(12, RAIDER, 50)
	call BuildUnit(3, GRUNT, 50)
      call BuildUnit(1, hero[1], 80)
      call BuildUnit(1, hero[2], 60)
      call BuildUnit(1, FORTRESS, 10)
      call BuildUnit(1, VOODOO_LOUNGE, 50)

      call BuildUpgr(1, UPG_ORC_ENSNARE, 74)
























else
	call BuildUnit(1, hero[1], 150)
      call BuildFront(2, ORC_WATCH_TOWER, 42)
	//call BuildUnit(1, hero[1], 80)
	call BuildUnit(10, GRUNT, 40)
        call BuildUnit(1, STRONGHOLD, 50)
























endif
endfunction

//============================================================================
//  build_sequence
//============================================================================
function init_strategy_GruntCatapults takes nothing returns nothing

    call AddHarass(2, 1, GRUNT)
    //call AddHarass(2, 1, CATAPULT)
    set distraction_group = 2
























endfunction
function build_sequence_GruntCatapults takes nothing returns nothing
if tier == 3 then
      call BuildUnit(1, hero[1], 140)
      call BuildUnit(1, hero[2], 130)
      call BuildUnit(1, hero[3], 120)

      call BuildUnit(20, GRUNT, 60)
      call BuildUnit(6, CATAPULT, 88)
      //call BuildUnit(1, hero[1], 80)
      //call BuildUnit(1, hero[2], 60)
      //call BuildUnit(1, hero[3], 40)
      call BuildUnit(1, VOODOO_LOUNGE, 50)
      call BuildUnit(1, ZEPPELIN, 50)

      call BuildUpgr(1, UPG_ORC_NAPTHA, 100)
      call BuildUpgr(1, UPG_ORC_BERSERK, 100)

	call BuildUnit(4, WITCH_DOCTOR, 70)
	call BuildUpgr(2, UPG_ORC_DOCS, 75)






















elseif tier == 2 then

      call BuildUnit(10, GRUNT, 60)
      call BuildUnit(4, CATAPULT, 52)
      call BuildUnit(1, hero[1], 80)
      call BuildUnit(1, hero[2], 60)
      call BuildUnit(1, FORTRESS, 10)
      call BuildUnit(1, VOODOO_LOUNGE, 50)
      call BuildUnit(1, ZEPPELIN, 50)

      call BuildUpgr(1, UPG_ORC_BERSERK, 80)

























else
	call BuildUnit(1, hero[1], 150)
      call BuildUnit(10, GRUNT, 50)
      call BuildUnit(1, CATAPULT, 30)
      //call BuildUnit(1, hero[1], 80)
      call BuildUnit(1, STRONGHOLD, 60)


























endif
endfunction

//============================================================================
//  build_sequence
//============================================================================
function init_strategy_HeadCatapults takes nothing returns nothing
    call AddRBlock(385, 50, 0, 0, ORC_BARRACKS, 60)
    //call AddBlock(1, FORGE, false, 1, BURROW, 60)
    call AddBlock(1, ORC_ALTAR, false, 1, BURROW, 60)
    //call AddBlock(1, FORGE, false, 9, PEON, 60)

    call AddHarass(2, 3, HEAD_HUNTER)
    //call AddHarass(2, 1, CATAPULT)
    set distraction_group = 2




























endfunction
function build_sequence_HeadCatapults takes nothing returns nothing
if tier == 3 then
      call BuildUnit(1, hero[1], 140)
      call BuildUnit(1, hero[2], 130)
      call BuildUnit(1, hero[3], 120)

      call BuildUnit(3, merc_range, 70)
      call BuildUnit(16, HEAD_HUNTER, 40)
      //call BuildUnit(8, CATAPULT, 56)
		call BuildUnit(6, CATAPULT, 56)
      //call BuildUnit(1, hero[1], 80)
      //call BuildUnit(1, hero[2], 60)
      //call BuildUnit(1, hero[3], 40)
      call BuildUnit(1, VOODOO_LOUNGE, 50)

      call BuildUpgr(1, UPG_ORC_REGEN, 72)
      call BuildUpgr(1, UPG_ORC_BERSERKER, 72)
      call BuildUpgr(1, UPG_ORC_NAPTHA, 66)

	call BuildUnit(4, WITCH_DOCTOR, 70)
	call BuildUpgr(2, UPG_ORC_DOCS, 75)


























elseif tier == 2 then

      call BuildUnit(2, merc_range, 70)
      call BuildUnit(12, HEAD_HUNTER, 50)
      //call BuildUnit(5, CATAPULT, 64)
		call BuildUnit(3, CATAPULT, 64)
      call BuildUnit(1, hero[1], 80)
      call BuildUnit(1, hero[2], 60)
      call BuildUnit(1, FORTRESS, 10)
      call BuildUnit(1, VOODOO_LOUNGE, 50)

      call BuildUpgr(1, UPG_ORC_REGEN, 74)





























else
	call BuildUnit(1, hero[1], 150)
      call BuildUnit(1, merc_rush, 65)
      call BuildUnit(12, HEAD_HUNTER, 38)
      call BuildUnit(2, CATAPULT, 50)
      //call BuildUnit(1, hero[1], 70)
      call BuildUnit(1, STRONGHOLD, 50)































endif
endfunction

function init_strategy_Wyvern takes nothing returns nothing

    call AddHarass(2, 1, WYVERN)
    set distraction_group = 2






























endfunction
function build_sequence_Wyvern takes nothing returns nothing
if tier == 3 then
      call BuildUnit(1, hero[1], 140)
      call BuildUnit(1, hero[2], 130)
      call BuildUnit(1, hero[3], 120)

call BuildUnit(25, WYVERN, 42)
//call BuildUnit(1, hero[1], 80)
//call BuildUnit(1, hero[2], 60)
call BuildUnit(1, VOODOO_LOUNGE, 50)

      call BuildUpgr(1, UPG_ORC_VENOM, 92)

	call BuildUnit(4, WITCH_DOCTOR, 70)
	call BuildUpgr(2, UPG_ORC_DOCS, 75)




























elseif tier == 2 then
call BuildUnit(18, WYVERN, 40)
	call BuildUnit(3, GRUNT, 50)
call BuildUnit(1, hero[1], 80)
call BuildUnit(1, hero[2], 40)
call BuildUnit(1, FORTRESS, 20)
call BuildUnit(1, VOODOO_LOUNGE, 50)
































else
	call BuildUnit(1, hero[1], 150)
	call BuildFront(2, ORC_WATCH_TOWER, 44)
	//call BuildUnit(1, hero[1], 80)
	call BuildUnit(10, GRUNT, 40)
        call BuildUnit(1, STRONGHOLD, 50)































endif
endfunction

function init_strategy_BarrackMix takes nothing returns nothing

    call AddHarass(2, 3, GRUNT)
    call AddHarass(2, 4, HEAD_HUNTER)
    //call AddHarass(2, 1, CATAPULT)
    set distraction_group = 2








































endfunction
function build_sequence_BarrackMix takes nothing returns nothing
if tier == 3 then
      call BuildUnit(1, hero[1], 140)
      call BuildUnit(1, hero[2], 130)
      call BuildUnit(1, hero[3], 120)

      call SetBuildReact(55, 2, GRUNT, 4, HEAD_HUNTER, (enemy_unarmored + enemy_air - enemy_normal), 4, 25, 50)
      call SetBuildReact(30, 1, GRUNT, 0, CATAPULT, (enemy_unarmored + enemy_towers + enemy_casters)/2, 4, 25, 50)
      //call BuildUnit(1, hero[1], 80)
      //call BuildUnit(1, hero[2], 60)
      //call BuildUnit(1, hero[3], 40)
      call BuildUpgr(Min(((TownCountDone(GRUNT)/2)-2),1), UPG_ORC_BERSERK, 70)
      call BuildUpgr(Min(((TownCountDone(GRUNT)/2)-2),1), UPG_ORC_PILLAGE, 50)
      call BuildUpgr(Min(((TownCountDone(HEAD_HUNTER)/2)-2),1), UPG_ORC_REGEN, 50)
      call BuildUpgr(Min(((TownCountDone(GRUNT)/2)-1),3), UPG_ORC_MELEE, 60)
      call BuildUpgr(Min(((TownCountDone(HEAD_HUNTER)/2)-1),3), UPG_ORC_RANGED, 60)
      call BuildUpgr(3, UPG_ORC_ARMOR, 40)
      call BuildUnit(1, VOODOO_LOUNGE, 50)
      if not (c_enemy_total == c_enemy[R_ELF]) then
        call BuildUpgr(3, UPG_ORC_SPIKES, 20)
      endif

	call BuildUnit(4, WITCH_DOCTOR, 70)
	call BuildUpgr(2, UPG_ORC_DOCS, 75)









































elseif tier == 2 then

      call SetBuildReact(30, 1, GRUNT, 4, HEAD_HUNTER, (enemy_unarmored + enemy_air - enemy_normal), 4, 25, 50)
      call SetBuildReact(20, 1, GRUNT, 0, CATAPULT, (enemy_unarmored + enemy_towers + enemy_casters)/2, 4, 25, 50)
      call BuildUnit(1, hero[1], 80)
      call BuildUnit(1, hero[2], 60)
      call BuildUnit(1, FORTRESS, 50)
      call BuildUpgr(Min(((TownCountDone(GRUNT)/2)-2),1), UPG_ORC_PILLAGE, 50)
      call BuildUpgr(Min(((TownCountDone(HEAD_HUNTER)/2)-2),1), UPG_ORC_REGEN, 50)
      //call BuildUpgr(Min(((TownCountDone(GRUNT)/2)-1),2), UPG_ORC_MELEE, 60)
      //call BuildUpgr(Min(((TownCountDone(HEAD_HUNTER)/2)-1),2), UPG_ORC_RANGED, 60)
      call BuildUpgr(Min(((TownCountDone(GRUNT)/2)-1),2), UPG_ORC_MELEE, 45)
      call BuildUpgr(Min(((TownCountDone(HEAD_HUNTER)/2)-1),2), UPG_ORC_RANGED, 45)

      call BuildUpgr(2, UPG_ORC_ARMOR, 30)
      call BuildUpgr(Min(((TownCountDone(GRUNT)/2)-2),1), UPG_ORC_BERSERK, 70)
      call BuildUnit(1, VOODOO_LOUNGE, 50)
      if not (c_enemy_total == c_enemy[R_ELF]) then
        call BuildUpgr(2, UPG_ORC_SPIKES, 10)
      endif











































else
	call BuildUnit(1, hero[1], 150)
      call BuildUpgr(Min(((TownCountDone(GRUNT)/2)-2),1), UPG_ORC_PILLAGE, 30)
      call SetBuildReact(30, 1, GRUNT, 3, HEAD_HUNTER, (enemy_unarmored + enemy_air - enemy_normal), 4, 16, 50)
      call BuildUnit(1, VOODOO_LOUNGE, 55)
      //call BuildUnit(1, hero[1], 80)
      call BuildUnit(1, STRONGHOLD, 50)
      if not (c_enemy_total == c_enemy[R_ELF]) then
        call BuildUpgr(1, UPG_ORC_SPIKES, 10)
      endif










































endif
endfunction

function init_strategy_BestiaryMix takes nothing returns nothing

    call AddHarass(2, 3, RAIDER)
    call AddHarass(2, 4, WYVERN)
    //call AddHarass(2, 1, KODO_BEAST)
    set distraction_group = 2



































endfunction
function build_sequence_BestiaryMix takes nothing returns nothing
if tier == 3 then
      call BuildUnit(1, hero[1], 140)
      call BuildUnit(1, hero[2], 130)
      call BuildUnit(1, hero[3], 120)

      call SetBuildReact(20, 2, WYVERN, 2, BATRIDER, (enemy_towers + enemy_unarmored)/2, 4, 25, 50)
      call SetBuildReact(20, 2, RAIDER, 2, KODO_BEAST, enemy_heavyarmor - enemy_piercing, 4, 25, 50)
      call SetBuildReact(40, 2, WYVERN, 2, RAIDER, (enemy_unarmored + enemy_towers + enemy_casters + enemy_piercing)/4, 4, 25, 40)
      //call BuildUnit(1, hero[1], 80)
      //call BuildUnit(1, hero[2], 60)
      //call BuildUnit(1, hero[3], 40)
      call BuildUpgr(Min(TownCountDone(KODO_BEAST),1), UPG_ORC_WAR_DRUMS, 70)
      call BuildUpgr(Min(((TownCountDone(RAIDER)/2)-2),1), UPG_ORC_PILLAGE, 50)
      call BuildUpgr(Min(((TownCountDone(RAIDER)/2)-2),1), UPG_ORC_ENSNARE, 50)
      call BuildUpgr(Min(((TownCountDone(WYVERN)/2)-2),1), UPG_ORC_VENOM, 50)
      call BuildUpgr(Min(((TownCountDone(BATRIDER)/2)-2),1), UPG_ORC_FIRE, 50)
      call BuildUpgr(Min(((TownCountDone(RAIDER)/2)-1),3), UPG_ORC_MELEE, 60)
      call BuildUpgr(Min(((TownCountDone(WYVERN)/2)-1),3), UPG_ORC_RANGED, 60)
      call BuildUpgr(3, UPG_ORC_ARMOR, 40)
      call BuildUnit(1, VOODOO_LOUNGE, 50)
      if not (c_enemy_total == c_enemy[R_ELF]) then
        call BuildUpgr(3, UPG_ORC_SPIKES, 20)
      endif

	call BuildUnit(4, WITCH_DOCTOR, 70)
	call BuildUpgr(2, UPG_ORC_DOCS, 75)

































elseif tier == 2 then

      call SetBuildReact(20, 1, WYVERN, 1, BATRIDER, (enemy_towers + enemy_unarmored)/2, 4, 25, 50)
      call SetBuildReact(20, 1, RAIDER, 1, KODO_BEAST, enemy_heavyarmor - enemy_piercing, 4, 25, 50)
      call SetBuildReact(30, 1, WYVERN, 1, RAIDER, (enemy_unarmored + enemy_towers + enemy_casters + enemy_piercing)/4, 4, 25, 40)
	call BuildUnit(2, GRUNT, 50)
      call BuildUnit(1, hero[1], 80)
      call BuildUnit(1, hero[2], 60)
      call BuildUnit(1, FORTRESS, 45)
      call BuildUpgr(Min(((TownCountDone(RAIDER)/2)-2),1), UPG_ORC_PILLAGE, 50)
      call BuildUpgr(Min(((TownCountDone(RAIDER)/2)-2),1), UPG_ORC_ENSNARE, 20)
      //call BuildUpgr(Min(((TownCountDone(RAIDER)/2)-1),2), UPG_ORC_MELEE, 60)
      //call BuildUpgr(Min(((TownCountDone(WYVERN)/2)-1),2), UPG_ORC_RANGED, 60)
      call BuildUpgr(Min(((TownCountDone(RAIDER)/2)-1),2), UPG_ORC_MELEE, 35)
      call BuildUpgr(Min(((TownCountDone(WYVERN)/2)-1),2), UPG_ORC_RANGED, 35)

      call BuildUpgr(2, UPG_ORC_ARMOR, 30)
      call BuildUnit(1, VOODOO_LOUNGE, 50)
      if not (c_enemy_total == c_enemy[R_ELF]) then
        call BuildUpgr(2, UPG_ORC_SPIKES, 10)
      endif



































else
	call BuildUnit(1, hero[1], 150)
      call BuildUpgr(Min(((TownCountDone(RAIDER)/2)-2),1), UPG_ORC_PILLAGE, 30)
      call BuildUnit(2, ORC_WATCH_TOWER, 60)
      call BuildUnit(1, VOODOO_LOUNGE, 55)
      //call BuildUnit(1, hero[1], 70)
      call BuildUnit(1, STRONGHOLD, 80)
      if not (c_enemy_total == c_enemy[R_ELF]) then
        call BuildUpgr(1, UPG_ORC_SPIKES, 10)
      endif

	call BuildUnit(2, GRUNT, 60)



































endif
endfunction


function init_strategy_AntiPierce takes nothing returns nothing

    call AddHarass(2, 2, GRUNT)
    //call AddHarass(2, 1, SHAMAN)
    set distraction_group = 2


















endfunction
function build_sequence_AntiPierce takes nothing returns nothing
if tier == 3 then
      call BuildUnit(1, hero[1], 140)
      call BuildUnit(1, hero[2], 130)
      call BuildUnit(1, hero[3], 120)

      //call BuildUnit(1, hero[1], 80)
      //call BuildUnit(1, hero[2], 60)
      //call BuildUnit(13, TAUREN, 50)
      call BuildUnit(4, RAIDER, 50)
      call BuildUnit(1, VOODOO_LOUNGE, 50)

	call BuildUnit(4, WITCH_DOCTOR, 70)
	call BuildUpgr(2, UPG_ORC_DOCS, 75)
















elseif tier == 2 then

      call BuildUnit(1, hero[1], 80)
      call BuildUnit(1, hero[2], 60)
      call BuildUnit(15, GRUNT, 50)
      call BuildUnit(4, RAIDER, 50)
	call BuildUnit(2, TAUREN, 60)

      call BuildUnit(1, FORTRESS, 50)
      call BuildUnit(1, VOODOO_LOUNGE, 50)


















else
	call BuildUnit(1, hero[1], 150)      
      call BuildUnit(10, GRUNT, 50)
      //call BuildUnit(1, hero[1], 80)
      call BuildUnit(1, STRONGHOLD, 60)


















endif
endfunction

function init_strategy_AntiAir takes nothing returns nothing

    call AddHarass(2, 3, HEAD_HUNTER)
    call AddHarass(2, 3, WYVERN)
    set distraction_group = 2




















endfunction
function build_sequence_AntiAir takes nothing returns nothing
if tier == 3 then
      call BuildUnit(1, hero[1], 140)
      call BuildUnit(1, hero[2], 130)
      call BuildUnit(1, hero[3], 120)

      //call BuildUnit(1, hero[1], 80)
      //call BuildUnit(1, hero[2], 60)
      call BuildUnit(15, WYVERN, 50)
      call BuildUnit(15, BATRIDER, 55)
      call BuildUnit(1, VOODOO_LOUNGE, 50)

	call BuildUnit(4, WITCH_DOCTOR, 70)
	call BuildUpgr(2, UPG_ORC_DOCS, 75)


















elseif tier == 2 then

      call BuildUnit(1, hero[1], 80)
      call BuildUnit(1, hero[2], 60)
      call BuildUnit(10, WYVERN, 50)
      call BuildUnit(15, BATRIDER, 55)
      call BuildUnit(1, FORTRESS, 50)
      call BuildUnit(1, VOODOO_LOUNGE, 50)




















else
	call BuildUnit(1, hero[1], 150)      
      call BuildUnit(12, HEAD_HUNTER, 38)
      //call BuildUnit(1, hero[1], 80)
      call BuildUnit(1, STRONGHOLD, 50)




















endif
endfunction


function init_strategy_OAntiTower takes nothing returns nothing

    //call AddHarass(2, 3, CATAPULT)
    call AddHarass(2, 3, BATRIDER)
    set distraction_group = 2



























endfunction
function build_sequence_OAntiTower takes nothing returns nothing
if tier == 3 then
      call BuildUnit(1, hero[1], 140)
      call BuildUnit(1, hero[2], 130)
      call BuildUnit(1, hero[3], 120)

      //call BuildUnit(1, hero[1], 80)
      //call BuildUnit(1, hero[2], 60)
      //call BuildUnit(15, CATAPULT, 50)
		call BuildUnit(6, CATAPULT, 50)
		call BuildUnit(10, RAIDER, 50)
      call BuildUnit(15, BATRIDER, 50)
      call BuildUnit(1, VOODOO_LOUNGE, 50)

	call BuildUnit(4, WITCH_DOCTOR, 70)
	call BuildUpgr(2, UPG_ORC_DOCS, 75)

























elseif tier == 2 then

      call BuildUnit(1, hero[1], 80)
      call BuildUnit(1, hero[2], 60)
      //call BuildUnit(12, CATAPULT, 50)
		call BuildUnit(4, CATAPULT, 50)
		call BuildUnit(8, RAIDER, 50)
      call BuildUnit(12, BATRIDER, 50)
      call BuildUnit(1, FORTRESS, 50)
      call BuildUnit(1, VOODOO_LOUNGE, 50)



























else
	call BuildUnit(1, hero[1], 150)      
      call BuildUnit(10, GRUNT, 40)
      call BuildUnit(4, CATAPULT, 48)
      //call BuildUnit(1, hero[1], 80)
      call BuildUnit(1, STRONGHOLD, 50)



























endif
endfunction

function init_strategy_VersusHuman takes nothing returns nothing


































endfunction
function build_sequence_VersusHuman takes nothing returns nothing
if tier == 3 then
      call BuildUnit(1, hero[1], 140)
      call BuildUnit(1, hero[2], 130)
      call BuildUnit(1, hero[3], 120)

	//call BuildUnit(1, hero[1], 80)
	//call BuildUnit(1, hero[2], 70)
	call BuildUnit(15, RAIDER, 40)
	call BuildUnit(15, SPIRIT_WALKER, 40)
	if enemy_air >= 10 then
		call BuildUnit(10, BATRIDER, 40)
      		call BuildUpgr(1, UPG_ORC_FIRE, 60)
	endif

      	call BuildUpgr(1, UPG_ORC_ENSNARE, 70)

	call BuildUnit(4, WITCH_DOCTOR, 70)
	call BuildUpgr(2, UPG_ORC_DOCS, 75)





























elseif tier == 2 then

	call BuildUnit(1, hero[1], 80)
	call BuildUnit(1, hero[2], 65)
	call BuildUnit(10, RAIDER, 50)
	call BuildUnit(10, SPIRIT_WALKER, 40)
		call BuildUnit(3, GRUNT, 50)
	if enemy_air >= 10 then
		call BuildUnit(10, BATRIDER, 40)
	else
		call BuildUnit(15, RAIDER, 40)
      		call BuildUpgr(1, UPG_ORC_ENSNARE, 70)
	endif
        call BuildUnit(1, FORTRESS, 45)

	call BuildUpgr(1, UPG_ORC_SWALKER, 60)
































else
	call BuildUnit(1, hero[1], 150)
	//call BuildUnit(1, hero[1], 80)
	call BuildUnit(10, GRUNT, 40)
        call BuildUnit(1, STRONGHOLD, 50)
































endif
endfunction

function init_strategy_VersusUndead takes nothing returns nothing



























endfunction
function build_sequence_VersusUndead takes nothing returns nothing
if tier == 3 then
      call BuildUnit(1, hero[1], 140)
      call BuildUnit(1, hero[2], 130)
      call BuildUnit(1, hero[3], 120)

	//call BuildUnit(1, hero[1], 80)
	//call BuildUnit(1, hero[2], 70)
	call BuildUnit(10, RAIDER, 50)
	call BuildUnit(10, GRUNT, 50)
	call BuildUnit(10, BATRIDER, 40)
	call BuildUnit(2, KODO_BEAST, 43)
      	call BuildUnit(1, ZEPPELIN, 55)

      	call BuildUpgr(1, UPG_ORC_FIRE, 60)
      	call BuildUpgr(1, UPG_ORC_ENSNARE, 70)
      call BuildUpgr(1, UPG_ORC_BERSERK, 70)

	call BuildUnit(4, WITCH_DOCTOR, 70)
	call BuildUpgr(2, UPG_ORC_DOCS, 75)




















elseif tier == 2 then

	call BuildUnit(1, hero[1], 80)
	call BuildUnit(1, hero[2], 65)
        call BuildUnit(1, ZEPPELIN, 40)
	call BuildUnit(10, RAIDER, 40)
	call BuildUnit(10, GRUNT, 50)
	call BuildUnit(10, BATRIDER, 40)
	call BuildUnit(2, KODO_BEAST, 43)
        call BuildUnit(1, FORTRESS, 45)

      	call BuildUpgr(1, UPG_ORC_ENSNARE, 60)
      call BuildUpgr(1, UPG_ORC_BERSERK, 70)






















else
	call BuildUnit(1, hero[1], 150)
	//call BuildUnit(1, hero[1], 80)
	call BuildUnit(10, GRUNT, 40)
        call BuildUnit(1, STRONGHOLD, 50)


























endif
endfunction

function init_strategy_VersusElf takes nothing returns nothing
























endfunction
function build_sequence_VersusElf takes nothing returns nothing
if tier == 3 then
      call BuildUnit(1, hero[1], 140)
      call BuildUnit(1, hero[2], 130)
      call BuildUnit(1, hero[3], 120)

	//call BuildUnit(1, hero[1], 80)
	//call BuildUnit(1, hero[2], 70)
	call BuildUnit(15, RAIDER, 40)
	call BuildUnit(10, SPIRIT_WALKER, 50)
        //call BuildUnit(5, CATAPULT, 60)
		call BuildUnit(4, CATAPULT, 60)

      	call BuildUpgr(1, UPG_ORC_NAPTHA, 70)
      	call BuildUpgr(1, UPG_ORC_ENSNARE, 70)

	call BuildUnit(4, WITCH_DOCTOR, 70)
	call BuildUpgr(2, UPG_ORC_DOCS, 75)

















elseif tier == 2 then

	call BuildUnit(1, hero[1], 80)
	call BuildUnit(1, hero[2], 65)
	call BuildUnit(10, RAIDER, 50)
	call BuildUnit(10, SPIRIT_WALKER, 40)
        //call BuildUnit(5, CATAPULT, 60)
		call BuildUnit(3, CATAPULT, 60)
		call BuildUnit(3, GRUNT, 50)
        call BuildUnit(1, FORTRESS, 45)

	call BuildUpgr(1, UPG_ORC_SWALKER, 60)
      	call BuildUpgr(1, UPG_ORC_ENSNARE, 70)




















else
	call BuildUnit(1, hero[1], 150)
	//call BuildUnit(1, hero[1], 80)
	call BuildUnit(10, GRUNT, 40)
        call BuildUnit(1, STRONGHOLD, 50)





















endif
endfunction


function init_strategy takes nothing returns nothing
  call InitBlockList()
  call InitRBlockList()
  call InitHarass()
  call global_init_strategy()
  set exp_first_time = p_exp_first_time[profile] + strategy_first_exp_time[strategy]
  set exp_second_time = p_exp_second_time[profile] + strategy_second_exp_time[strategy]
  call ApplyStrategyRaceAggression()

if strategy < 7 then
if strategy < 2 then
if strategy < 1 then
call init_strategy_BestiaryMix()
 else
call init_strategy_BarrackMix()
 endif
 else
if strategy < 4 then
if strategy < 3 then
call init_strategy_FastSh()
 else
call init_strategy_Wyvern()
 endif
 else
if strategy < 6 then
if strategy < 5 then
call init_strategy_AntiPierce()
 else
call init_strategy_OAntiTower()
 endif
 else
call init_strategy_HeadCatapults()
 endif
 endif
 endif
 else
if strategy < 11 then
if strategy < 9 then
if strategy < 8 then
call init_strategy_NormalOrc()
 else
call init_strategy_HHunters()
 endif
 else
if strategy < 10 then
call init_strategy_VersusHuman()
 else
call init_strategy_VersusUndead()
 endif
 endif
 else
if strategy < 13 then
if strategy < 12 then
call init_strategy_VersusElf()
 else
call init_strategy_WyvSh()
 endif
 else
if strategy < 14 then
call init_strategy_GruntCatapults()
 else
if strategy < 15 then
call init_strategy_AntiAir()
 else
call init_strategy_Raiders()
 endif
 endif
 endif
 endif
 endif

endfunction

function build_sequence takes nothing returns nothing
  call global_build_sequence()
  
    if towerrush then
	   call AddBlock(2, GRUNT, true, 0, STRONGHOLD, 1000)
	   call BuildUnit(1, hero[1], 100)
       call BuildUnit(1, race_towerrush_requirement, 98)
    endif
	
  if strategy >= rp_strat_length then
    call cmdBuild()
  else
if strategy < 7 then
if strategy < 2 then
if strategy < 1 then
call build_sequence_BestiaryMix()
 else
call build_sequence_BarrackMix()
 endif
 else
if strategy < 4 then
if strategy < 3 then
call build_sequence_FastSh()
 else
call build_sequence_Wyvern()
 endif
 else
if strategy < 6 then
if strategy < 5 then
call build_sequence_AntiPierce()
 else
call build_sequence_OAntiTower()
 endif
 else
call build_sequence_HeadCatapults()
 endif
 endif
 endif
 else
if strategy < 11 then
if strategy < 9 then
if strategy < 8 then
call build_sequence_NormalOrc()
 else
call build_sequence_HHunters()
 endif
 else
if strategy < 10 then
call build_sequence_VersusHuman()
 else
call build_sequence_VersusUndead()
 endif
 endif
 else
if strategy < 13 then
if strategy < 12 then
call build_sequence_VersusElf()
 else
call build_sequence_WyvSh()
 endif
 else
if strategy < 14 then
call build_sequence_GruntCatapults()
 else
if strategy < 15 then
call build_sequence_AntiAir()
 else
call build_sequence_Raiders()
 endif
 endif
 endif
 endif
 endif
  endif
endfunction

function attack_sequence_all takes nothing returns nothing

     call Trace("Starting Attack Thread Loop") 

  if ver_heroes then
  loop
      exitwhen TownCountDone(hero[1])>0 or desperation_assault
      call Sleep(2 * sleep_multiplier)
  //    call Trace("Attack Loop1")
  endloop
  endif

  call StaggerSleep(0,2)
  loop

    call Trace("RACIAL ATTACK: Retreating")
    loop
      exitwhen not (CaptainRetreating() and isfleeing) or desperation_assault
      exitwhen player_defeated
      call CaptainGoHome()	  // Seems to prevent the fight and flee behaviour. Still occasions where captain seems to be home instantanously when it retreated
      call Sleep(2 * sleep_multiplier)

    //if break_attack then
    //call DisplayToAll("break_attack is true")
    //endif
    endloop
    call Trace("RACIAL ATTACK: exit Retreating")

    call HealArmy()
    //call Trace("RACIAL ATTACK: Army Healed") 
  
    //call HeroHealingBugFix()     // To hopefully fix bugs with attack system as will keep them running
  
    if ver_heroes then
      set creeping_only = AwaitMeleeHeroesAM()
    endif

    exitwhen player_defeated

    if no_attack_allowed then
      call Trace("RACIAL ATTACK: NO ATTACK SETTING IS ON")
    else

      if race_has_ghouls and race_ghouls_attack then
        call setup_ghouls()
        
        set peons_assigned = false
        call Trace("RACIAL ATTACK: Assigning Peons")
        loop
          exitwhen peons_assigned or desperation_assault
          call Sleep(sleep_multiplier)
        endloop
        call Trace("RACIAL ATTACK: exit Assigning Peons")
        call Sleep(2) // Seems this helps make sure we do get the ghouls instead of them going back to wood
    //call FormGroupAM(2)
      endif	

      call Trace("RACIAL ATTACK: waiting for troops")	  
      loop
        exitwhen GetOwnStrength() >= minimum_attack_strength or desperation_assault
        call Sleep(5 * sleep_multiplier)
      endloop
      call Trace("RACIAL ATTACK: exit waiting troops")
      
      call setup_force(false)
      call universal_attack_sequence() 

      set attacking_ghouls = 0
    endif
    
    call Sleep(sleep_multiplier)
  endloop
endfunction

function harvest_gold takes integer townid returns nothing
    if TownHasMine(townid) then
      if TownCountDone(WISP)==5 or TownCountDone(WISP)==6 then
        call HarvestGold(townid,ver_optimal_gold-1)
      else
        call HarvestGold(townid,ver_optimal_gold)
      endif
    endif
endfunction

function peon_assignment takes nothing returns nothing

  call ClearHarvestAI()

  if desperation_assault and TownCountDone(WISP)>0 then
    return
  endif  

  call harvest_gold(0)
  if not race_manual_loading then
    call harvest_gold(1)
    call harvest_gold(2)
    call harvest_gold(3)
  endif

  if race_has_ghouls then
		call HarvestWood(0,Max(TownCountDone(racial_ghoul) - attacking_ghouls, harvesting_ghouls) + TownCountDone(neutral_shredder))
	set peons_assigned = true
  elseif race_manual_loading then
    call HarvestWood(0, 20)
  endif
endfunction

function peon_assignment_all takes nothing returns nothing

  //if race_has_power_build then
    //call TownHallCheck()
  //endif
  
  if (race_has_ghouls and race_ghouls_attack) or race_no_wood_harvest or race_manual_loading then
    call peon_assignment()
  else
    call universal_peon_assignment()
  endif

endfunction

function build_sequence_all takes nothing returns nothing
  local integer x = R2I(I2R(-strat_minimum_time[strategy] * (4 - Min(3, tier)))/(3*sleep_multiplier*Max(difficulty - 1, 1)))
  local integer counter_timer = R2I(I2R(-strat_minimum_time[strategy] * (4 - Min(3, tier)))/(3*sleep_multiplier*Max(difficulty - 1, 1))*2)
  local integer new_tier = 0
  local integer last_counter = -1
  local boolean set_counter = true
  local boolean reportStrategy = false

  call Trace("Starting Build Sequence Loop")
    loop
      exitwhen player_defeated
	  
	  if recalculate_heros then
	      call AMAI_PickMeleeHero()
		  call set_skills()
		  set recalculate_heros = false
	  endif
	  
	  //call Trace("BUILD SEQUENCE: Running Loop")
      call peon_assignment_all()
	  //call Trace("BUILD SEQUENCE: peon_assignment")
      if x > 2 then
        set x = 0
		//call Trace("BUILD SEQUENCE: StrategyChanger")
        call StrategyChanger()
      endif
	  if counter_timer > 0 then
		set chosen_counter = DetermineCounterForce()
		set reportStrategy = true
		set last_counter = chosen_counter
		set set_counter = true
		set counter_timer = R2I(I2R(-strat_minimum_time[strategy] * (4 - Min(3, tier)))/(3*sleep_multiplier*Max(difficulty - 1, 1))*2) 
	  endif

      if last_strategy != strategy then
        set last_strategy = strategy
		set reportStrategy = true
        call SetRaceAggression()
        if strategy <= 49 then
          set x = R2I(I2R(-strat_minimum_time[strategy] * (4 - Min(3, tier)))/(3*sleep_multiplier*Max(difficulty - 1, 1)))
        endif
		//call Trace("BUILD SEQUENCE: InitBuildarray")
        call InitBuildArrayAM()
		//call Trace("BUILD SEQUENCE: init_strategy")
        call init_strategy()
	  endif
	  
	  if reportStrategy then
	    set reportStrategy = false
	    call DisplayToAlliesImportant( GetCurrentStrategyReport() + GetCurrentDynamicReport())
        call DisplayToObserversImportant( GetCurrentStrategyReport() + GetCurrentDynamicReport())
	  endif
	      
      set new_tier = GetTier()
      if tier != new_tier then
        set tier = new_tier
		//call Trace("BUILD SEQUENCE: initbuildarray2")		
        call InitBuildArrayAM()
      endif

	  	//call Trace("BUILD SEQUENCE: build_sequence")
	  call Sleep(0.05)
      call build_sequence()
	  if set_counter == true then 
		call DynamicStrategySelector()
		set set_counter = false
	  endif
      call Sleep(3 * sleep_multiplier)
	  	//call Trace("BUILD SEQUENCE: peon_assignment 2")	  
      call peon_assignment_all()
      call Sleep(3 * sleep_multiplier)
      set x = x + 1
	  set counter_timer = counter_timer + 1
    endloop
endfunction



function main takes nothing returns nothing

	set IsAMAI = true
	set ai_player = Player(GetAiPlayer())
	set home_location = GetPlayerStartLocationLoc(ai_player) // Moved from initAMAI	
	//call InitAiUnits()   // Not actually needed on amai scripts as of course its going to be AMAI
	
	// start
    set tiernum = 3
	
	call Trace("Initing racial units")
    call initRacialUnits()

    set own_race = R_ORC
    
	call Trace("initing global settings")
    call InitGlobalSettings()
    
    set hero1_revive_prio = 200
    set hero2_revive_prio = 180
    set hero3_revive_prio = 150
    set prio_n_inc = 2
    set prio_t_inc = 1
    set prio_q_inc = 2
    set farm_food2 = -4
    set farm_prio = 400
    set peon_prio = 280
    set expa_prio = 250
    set expa_emergency_prio = 500
    set expa_rebuild_prio = 350
    set peon_1_mine_number = 13
    set peon_2_mines_number = 18
    set peon_mines_number = 22
    set min_peon_number_single_mine = 6
    set min_peon_number_double_mine = 11
    set min_peon_number_multi_mine = 16
    set strat_food_persistence = 3
    set relevant_strat_change_number = 2
    set kb_add1 = 8
    set kb_add2 = 9
    set kb_add3 = 3
    set kb_add4 = 10
    set ku_add1 = 4
    set ku_add2 = 7
    set ku_add3 = 8
    set fav_unit_add = 10
    set debug_strategy = -1
    set race_use_fountain = true
    set race_manual_loading = false
    set race_manual_loading_wisp = 0
    set race_manual_loading_mine = 0
    set race_towerrush_available = true
    set race_tower_id = ORC_WATCH_TOWER
    set race_tower_upgrade = 0
    set race_towerrush_requirement = FORGE
    set race_towerrush_probability = 33
    set race_militia_expansion_available = false
    set race_hero_number = 4
    set race_simple_melee = GRUNT
    set race_advanced_melee = TAUREN
    set race_has_ghouls = false
    set race_ghouls_attack = true
    set race_has_power_build = false
    set race_no_wood_harvest = false
    set race_ignore_injured = false
    set race_uses_mine_expansion = false
    set race_uses_shredder = true
    set race_militia_available = false
    set race_militia_max_distance = 1000
    set race_militia_ability = 'Amil'
    set race_militia_hall_ability = 'Amic'
    set race_militia_unitstring = "militia"
    set race_militiaworker_unitstring = "peasant"
    set use_militia_only_on_bigger_threats = false
    set race_ancient_expansion_available = false
    set race_ancient_expansion_probability = 50
    set race_ancient_expansion_strength = 15
    set race_ancient_expansion_help_id = 'earc'
    set race_sell_ziggurats = false
    set race_ziggurat_keep_distance = 1500
    set race_build_farms_front = false
    set race_farms_front_limit = 4
    set race_farms_at_mine = 2
    set race_max_expa_mine_distance = 850
    set race_has_moonwells = false
    set race_towerrush_hero_rush_level = 1
    set race_ancient_expansion_hero_rush_level = 1
    set ghoul_prio = 250
    set race_min_ghouls = 2
    set race_max_ghouls = 5
    call Trace("About to init things")
    call initRacialTraits()
	call Trace("racial traits init done")
    call InitStrats()
	call Trace("init strats")
    call InitAllSkills()
	call Trace("init all skills")
    call InitBuildings()
	call Trace("init buildings")
    call InitAMAI()
	call Trace("init AMAI")
    call InitProfile()
	call Trace("About to choose strategy")	
    call chooseStrategyRP()
    call SmallMapsAdd()
	call removeNonBeginningStrats()
    call display_rp_strat()
	set chosen_counter = DetermineCounterForce()
	set chosen_strategy = choose_strategy()

    set strategy = chosen_strategy
    call SetChatVar("Strategy", GetCurrentStrategyName())
	call Trace("Strategy chosen")	
    call AMAI_PickMeleeHero()
	if race_towerrush_available then
		call CanTowerRush()
	endif
	call Trace("Hero picked")	
	call set_skills()
	call Trace("hero skills set")	
    call SetRaceAggression()
    call init_strategy()
	call Trace("Strategy init")	
    call AMAI(function SkillArraysAM, function build_sequence_all, function attack_sequence_all)
    call Trace("Playing Game")	
	call PlayGameAM()


endfunction