//===========================================================================
// 
// Jjm709394
// 
//   Warcraft III AI script
//   Generated by the Warcraft III World Editor
//   Date: Sat Jul 12 19:19:28 2014
// 
//===========================================================================

//***************************************************************************
//*
//*  Global Variables
//*
//***************************************************************************

globals
    integer                 attackWave                 = 1
    integer                 nextDelay                  = 0
    integer                 awGold                     = 0
    integer                 awWood                     = 0

    // Conditions
    boolean                 gCond_Infantry             = false
    boolean                 gCond_Cave                 = false
    boolean                 gCond_Retreat              = false
    boolean                 gCond_Super                = false
    boolean                 gCond_Exp_Needs_Hall       = false
    boolean                 gCond_Farmer               = false
    boolean                 gCond_Tauren               = false
    boolean                 gCond_Flying_Dragon        = false
    boolean                 gCond_Mage                 = false
    boolean                 gCond_Tauren_factory       = false
    boolean                 gCond_Dragon_upgrade       = false
    boolean                 gCond_Master_upgrades      = false
    boolean                 gCond_Cave_2               = false
    boolean                 gCond_Infantry_2           = false
    boolean                 gCond_Being_attacked       = false
    boolean                 gCond_Ultimate_upgrade     = false
    boolean                 gCond_Secondary            = false
    boolean                 gCond_Infantry_3           = false
endglobals

//***************************************************************************
//*
//*  Utility Functions
//*
//***************************************************************************

//===========================================================================
function CheckLastCommand takes boolean pop returns integer
    local integer cmd = GetLastCommand()
    if (pop) then
        call PopLastCommand(  )
    endif
    return cmd
endfunction

//===========================================================================
function CheckLastCommandData takes boolean pop returns integer
    local integer data = GetLastData()
    if (pop) then
        call PopLastCommand(  )
    endif
    return data
endfunction

//===========================================================================
function TotalFoodProduced takes nothing returns integer
    return GetPlayerState(ai_player,PLAYER_STATE_RESOURCE_FOOD_CAP)
endfunction

//===========================================================================
function ExpansionNeeded takes nothing returns boolean
    return take_exp
endfunction

//===========================================================================
function BuildExpansion takes integer hallID, integer mineID returns nothing
    if (HallsCompleted(hallID)) then
        call SetBuildExpa( TownCount(hallID) + 1, mineID )
    endif
endfunction

//===========================================================================
function CurrentAttackWave takes nothing returns integer
    return attackWave
endfunction

//===========================================================================
function ResetAttackUnits takes nothing returns nothing
    set awGold = 0
    set awWood = 0
    call InitAssaultGroup(  )
endfunction

//===========================================================================
function AddAttackUnit takes integer minQty, integer maxQty, integer unitID returns nothing
    // Track attacking gold workers
    if (unitID == 'opeo') then
        set awGold = awGold + minQty
    endif

    // Track attacking wood workers
    if (unitID == 'opeo') then
        set awWood = awWood + minQty
    endif

    call SetAssaultGroup( minQty, maxQty, unitID )
endfunction

//***************************************************************************
//*
//*  Basic Options
//*
//***************************************************************************

//===========================================================================
function InitOptions takes nothing returns nothing
    call SetMeleeAI(  )
    call SetDefendPlayer( true )
    call SetRandomPaths( true )
    call SetTargetHeroes( true )
    call SetPeonsRepair( true )
    call SetHeroesFlee( true )
    call SetHeroesBuyItems( true )
    call SetUnitsFlee( true )
    call SetGroupsFlee( true )
    call SetWatchMegaTargets( true )
    call SetIgnoreInjured( false )
    call SetHeroesTakeItems( true )
    call SetSlowChopping( false )
    call SetCaptainChanges( true )
    call SetSmartArtillery( false )
endfunction

//***************************************************************************
//*
//*  Conditions
//*
//***************************************************************************

//===========================================================================
// Updates the values of all preset conditions
//===========================================================================
function UpdateConditions takes nothing returns nothing
    set gCond_Infantry = ( ( GetUnitCountDone( 'obar' ) > 0 ) and ( ( GetUnitCountDone( 'ofrt' ) == 0 ) and ( GetUnitCount( 'otto' ) == 0 ) ) )
    set gCond_Cave = ( TotalFoodProduced(  ) < 100 )
    set gCond_Retreat = ( CaptainRetreating(  ) == false )
    set gCond_Super = ( ( ( GetGold(  ) >= 2000 ) and ( GetWood(  ) >= 1000 ) ) and ( GetMinesOwned(  ) >= 2 ) )
    set gCond_Exp_Needs_Hall = ( ( TownHasHall( ( TownWithMine(  ) + 1 ) ) == false ) and ( TownHasMine( ( TownWithMine(  ) + 1 ) ) == true ) )
    set gCond_Farmer = ( ( GetUnitCountDone( 'ogre' ) > 0 ) or ( ( GetUnitCountDone( 'ostr' ) > 0 ) or ( GetUnitCountDone( 'ofrt' ) > 0 ) ) )
    set gCond_Tauren = ( ( GetUnitCount( 'ogru' ) < 6 ) and ( GetUnitCountDone( 'otto' ) > 0 ) )
    set gCond_Flying_Dragon = ( GetUnitCountDone( 'obea' ) > 0 )
    set gCond_Mage = ( GetUnitCountDone( 'osld' ) > 0 )
    set gCond_Tauren_factory = ( ( GetUnitCountDone( 'ofrt' ) > 0 ) and ( GetUnitCountDone( 'ofor' ) > 0 ) )
    set gCond_Dragon_upgrade = ( ( GetUnitCountDone( 'ofrt' ) > 0 ) and ( GetUnitCountDone( 'obea' ) > 0 ) )
    set gCond_Master_upgrades = ( ( GetUnitCountDone( 'ofrt' ) > 0 ) and ( GetUnitCountDone( 'osld' ) > 0 ) )
    set gCond_Cave_2 = ( ( TotalFoodProduced(  ) < 100 ) and ( ( TotalFoodProduced(  ) - FoodUsed(  ) ) < 0 ) )
    set gCond_Infantry_2 = ( ( ( GetUnitCountDone( 'obar' ) > 0 ) and ( GetUnitCountDone( 'ogru' ) >= 4 ) ) and ( ( GetUnitCountDone( 'ofrt' ) == 0 ) and ( GetUnitCount( 'otto' ) == 0 ) ) )
    set gCond_Being_attacked = ( TownThreatened(  ) == true )
    set gCond_Ultimate_upgrade = ( ( TownThreatened(  ) == true ) or ( ( GetGold(  ) >= 2000 ) and ( GetWood(  ) >= 1000 ) ) )
    set gCond_Secondary = ( ( GetUnitCountDone( 'ostr' ) > 0 ) or ( GetUnitCount( 'ofrt' ) > 0 ) )
    set gCond_Infantry_3 = ( ( ( GetUnitCountDone( 'obar' ) > 0 ) and ( GetUnitCountDone( 'ogru' ) >= 6 ) ) and ( ( GetUnitCount( 'ofrt' ) == 0 ) and ( GetUnitCount( 'otto' ) == 0 ) ) )
endfunction

//***************************************************************************
//*
//*  Heroes
//*
//***************************************************************************

//===========================================================================
// Stores hero ID and skills
//===========================================================================
function SetHero takes integer order, integer heroid returns nothing
    if (order == 1) then
        set hero_id = heroid
        if (heroid == 'Ofar') then
            set skills1[ 1] = 'AOsf'
            set skills1[ 2] = 'AOcl'
            set skills1[ 3] = 'AOsf'
            set skills1[ 4] = 'AOcl'
            set skills1[ 5] = 'AOsf'
            set skills1[ 6] = 'AOcl'
            set skills1[ 7] = 'AOeq'
            set skills1[ 8] = 'AOfs'
            set skills1[ 9] = 'AOfs'
            set skills1[10] = 'AOfs'
        elseif (heroid == 'Oshd') then
            set skills1[ 1] = 'AOsw'
            set skills1[ 2] = 'AOhx'
            set skills1[ 3] = 'AOsw'
            set skills1[ 4] = 'AOhx'
            set skills1[ 5] = 'AOsw'
            set skills1[ 6] = 'AOvd'
            set skills1[ 7] = 'AOhx'
            set skills1[ 8] = 'AOhw'
            set skills1[ 9] = 'AOhw'
            set skills1[10] = 'AOhw'
        elseif (heroid == 'Otch') then
            set skills1[ 1] = 'AOsh'
            set skills1[ 2] = 'AOae'
            set skills1[ 3] = 'AOsh'
            set skills1[ 4] = 'AOae'
            set skills1[ 5] = 'AOsh'
            set skills1[ 6] = 'AOre'
            set skills1[ 7] = 'AOae'
            set skills1[ 8] = 'AOws'
            set skills1[ 9] = 'AOws'
            set skills1[10] = 'AOws'
        endif
    elseif (order == 2) then
        set hero_id2 = heroid
        if (heroid == 'Ofar') then
            set skills2[ 1] = 'AOsf'
            set skills2[ 2] = 'AOcl'
            set skills2[ 3] = 'AOsf'
            set skills2[ 4] = 'AOcl'
            set skills2[ 5] = 'AOsf'
            set skills2[ 6] = 'AOeq'
            set skills2[ 7] = 'AOcl'
            set skills2[ 8] = 'AOfs'
            set skills2[ 9] = 'AOfs'
            set skills2[10] = 'AOfs'
        elseif (heroid == 'Oshd') then
            set skills2[ 1] = 'AOhx'
            set skills2[ 2] = 'AOhw'
            set skills2[ 3] = 'AOhw'
            set skills2[ 4] = 'AOhx'
            set skills2[ 5] = 'AOhw'
            set skills2[ 6] = 'AOvd'
            set skills2[ 7] = 'AOhx'
            set skills2[ 8] = 'AOsw'
            set skills2[ 9] = 'AOsw'
            set skills2[10] = 'AOsw'
        elseif (heroid == 'Otch') then
            set skills2[ 1] = 'AOsh'
            set skills2[ 2] = 'AOae'
            set skills2[ 3] = 'AOsh'
            set skills2[ 4] = 'AOae'
            set skills2[ 5] = 'AOsh'
            set skills2[ 6] = 'AOre'
            set skills2[ 7] = 'AOae'
            set skills2[ 8] = 'AOws'
            set skills2[ 9] = 'AOws'
            set skills2[10] = 'AOws'
        endif
    elseif (order == 3) then
        set hero_id3 = heroid
        if (heroid == 'Ofar') then
            set skills3[ 1] = 'AOcl'
            set skills3[ 2] = 'AOsf'
            set skills3[ 3] = 'AOcl'
            set skills3[ 4] = 'AOsf'
            set skills3[ 5] = 'AOcl'
            set skills3[ 6] = 'AOeq'
            set skills3[ 7] = 'AOsf'
            set skills3[ 8] = 'AOfs'
            set skills3[ 9] = 'AOfs'
            set skills3[10] = 'AOfs'
        elseif (heroid == 'Oshd') then
            set skills3[ 1] = 'AOhw'
            set skills3[ 2] = 'AOhx'
            set skills3[ 3] = 'AOhw'
            set skills3[ 4] = 'AOhx'
            set skills3[ 5] = 'AOhw'
            set skills3[ 6] = 'AOvd'
            set skills3[ 7] = 'AOhx'
            set skills3[ 8] = 'AOsw'
            set skills3[ 9] = 'AOsw'
            set skills3[10] = 'AOsw'
        elseif (heroid == 'Otch') then
            set skills3[ 1] = 'AOsh'
            set skills3[ 2] = 'AOae'
            set skills3[ 3] = 'AOsh'
            set skills3[ 4] = 'AOae'
            set skills3[ 5] = 'AOsh'
            set skills3[ 6] = 'AOre'
            set skills3[ 7] = 'AOae'
            set skills3[ 8] = 'AOws'
            set skills3[ 9] = 'AOws'
            set skills3[10] = 'AOws'
        endif
    endif
endfunction

//===========================================================================
// Selects hero IDs for three possible heroes
//===========================================================================
function SelectHeroes takes nothing returns nothing
    local integer roll = GetRandomInt(1,100)
    call SetHero( 1, 'Ofar' )
    call SetHero( 2, 'Oshd' )
    call SetHero( 3, 'Otch' )
endfunction

//===========================================================================
// Returns the hero skill for the given hero and level
//===========================================================================
function ChooseHeroSkill takes nothing returns integer
    local integer curHero = GetHeroId()
    local integer level = GetHeroLevelAI()

    if (level > max_hero_level) then
        set max_hero_level = level
    endif

    if (curHero == hero_id) then
        return skills1[level]
    elseif (curHero == hero_id2) then
        return skills2[level]
    elseif (curHero == hero_id3) then
        return skills3[level]
    endif
    return 0
endfunction

//***************************************************************************
//*
//*  Building and Harvesting
//*
//***************************************************************************

//===========================================================================
// Specifies building priorities for workers
//===========================================================================
function BuildPriorities takes nothing returns nothing
    local integer mine = TownWithMine()
    if (gCond_Farmer) then
        call SetBuildAll( BUILD_UNIT, 1, 'opeo', -1 )
    endif
    if (( GetMinesOwned(  ) > 0 )) then
        call SetBuildAll( BUILD_UNIT, 1, 'ogre', -1 )
    endif
    if (( GetMinesOwned(  ) == 0 )) then
        call BuildExpansion( 'ogre', 'ogre' )
    endif
    if (gCond_Farmer) then
        call SetBuildAll( BUILD_UNIT, 2, 'opeo', -1 )
        call SetBuildAll( BUILD_UNIT, 3, 'opeo', -1 )
        call SetBuildAll( BUILD_UNIT, 4, 'opeo', -1 )
        call SetBuildAll( BUILD_UNIT, 5, 'opeo', -1 )
        call SetBuildAll( BUILD_UNIT, 6, 'opeo', -1 )
    endif
    if (gCond_Cave) then
        call SetBuildAll( BUILD_UNIT, 1, 'otrb', -1 )
    endif
    call SetBuildAll( BUILD_UNIT, 1, 'oalt', -1 )
    if (( GetUnitCountDone( 'oalt' ) > 0 )) then
        call SetBuildAll( BUILD_UNIT, 1, hero_id, -1 )
    endif
    if (gCond_Infantry) then
        call SetBuildAll( BUILD_UNIT, 1, 'ogru', -1 )
    endif
    if (gCond_Farmer) then
        call SetBuildAll( BUILD_UNIT, 7, 'opeo', -1 )
    endif
    call SetBuildAll( BUILD_UNIT, 1, 'obar', -1 )
    if (gCond_Farmer) then
        call SetBuildAll( BUILD_UNIT, 8, 'opeo', -1 )
        call SetBuildAll( BUILD_UNIT, 9, 'opeo', -1 )
        call SetBuildAll( BUILD_UNIT, 10, 'opeo', -1 )
    endif
    if (gCond_Cave) then
        call SetBuildAll( BUILD_UNIT, 2, 'otrb', -1 )
    endif
    if (gCond_Farmer) then
        call SetBuildAll( BUILD_UNIT, 11, 'opeo', -1 )
        call SetBuildAll( BUILD_UNIT, 12, 'opeo', -1 )
    endif
    if (( GetUnitCountDone( 'ofrt' ) == 0 )) then
        call SetBuildAll( BUILD_UNIT, 2, 'obar', -1 )
    endif
    if (gCond_Cave) then
        call SetBuildAll( BUILD_UNIT, 3, 'otrb', -1 )
    endif
    call SetBuildAll( BUILD_UNIT, 1, 'ofor', -1 )
    if (( GetUnitCount( 'ovln' ) == 0 )) then
        call SetBuildAll( BUILD_UNIT, 1, 'ovln', 0 )
    endif
    if (gCond_Farmer) then
        call SetBuildAll( BUILD_UNIT, 13, 'opeo', -1 )
    endif
    if (gCond_Infantry) then
        call SetBuildAll( BUILD_UNIT, 2, 'ogru', -1 )
    endif
    if (gCond_Farmer) then
        call SetBuildAll( BUILD_UNIT, 14, 'opeo', -1 )
        call SetBuildAll( BUILD_UNIT, 15, 'opeo', -1 )
    endif
    if (( GetUnitCountDone( 'ostr' ) > 0 )) then
        call SetBuildAll( BUILD_UNIT, 1, 'ofrt', -1 )
    endif
    if (gCond_Infantry) then
        call SetBuildAll( BUILD_UNIT, 3, 'ogru', -1 )
        call SetBuildAll( BUILD_UNIT, 4, 'ogru', -1 )
    endif
    if (( GetUnitCountDone( 'ogre' ) > 0 )) then
        call SetBuildAll( BUILD_UNIT, 1, 'ostr', -1 )
    endif
    if (( ( TotalFoodProduced(  ) < 100 ) and ( ( GetUnitCountDone( 'otrb' ) >= 3 ) and ( ( TotalFoodProduced(  ) - FoodUsed(  ) ) <= 20 ) ) )) then
        call SetBuildAll( BUILD_UNIT, 4, 'otrb', -1 )
    endif
    if (( ( TotalFoodProduced(  ) < 100 ) and ( ( GetUnitCountDone( 'otrb' ) >= 4 ) and ( ( TotalFoodProduced(  ) - FoodUsed(  ) ) <= 20 ) ) )) then
        call SetBuildAll( BUILD_UNIT, 5, 'otrb', -1 )
    endif
    if (( ( TotalFoodProduced(  ) < 100 ) and ( ( GetUnitCountDone( 'otrb' ) >= 5 ) and ( ( TotalFoodProduced(  ) - FoodUsed(  ) ) <= 20 ) ) )) then
        call SetBuildAll( BUILD_UNIT, 6, 'otrb', -1 )
    endif
    if (( ( TotalFoodProduced(  ) < 100 ) and ( ( GetUnitCountDone( 'otrb' ) >= 6 ) and ( ( TotalFoodProduced(  ) - FoodUsed(  ) ) <= 20 ) ) )) then
        call SetBuildAll( BUILD_UNIT, 7, 'otrb', -1 )
    endif
    if (( ( TotalFoodProduced(  ) < 100 ) and ( ( GetUnitCountDone( 'otrb' ) >= 7 ) and ( ( TotalFoodProduced(  ) - FoodUsed(  ) ) <= 20 ) ) )) then
        call SetBuildAll( BUILD_UNIT, 8, 'otrb', -1 )
    endif
    if (( ( TotalFoodProduced(  ) < 100 ) and ( ( GetUnitCountDone( 'otrb' ) >= 8 ) and ( ( TotalFoodProduced(  ) - FoodUsed(  ) ) <= 20 ) ) )) then
        call SetBuildAll( BUILD_UNIT, 9, 'otrb', -1 )
    endif
    if (( ( ( TownThreatened(  ) == false ) and ( GetMinesOwned(  ) < 2 ) ) or ( FoodUsed(  ) > 80 ) )) then
        call BuildExpansion( 'ogre', 'ogre' )
    endif
    if (gCond_Exp_Needs_Hall) then
        call SetBuildAll( BUILD_UNIT, 1, 'ogre', mine + 1 )
    endif
    if (( ( TownThreatened(  ) == true ) and ( GetMinesOwned(  ) >= 2 ) )) then
        call SetBuildAll( BUILD_UNIT, 1, 'owtw', mine + 1 )
    endif
    if (( ( ( TownThreatened(  ) == true ) and ( GetMinesOwned(  ) >= 2 ) ) and ( GetTownUnitCount( 'owtw', ( TownWithMine(  ) + 1 ), false ) == 1 ) )) then
        call SetBuildAll( BUILD_UNIT, 2, 'owtw', mine + 1 )
    endif
    if (( ( ( ( TownThreatened(  ) == true ) and ( GetWood(  ) >= 150 ) ) and ( GetMinesOwned(  ) >= 2 ) ) and ( GetTownUnitCount( 'owtw', ( TownWithMine(  ) + 1 ), false ) == 2 ) )) then
        call SetBuildAll( BUILD_UNIT, 3, 'owtw', mine + 1 )
    endif
    if (( ( ( ( TownThreatened(  ) == true ) and ( GetWood(  ) >= 150 ) ) and ( GetMinesOwned(  ) >= 2 ) ) and ( GetTownUnitCount( 'owtw', ( TownWithMine(  ) + 1 ), true ) == 3 ) )) then
        call SetBuildAll( BUILD_UNIT, 4, 'owtw', mine + 1 )
    endif
    if (( ( ( ( TownThreatened(  ) == true ) and ( GetWood(  ) >= 150 ) ) and ( GetMinesOwned(  ) >= 2 ) ) and ( GetTownUnitCount( 'owtw', ( TownWithMine(  ) + 1 ), true ) == 4 ) )) then
        call SetBuildAll( BUILD_UNIT, 5, 'owtw', mine + 1 )
    endif
    if (( ( ( ( TownThreatened(  ) == true ) and ( GetWood(  ) >= 150 ) ) and ( GetMinesOwned(  ) >= 2 ) ) and ( GetTownUnitCount( 'owtw', ( TownWithMine(  ) + 1 ), true ) == 5 ) )) then
        call SetBuildAll( BUILD_UNIT, 6, 'owtw', mine + 1 )
    endif
    if (( ( GetMinesOwned(  ) >= 2 ) and ( ( GetUnitCountDone( 'ogre' ) > 0 ) and ( GetUnitCountDone( 'opeo' ) == 15 ) ) )) then
        call SetBuildAll( BUILD_UNIT, 16, 'opeo', -1 )
    endif
    if (( ( GetUnitCountDone( 'opeo' ) == 16 ) and ( ( GetWood(  ) <= 500 ) and ( GetUnitCount( 'opeo' ) < 20 ) ) )) then
        call SetBuildAll( BUILD_UNIT, 17, 'opeo', -1 )
    endif
    if (( ( GetUnitCountDone( 'opeo' ) == 17 ) and ( ( GetWood(  ) <= 500 ) and ( GetUnitCount( 'opeo' ) < 20 ) ) )) then
        call SetBuildAll( BUILD_UNIT, 18, 'opeo', -1 )
    endif
    if (( ( GetUnitCountDone( 'opeo' ) == 18 ) and ( ( GetWood(  ) <= 500 ) and ( GetUnitCount( 'opeo' ) < 20 ) ) )) then
        call SetBuildAll( BUILD_UNIT, 19, 'opeo', -1 )
    endif
    if (( ( GetUnitCountDone( 'opeo' ) == 19 ) and ( ( GetWood(  ) <= 500 ) and ( GetUnitCount( 'opeo' ) < 20 ) ) )) then
        call SetBuildAll( BUILD_UNIT, 20, 'opeo', -1 )
    endif
    if (( ( ( GetGold(  ) >= 150 ) and ( GetWood(  ) >= 75 ) ) and ( GetUnitCountDone( 'ofor' ) > 0 ) )) then
        call SetBuildAll( BUILD_UPGRADE, 1, 'Roar', -1 )
    endif
    if (gCond_Infantry_2) then
        call SetBuildAll( BUILD_UNIT, 5, 'ogru', -1 )
        call SetBuildAll( BUILD_UNIT, 6, 'ogru', -1 )
    endif
    if (( ( ( GetGold(  ) >= 100 ) and ( GetWood(  ) >= 100 ) ) and ( ( GetUnitCountDone( 'ofor' ) > 0 ) and ( GetUpgradeLevel( 'Roar' ) > 0 ) ) )) then
        call SetBuildAll( BUILD_UPGRADE, 1, 'Rora', -1 )
    endif
    if (gCond_Infantry_3) then
        call SetBuildAll( BUILD_UNIT, 7, 'ogru', -1 )
        call SetBuildAll( BUILD_UNIT, 8, 'ogru', -1 )
    endif
    if (( ( GetUnitCountDone( 'Ofar' ) > 0 ) or ( GetUnitCountDone( 'oalt' ) > 1 ) )) then
        call SetBuildAll( BUILD_UNIT, 1, hero_id2, -1 )
    endif
    if (gCond_Being_attacked) then
        call SetBuildAll( BUILD_UNIT, 1, 'owtw', mine + 0 )
        call SetBuildAll( BUILD_UNIT, 2, 'owtw', mine + 0 )
    endif
    if (( ( ( TownThreatened(  ) == true ) and ( GetWood(  ) >= 150 ) ) and ( GetTownUnitCount( 'owtw', ( TownWithMine(  ) + 0 ), true ) == 2 ) )) then
        call SetBuildAll( BUILD_UNIT, 3, 'owtw', mine + 0 )
    endif
    if (( ( ( TownThreatened(  ) == true ) and ( GetWood(  ) >= 150 ) ) and ( GetTownUnitCount( 'owtw', ( TownWithMine(  ) + 0 ), false ) == 3 ) )) then
        call SetBuildAll( BUILD_UNIT, 4, 'owtw', mine + 0 )
    endif
    if (( ( ( TownThreatened(  ) == true ) and ( GetWood(  ) >= 150 ) ) and ( GetTownUnitCount( 'owtw', ( TownWithMine(  ) + 0 ), true ) == 4 ) )) then
        call SetBuildAll( BUILD_UNIT, 5, 'owtw', mine + 0 )
    endif
    if (( ( ( TownThreatened(  ) == true ) and ( GetWood(  ) >= 150 ) ) and ( GetTownUnitCount( 'owtw', ( TownWithMine(  ) + 0 ), true ) == 5 ) )) then
        call SetBuildAll( BUILD_UNIT, 6, 'owtw', mine + 0 )
    endif
    if (( ( ( GetGold(  ) >= 225 ) and ( GetWood(  ) >= 225 ) ) and ( GetUnitCountDone( 'ofor' ) > 0 ) )) then
        call SetBuildAll( BUILD_UPGRADE, 2, 'Roar', -1 )
    endif
    if (( ( GetUnitCountDone( 'ogru' ) > 3 ) and ( GetWood(  ) >= 400 ) )) then
        call SetBuildAll( BUILD_UPGRADE, 1, 'Robs', -1 )
    endif
    if (gCond_Secondary) then
        call SetBuildAll( BUILD_UNIT, 1, 'obea', -1 )
        call SetBuildAll( BUILD_UNIT, 2, 'obea', -1 )
        call SetBuildAll( BUILD_UNIT, 1, 'osld', -1 )
        call SetBuildAll( BUILD_UNIT, 2, 'osld', -1 )
    endif
    if (( ( ( GetGold(  ) >= 150 ) and ( GetWood(  ) >= 200 ) ) and ( GetUnitCountDone( 'ofor' ) > 0 ) )) then
        call SetBuildAll( BUILD_UPGRADE, 2, 'Rora', -1 )
    endif
    if (gCond_Flying_Dragon) then
        call SetBuildAll( BUILD_UNIT, 1, 'owyv', -1 )
        call SetBuildAll( BUILD_UNIT, 2, 'owyv', -1 )
    endif
    if (gCond_Mage) then
        call SetBuildAll( BUILD_UNIT, 1, 'ospm', -1 )
        call SetBuildAll( BUILD_UNIT, 2, 'ospm', -1 )
    endif
    if (gCond_Tauren) then
        call SetBuildAll( BUILD_UNIT, 1, 'otau', -1 )
    endif
    if (( GetUnitCount( 'otau' ) > 0 )) then
        call SetBuildAll( BUILD_UPGRADE, 1, 'Rows', -1 )
    endif
    if (( ( ( GetUnitCountDone( 'Ofar' ) > 0 ) and ( GetUnitCountDone( 'Oshd' ) > 0 ) ) or ( GetUnitCountDone( 'oalt' ) > 1 ) )) then
        call SetBuildAll( BUILD_UNIT, 1, hero_id3, -1 )
    endif
    if (gCond_Ultimate_upgrade) then
        call SetBuildAll( BUILD_UPGRADE, 1, 'Rorb', -1 )
    endif
    if (gCond_Flying_Dragon) then
        call SetBuildAll( BUILD_UNIT, 3, 'owyv', -1 )
    endif
    if (gCond_Dragon_upgrade) then
        call SetBuildAll( BUILD_UPGRADE, 1, 'Rovs', -1 )
    endif
    if (gCond_Mage) then
        call SetBuildAll( BUILD_UPGRADE, 1, 'Rowt', -1 )
        call SetBuildAll( BUILD_UPGRADE, 1, 'Rost', -1 )
    endif
    if (( ( GetUnitCount( 'ogru' ) < 4 ) and ( GetUnitCountDone( 'otto' ) > 0 ) )) then
        call SetBuildAll( BUILD_UNIT, 2, 'otau', -1 )
    endif
    if (( ( GetUnitCount( 'ogru' ) < 2 ) and ( GetUnitCountDone( 'otto' ) > 0 ) )) then
        call SetBuildAll( BUILD_UNIT, 3, 'otau', -1 )
    endif
    if (gCond_Tauren_factory) then
        call SetBuildAll( BUILD_UNIT, 1, 'otto', -1 )
        call SetBuildAll( BUILD_UNIT, 2, 'otto', -1 )
    endif
    if (( ( ( GetGold(  ) >= 200 ) and ( GetWood(  ) >= 300 ) ) and ( GetUnitCountDone( 'ofor' ) > 0 ) )) then
        call SetBuildAll( BUILD_UPGRADE, 3, 'Rora', -1 )
    endif
    if (gCond_Flying_Dragon) then
        call SetBuildAll( BUILD_UNIT, 4, 'owyv', -1 )
        call SetBuildAll( BUILD_UNIT, 5, 'owyv', -1 )
    endif
    if (gCond_Mage) then
        call SetBuildAll( BUILD_UNIT, 1, 'oshm', -1 )
    endif
    if (gCond_Master_upgrades) then
        call SetBuildAll( BUILD_UPGRADE, 2, 'Rost', -1 )
    endif
    if (( ( ( GetGold(  ) >= 300 ) and ( GetWood(  ) >= 375 ) ) and ( GetUnitCountDone( 'ofor' ) > 0 ) )) then
        call SetBuildAll( BUILD_UPGRADE, 3, 'Roar', -1 )
    endif
    if (( ( GetUnitCountDone( 'obea' ) > 0 ) and ( GetUnitCountDone( 'ofor' ) > 0 ) )) then
        call SetBuildAll( BUILD_UNIT, 1, 'okod', -1 )
    endif
    if (( ( ( GetUnitCountDone( 'ofrt' ) > 0 ) and ( GetUnitCountDone( 'ofor' ) > 0 ) ) and ( GetUnitCountDone( 'obea' ) > 0 ) )) then
        call SetBuildAll( BUILD_UPGRADE, 1, 'Rwdm', -1 )
    endif
    if (gCond_Mage) then
        call SetBuildAll( BUILD_UNIT, 2, 'oshm', -1 )
        call SetBuildAll( BUILD_UNIT, 3, 'oshm', -1 )
    endif
    if (( ( ( GetGold(  ) >= 100 ) and ( GetWood(  ) >= 75 ) ) and ( ( GetUnitCountDone( 'ofor' ) > 0 ) and ( GetUpgradeLevel( 'Rora' ) > 1 ) ) )) then
        call SetBuildAll( BUILD_UPGRADE, 1, 'Rome', -1 )
    endif
    if (gCond_Flying_Dragon) then
        call SetBuildAll( BUILD_UNIT, 6, 'owyv', -1 )
        call SetBuildAll( BUILD_UNIT, 7, 'owyv', -1 )
    endif
    if (gCond_Master_upgrades) then
        call SetBuildAll( BUILD_UPGRADE, 2, 'Rowt', -1 )
    endif
    if (gCond_Mage) then
        call SetBuildAll( BUILD_UNIT, 4, 'oshm', -1 )
    endif
    if (( ( ( GetGold(  ) >= 150 ) and ( GetWood(  ) >= 175 ) ) and ( ( GetUnitCountDone( 'ofor' ) > 0 ) and ( GetUpgradeLevel( 'Rome' ) > 0 ) ) )) then
        call SetBuildAll( BUILD_UPGRADE, 2, 'Rome', -1 )
    endif
    if (gCond_Flying_Dragon) then
        call SetBuildAll( BUILD_UNIT, 8, 'owyv', -1 )
    endif
    if (( ( ( GetUnitCountDone( 'obea' ) > 0 ) and ( GetUnitCount( 'opeo' ) <= 16 ) ) and ( GetWood(  ) > 500 ) )) then
        call SetBuildAll( BUILD_UNIT, 9, 'owyv', -1 )
    endif
    if (gCond_Cave_2) then
        call SetBuildAll( BUILD_UNIT, 10, 'otrb', -1 )
        call SetBuildAll( BUILD_UNIT, 11, 'otrb', -1 )
        call SetBuildAll( BUILD_UNIT, 12, 'otrb', -1 )
        call SetBuildAll( BUILD_UNIT, 13, 'otrb', -1 )
        call SetBuildAll( BUILD_UNIT, 14, 'otrb', -1 )
        call SetBuildAll( BUILD_UNIT, 15, 'otrb', -1 )
    endif
    if (gCond_Super) then
        call SetBuildAll( BUILD_UNIT, 1, 'ovln', mine + 1 )
        call SetBuildAll( BUILD_UNIT, 1, 'obea', mine + 1 )
        call SetBuildAll( BUILD_UNIT, 2, 'obea', mine + 1 )
        call SetBuildAll( BUILD_UNIT, 1, 'osld', mine + 1 )
        call SetBuildAll( BUILD_UNIT, 2, 'osld', mine + 1 )
        call SetBuildAll( BUILD_UNIT, 1, 'oalt', mine + 1 )
        call SetBuildAll( BUILD_UNIT, 2, 'oalt', mine + 1 )
        call SetBuildAll( BUILD_UNIT, 1, 'otto', mine + 1 )
    endif
    if (( ( ( GetGold(  ) >= 200 ) and ( GetWood(  ) >= 275 ) ) and ( ( GetUnitCountDone( 'ofor' ) > 0 ) and ( GetUpgradeLevel( 'Rome' ) > 1 ) ) )) then
        call SetBuildAll( BUILD_UPGRADE, 3, 'Rome', -1 )
    endif
    if (gCond_Ultimate_upgrade) then
        call SetBuildAll( BUILD_UPGRADE, 1, 'Rosp', -1 )
        call SetBuildAll( BUILD_UPGRADE, 2, 'Rosp', -1 )
        call SetBuildAll( BUILD_UPGRADE, 3, 'Rosp', -1 )
    endif
    if (gCond_Super) then
        call SetBuildAll( BUILD_UPGRADE, 1, 'Ropm', -1 )
        call SetBuildAll( BUILD_UPGRADE, 1, 'Ropg', -1 )
    endif
endfunction

//===========================================================================
// Specifies harvesting priorities for workers
//===========================================================================
function HarvestPriorities takes nothing returns nothing
    local integer mine = TownWithMine()
    local integer allGold = GetUnitCountDone('opeo')
    local integer allWood = GetUnitCountDone('opeo')
    local integer numWorkers
    set numWorkers = 5
    call HarvestGold( mine + 0, numWorkers )
    if (( GetTownUnitCount( 'ogre', ( TownWithMine(  ) + 1 ), true ) >= 1 )) then
        set numWorkers = 5
        call HarvestGold( mine + 1, numWorkers )
    endif
    set numWorkers = allWood
    if (numWorkers > 0) then
        call HarvestWood( mine + 0, numWorkers )
    endif
    set numWorkers = allWood
    if (numWorkers > 0) then
        call HarvestWood( mine, numWorkers )
    endif
endfunction

//===========================================================================
// Determines all building and harvesting assignments for workers
//===========================================================================
function WorkerAssignment takes nothing returns nothing
    loop
        call UpdateConditions(  )

        // Harvesting
        call ClearHarvestAI(  )
        call HarvestPriorities(  )

        // Building
        call InitBuildArray(  )
        call BuildPriorities(  )

        call Sleep( 2 )
    endloop
endfunction

//***************************************************************************
//*
//*  Attacking
//*
//***************************************************************************

//===========================================================================
// Returns true if the minimum forces for an attack exist
//===========================================================================
function HaveMinimumAttackers takes nothing returns boolean
    local integer count

    // Check for attack wave limit
    if (attackWave > 1) then
        return false
    endif

    // Attack Group: Minimum power
    // No specific minimums exist, checking for at least one unit
    set count = 0
    set count = count + GetUnitCountDone(hero_id)
    set count = count + GetUnitCountDone(hero_id2)
    set count = count + GetUnitCountDone(hero_id3)
    if (count < 1) then
        return false
    endif
    return true
endfunction

//===========================================================================
// Assigns units to attack based on the given attack group
//===========================================================================
function PrepareAttackGroup takes integer groupID returns nothing
    local integer all

    // Attack Group #1: All units
    if (groupID == 1) then
        if (gCond_Retreat) then
            set all = GetUnitCountDone( hero_id )
            call AddAttackUnit( all, all, hero_id )
            set all = GetUnitCountDone( hero_id2 )
            call AddAttackUnit( all, all, hero_id2 )
            set all = GetUnitCountDone( hero_id3 )
            call AddAttackUnit( all, all, hero_id3 )
            set all = GetUnitCountDone( 'ospw' )
            call AddAttackUnit( all, all, 'ospw' )
            set all = GetUnitCountDone( 'ogru' )
            call AddAttackUnit( all, all, 'ogru' )
            set all = GetUnitCountDone( 'okod' )
            call AddAttackUnit( all, all, 'okod' )
            set all = GetUnitCountDone( 'oshm' )
            call AddAttackUnit( all, all, 'oshm' )
            set all = GetUnitCountDone( 'otau' )
            call AddAttackUnit( all, all, 'otau' )
            set all = GetUnitCountDone( 'owyv' )
            call AddAttackUnit( all, all, 'owyv' )
        endif

        // Attack Group #2: Minimum power
    elseif (groupID == 2) then
        set all = GetUnitCountDone( hero_id )
        call AddAttackUnit( all, all, hero_id )
        set all = GetUnitCountDone( hero_id2 )
        call AddAttackUnit( all, all, hero_id2 )
        set all = GetUnitCountDone( hero_id3 )
        call AddAttackUnit( all, all, hero_id3 )

    endif
endfunction

//===========================================================================
// Prepares an attack group based on the current attack wave
//===========================================================================
function PrepareForces takes nothing returns nothing
    if (attackWave == 1) then
        call PrepareAttackGroup( 1 )
    endif
endfunction

//===========================================================================
// Sleep delays for each attack wave
//===========================================================================
function AttackWaveDelay takes integer inWave returns nothing
    if (inWave < nextDelay) then
        return
    endif

    set nextDelay = inWave + 1
endfunction

//===========================================================================
// Advances attack wave counter
//===========================================================================
function AttackWaveUpdate takes nothing returns nothing
    call AttackWaveDelay( attackWave )
    set attackWave = attackWave + 1
    if (attackWave > 1) then
        set attackWave = 1
        set nextDelay = attackWave + 1
    endif
endfunction

//===========================================================================
// Basic attack functionality
//===========================================================================
function AttackTarget takes unit target, boolean addAlliance returns nothing
    if (target == null) then
        return
    endif
    if (addAlliance) then
        call SetAllianceTarget( target )
    endif
    call FormGroup( 3, true )
    call AttackMoveKillA( target )
    if (not addAlliance) then
        call SetAllianceTarget( null )
    endif
endfunction

//===========================================================================
// Initiates an attack based on target priorities
//===========================================================================
function LaunchAttack takes nothing returns nothing
    local unit target = null
    local boolean setAlly = true

    // Don't launch any attack while town is threatened
    if (TownThreatened()) then
        call Sleep( 2 )
        return
    endif

    // Target Priority #1
    if (( ( ( ExpansionNeeded(  ) == true ) and ( TownThreatened(  ) == false ) ) and ( GetMinesOwned(  ) < 2 ) )) then
        if (target == null) then
            set target = GetExpansionFoe()
            if (target != null) then
                set take_exp = false
            endif
        endif

        // Target Priority #2
    endif
    if (( ( ( ExpansionNeeded(  ) == true ) and ( FoodUsed(  ) > 80 ) ) and ( GetMinesOwned(  ) < 2 ) )) then
        if (target == null) then
            set target = GetExpansionFoe()
            if (target != null) then
                set take_exp = false
            endif
        endif

        // Target Priority #3
    endif
    if (target == null) then
        set target = GetAllianceTarget()
        if (target != null) then
            set setAlly = false
        endif
    endif

    // Target Priority #4
    if (( ( GetMinesOwned(  ) < 2 ) and ( CaptainReadinessHP(  ) > 50 ) )) then
        if (target == null) then
            set target = GetEnemyExpansion()
        endif

        // Target Priority #5
    endif
    if (( ( CaptainReadinessHP(  ) >= 80 ) and ( GetUnitCountDone( 'ofrt' ) == 0 ) )) then
        if (target == null) then
            set target = GetEnemyExpansion()
            if (target == null) then
                call StartGetEnemyBase(  )
                loop
                    exitwhen (not WaitGetEnemyBase())
                    call SuicideSleep( 1 )
                endloop
                set target = GetEnemyBase()
            endif
        endif

        // Target Priority #6
    endif
    if (( ( ( GetUnitCount( 'ofrt' ) == 0 ) and ( CaptainReadinessHP(  ) > 50 ) ) and ( GetUnitCountDone( 'ogru' ) >= 4 ) )) then
        if (target == null) then
            set target = GetEnemyExpansion()
            if (target == null) then
                call StartGetEnemyBase(  )
                loop
                    exitwhen (not WaitGetEnemyBase())
                    call SuicideSleep( 1 )
                endloop
                set target = GetEnemyBase()
            endif
        endif

        // Target Priority #7
    endif
    if (( ( GetUnitCount( 'ogru' ) >= 6 ) and ( GetUnitCountDone( 'ofrt' ) == 0 ) )) then
        if (target == null) then
            set target = GetEnemyExpansion()
            if (target == null) then
                call StartGetEnemyBase(  )
                loop
                    exitwhen (not WaitGetEnemyBase())
                    call SuicideSleep( 1 )
                endloop
                set target = GetEnemyBase()
            endif
        endif

        // Target Priority #8
    endif
    if (( ( GetMinesOwned(  ) >= 2 ) and ( ( GetUnitCountDone( 'ogre' ) == 0 ) and ( CaptainReadinessHP(  ) > 80 ) ) )) then
        if (target == null) then
            set target = GetEnemyExpansion()
            if (target == null) then
                call StartGetEnemyBase(  )
                loop
                    exitwhen (not WaitGetEnemyBase())
                    call SuicideSleep( 1 )
                endloop
                set target = GetEnemyBase()
            endif
        endif

        // Target Priority #9
    endif
    if (( ( GetGold(  ) >= 1000 ) and ( ( GetWood(  ) >= 200 ) and ( FoodUsed(  ) > 80 ) ) )) then
        if (target == null) then
            set target = GetEnemyExpansion()
            if (target == null) then
                call StartGetEnemyBase(  )
                loop
                    exitwhen (not WaitGetEnemyBase())
                    call SuicideSleep( 1 )
                endloop
                set target = GetEnemyBase()
            endif
        endif

        // Target Priority #10
    endif
    if (( ( CaptainReadinessHP(  ) >= 80 ) and ( FoodUsed(  ) > 80 ) )) then
        if (target == null) then
            set target = GetEnemyExpansion()
            if (target == null) then
                call StartGetEnemyBase(  )
                loop
                    exitwhen (not WaitGetEnemyBase())
                    call SuicideSleep( 1 )
                endloop
                set target = GetEnemyBase()
            endif
        endif

        // Target Priority #11
    endif
    if (( ( GetUnitCountDone( 'owyv' ) >= 4 ) and ( ( FoodUsed(  ) > 80 ) and ( CaptainReadinessHP(  ) > 50 ) ) )) then
        if (target == null) then
            set target = GetEnemyExpansion()
            if (target == null) then
                call StartGetEnemyBase(  )
                loop
                    exitwhen (not WaitGetEnemyBase())
                    call SuicideSleep( 1 )
                endloop
                set target = GetEnemyBase()
            endif
        endif

        // Target Priority #12
    endif
    if (( ( ( FoodUsed(  ) > 50 ) and ( CaptainReadinessHP(  ) > 50 ) ) and ( GetUnitCountDone( 'owyv' ) > 2 ) )) then
        if (target == null) then
            set target = GetCreepCamp( 20, 100, true )
        endif

        // Target Priority #13
    endif
    if (( ( ( FoodUsed(  ) > 38 ) and ( GetUnitCount( 'ofrt' ) == 0 ) ) or ( ( FoodUsed(  ) > 50 ) and ( CaptainReadinessHP(  ) > 50 ) ) )) then
        if (target == null) then
            set target = GetCreepCamp( 20, 100, false )
        endif

        // Target Priority #14
    endif
    if (( FoodUsed(  ) > 32 )) then
        if (target == null) then
            set target = GetCreepCamp( 10, 19, false )
        endif

        // Target Priority #15
    endif
    if (target == null) then
        set target = GetCreepCamp( 0, 9, false )
    endif

    // Target Priority #16
    if (( ( GetGold(  ) >= 650 ) and ( GetWood(  ) >= 250 ) )) then
        if (target == null) then
            call PurchaseZeppelin(  )
            return
        endif

        // Target Priority #17
    endif
    if (target == null) then
        set target = GetMegaTarget()
    endif

    // Attack the target and increment attack wave
    if (target != null) then
        call AttackTarget( target, setAlly )
        call AttackWaveUpdate(  )
    else
        // If no target was found, sleep a bit before trying again
        call Sleep( 20 )
    endif
endfunction

//===========================================================================
// Determines all attacking assignments
//===========================================================================
function AttackAssignment takes nothing returns nothing
    call StaggerSleep( 0, 2 )
    if (attackWave == 1) then
        call AttackWaveDelay( 0 )
    endif
    loop
        loop
            call UpdateConditions(  )
            exitwhen (HaveMinimumAttackers() and not CaptainRetreating())
            call Sleep( 2 )
        endloop
        call RemoveInjuries(  )
        call ResetAttackUnits(  )
        call PrepareForces(  )
        call LaunchAttack(  )
    endloop
endfunction

//***************************************************************************
//*
//*  Main Entry Point
//*
//***************************************************************************

//===========================================================================
function main takes nothing returns nothing
    call InitAI(  )
    call SetPlayerName( ai_player, "Jjm709394" )
    call InitOptions(  )
    call SelectHeroes(  )
    call CreateCaptains(  )
    call SetHeroLevels( function ChooseHeroSkill )

    call Sleep( 0.1 )
    call StartThread( function WorkerAssignment )
    call StartThread( function AttackAssignment )
    call PlayGame(  )
endfunction

